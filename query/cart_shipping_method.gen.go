// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newCartShippingMethod(db *gorm.DB, opts ...gen.DOOption) cartShippingMethod {
	_cartShippingMethod := cartShippingMethod{}

	_cartShippingMethod.cartShippingMethodDo.UseDB(db, opts...)
	_cartShippingMethod.cartShippingMethodDo.UseModel(&model.CartShippingMethod{})

	tableName := _cartShippingMethod.cartShippingMethodDo.TableName()
	_cartShippingMethod.ALL = field.NewAsterisk(tableName)
	_cartShippingMethod.ID = field.NewString(tableName, "id")
	_cartShippingMethod.CartID = field.NewString(tableName, "cart_id")
	_cartShippingMethod.Name = field.NewString(tableName, "name")
	_cartShippingMethod.Description = field.NewString(tableName, "description")
	_cartShippingMethod.Amount = field.NewFloat64(tableName, "amount")
	_cartShippingMethod.RawAmount = field.NewString(tableName, "raw_amount")
	_cartShippingMethod.IsTaxInclusive = field.NewBool(tableName, "is_tax_inclusive")
	_cartShippingMethod.ShippingOptionID = field.NewString(tableName, "shipping_option_id")
	_cartShippingMethod.Data = field.NewString(tableName, "data")
	_cartShippingMethod.Metadata = field.NewString(tableName, "metadata")
	_cartShippingMethod.CreatedAt = field.NewTime(tableName, "created_at")
	_cartShippingMethod.UpdatedAt = field.NewTime(tableName, "updated_at")

	_cartShippingMethod.fillFieldMap()

	return _cartShippingMethod
}

type cartShippingMethod struct {
	cartShippingMethodDo cartShippingMethodDo

	ALL              field.Asterisk
	ID               field.String
	CartID           field.String
	Name             field.String
	Description      field.String
	Amount           field.Float64
	RawAmount        field.String
	IsTaxInclusive   field.Bool
	ShippingOptionID field.String
	Data             field.String
	Metadata         field.String
	CreatedAt        field.Time
	UpdatedAt        field.Time

	fieldMap map[string]field.Expr
}

func (c cartShippingMethod) Table(newTableName string) *cartShippingMethod {
	c.cartShippingMethodDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cartShippingMethod) As(alias string) *cartShippingMethod {
	c.cartShippingMethodDo.DO = *(c.cartShippingMethodDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cartShippingMethod) updateTableName(table string) *cartShippingMethod {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewString(table, "id")
	c.CartID = field.NewString(table, "cart_id")
	c.Name = field.NewString(table, "name")
	c.Description = field.NewString(table, "description")
	c.Amount = field.NewFloat64(table, "amount")
	c.RawAmount = field.NewString(table, "raw_amount")
	c.IsTaxInclusive = field.NewBool(table, "is_tax_inclusive")
	c.ShippingOptionID = field.NewString(table, "shipping_option_id")
	c.Data = field.NewString(table, "data")
	c.Metadata = field.NewString(table, "metadata")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *cartShippingMethod) WithContext(ctx context.Context) *cartShippingMethodDo {
	return c.cartShippingMethodDo.WithContext(ctx)
}

func (c cartShippingMethod) TableName() string { return c.cartShippingMethodDo.TableName() }

func (c cartShippingMethod) Alias() string { return c.cartShippingMethodDo.Alias() }

func (c cartShippingMethod) Columns(cols ...field.Expr) gen.Columns {
	return c.cartShippingMethodDo.Columns(cols...)
}

func (c *cartShippingMethod) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cartShippingMethod) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 12)
	c.fieldMap["id"] = c.ID
	c.fieldMap["cart_id"] = c.CartID
	c.fieldMap["name"] = c.Name
	c.fieldMap["description"] = c.Description
	c.fieldMap["amount"] = c.Amount
	c.fieldMap["raw_amount"] = c.RawAmount
	c.fieldMap["is_tax_inclusive"] = c.IsTaxInclusive
	c.fieldMap["shipping_option_id"] = c.ShippingOptionID
	c.fieldMap["data"] = c.Data
	c.fieldMap["metadata"] = c.Metadata
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
}

func (c cartShippingMethod) clone(db *gorm.DB) cartShippingMethod {
	c.cartShippingMethodDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cartShippingMethod) replaceDB(db *gorm.DB) cartShippingMethod {
	c.cartShippingMethodDo.ReplaceDB(db)
	return c
}

type cartShippingMethodDo struct{ gen.DO }

func (c cartShippingMethodDo) Debug() *cartShippingMethodDo {
	return c.withDO(c.DO.Debug())
}

func (c cartShippingMethodDo) WithContext(ctx context.Context) *cartShippingMethodDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cartShippingMethodDo) ReadDB() *cartShippingMethodDo {
	return c.Clauses(dbresolver.Read)
}

func (c cartShippingMethodDo) WriteDB() *cartShippingMethodDo {
	return c.Clauses(dbresolver.Write)
}

func (c cartShippingMethodDo) Session(config *gorm.Session) *cartShippingMethodDo {
	return c.withDO(c.DO.Session(config))
}

func (c cartShippingMethodDo) Clauses(conds ...clause.Expression) *cartShippingMethodDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cartShippingMethodDo) Returning(value interface{}, columns ...string) *cartShippingMethodDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cartShippingMethodDo) Not(conds ...gen.Condition) *cartShippingMethodDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cartShippingMethodDo) Or(conds ...gen.Condition) *cartShippingMethodDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cartShippingMethodDo) Select(conds ...field.Expr) *cartShippingMethodDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cartShippingMethodDo) Where(conds ...gen.Condition) *cartShippingMethodDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cartShippingMethodDo) Order(conds ...field.Expr) *cartShippingMethodDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cartShippingMethodDo) Distinct(cols ...field.Expr) *cartShippingMethodDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cartShippingMethodDo) Omit(cols ...field.Expr) *cartShippingMethodDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cartShippingMethodDo) Join(table schema.Tabler, on ...field.Expr) *cartShippingMethodDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cartShippingMethodDo) LeftJoin(table schema.Tabler, on ...field.Expr) *cartShippingMethodDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cartShippingMethodDo) RightJoin(table schema.Tabler, on ...field.Expr) *cartShippingMethodDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cartShippingMethodDo) Group(cols ...field.Expr) *cartShippingMethodDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cartShippingMethodDo) Having(conds ...gen.Condition) *cartShippingMethodDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cartShippingMethodDo) Limit(limit int) *cartShippingMethodDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cartShippingMethodDo) Offset(offset int) *cartShippingMethodDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cartShippingMethodDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *cartShippingMethodDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cartShippingMethodDo) Unscoped() *cartShippingMethodDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cartShippingMethodDo) Create(values ...*model.CartShippingMethod) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cartShippingMethodDo) CreateInBatches(values []*model.CartShippingMethod, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cartShippingMethodDo) Save(values ...*model.CartShippingMethod) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cartShippingMethodDo) First() (*model.CartShippingMethod, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CartShippingMethod), nil
	}
}

func (c cartShippingMethodDo) Take() (*model.CartShippingMethod, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CartShippingMethod), nil
	}
}

func (c cartShippingMethodDo) Last() (*model.CartShippingMethod, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CartShippingMethod), nil
	}
}

func (c cartShippingMethodDo) Find() ([]*model.CartShippingMethod, error) {
	result, err := c.DO.Find()
	return result.([]*model.CartShippingMethod), err
}

func (c cartShippingMethodDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CartShippingMethod, err error) {
	buf := make([]*model.CartShippingMethod, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cartShippingMethodDo) FindInBatches(result *[]*model.CartShippingMethod, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cartShippingMethodDo) Attrs(attrs ...field.AssignExpr) *cartShippingMethodDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cartShippingMethodDo) Assign(attrs ...field.AssignExpr) *cartShippingMethodDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cartShippingMethodDo) Joins(fields ...field.RelationField) *cartShippingMethodDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cartShippingMethodDo) Preload(fields ...field.RelationField) *cartShippingMethodDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cartShippingMethodDo) FirstOrInit() (*model.CartShippingMethod, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CartShippingMethod), nil
	}
}

func (c cartShippingMethodDo) FirstOrCreate() (*model.CartShippingMethod, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CartShippingMethod), nil
	}
}

func (c cartShippingMethodDo) FindByPage(offset int, limit int) (result []*model.CartShippingMethod, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cartShippingMethodDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cartShippingMethodDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cartShippingMethodDo) Delete(models ...*model.CartShippingMethod) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cartShippingMethodDo) withDO(do gen.Dao) *cartShippingMethodDo {
	c.DO = *do.(*gen.DO)
	return c
}
