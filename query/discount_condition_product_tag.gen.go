// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newDiscountConditionProductTag(db *gorm.DB, opts ...gen.DOOption) discountConditionProductTag {
	_discountConditionProductTag := discountConditionProductTag{}

	_discountConditionProductTag.discountConditionProductTagDo.UseDB(db, opts...)
	_discountConditionProductTag.discountConditionProductTagDo.UseModel(&model.DiscountConditionProductTag{})

	tableName := _discountConditionProductTag.discountConditionProductTagDo.TableName()
	_discountConditionProductTag.ALL = field.NewAsterisk(tableName)
	_discountConditionProductTag.ProductTagID = field.NewString(tableName, "product_tag_id")
	_discountConditionProductTag.ConditionID = field.NewString(tableName, "condition_id")
	_discountConditionProductTag.CreatedAt = field.NewTime(tableName, "created_at")
	_discountConditionProductTag.UpdatedAt = field.NewTime(tableName, "updated_at")
	_discountConditionProductTag.Metadata = field.NewString(tableName, "metadata")

	_discountConditionProductTag.fillFieldMap()

	return _discountConditionProductTag
}

type discountConditionProductTag struct {
	discountConditionProductTagDo discountConditionProductTagDo

	ALL          field.Asterisk
	ProductTagID field.String
	ConditionID  field.String
	CreatedAt    field.Time
	UpdatedAt    field.Time
	Metadata     field.String

	fieldMap map[string]field.Expr
}

func (d discountConditionProductTag) Table(newTableName string) *discountConditionProductTag {
	d.discountConditionProductTagDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d discountConditionProductTag) As(alias string) *discountConditionProductTag {
	d.discountConditionProductTagDo.DO = *(d.discountConditionProductTagDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *discountConditionProductTag) updateTableName(table string) *discountConditionProductTag {
	d.ALL = field.NewAsterisk(table)
	d.ProductTagID = field.NewString(table, "product_tag_id")
	d.ConditionID = field.NewString(table, "condition_id")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.Metadata = field.NewString(table, "metadata")

	d.fillFieldMap()

	return d
}

func (d *discountConditionProductTag) WithContext(ctx context.Context) *discountConditionProductTagDo {
	return d.discountConditionProductTagDo.WithContext(ctx)
}

func (d discountConditionProductTag) TableName() string {
	return d.discountConditionProductTagDo.TableName()
}

func (d discountConditionProductTag) Alias() string { return d.discountConditionProductTagDo.Alias() }

func (d discountConditionProductTag) Columns(cols ...field.Expr) gen.Columns {
	return d.discountConditionProductTagDo.Columns(cols...)
}

func (d *discountConditionProductTag) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *discountConditionProductTag) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 5)
	d.fieldMap["product_tag_id"] = d.ProductTagID
	d.fieldMap["condition_id"] = d.ConditionID
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["metadata"] = d.Metadata
}

func (d discountConditionProductTag) clone(db *gorm.DB) discountConditionProductTag {
	d.discountConditionProductTagDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d discountConditionProductTag) replaceDB(db *gorm.DB) discountConditionProductTag {
	d.discountConditionProductTagDo.ReplaceDB(db)
	return d
}

type discountConditionProductTagDo struct{ gen.DO }

func (d discountConditionProductTagDo) Debug() *discountConditionProductTagDo {
	return d.withDO(d.DO.Debug())
}

func (d discountConditionProductTagDo) WithContext(ctx context.Context) *discountConditionProductTagDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d discountConditionProductTagDo) ReadDB() *discountConditionProductTagDo {
	return d.Clauses(dbresolver.Read)
}

func (d discountConditionProductTagDo) WriteDB() *discountConditionProductTagDo {
	return d.Clauses(dbresolver.Write)
}

func (d discountConditionProductTagDo) Session(config *gorm.Session) *discountConditionProductTagDo {
	return d.withDO(d.DO.Session(config))
}

func (d discountConditionProductTagDo) Clauses(conds ...clause.Expression) *discountConditionProductTagDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d discountConditionProductTagDo) Returning(value interface{}, columns ...string) *discountConditionProductTagDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d discountConditionProductTagDo) Not(conds ...gen.Condition) *discountConditionProductTagDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d discountConditionProductTagDo) Or(conds ...gen.Condition) *discountConditionProductTagDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d discountConditionProductTagDo) Select(conds ...field.Expr) *discountConditionProductTagDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d discountConditionProductTagDo) Where(conds ...gen.Condition) *discountConditionProductTagDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d discountConditionProductTagDo) Order(conds ...field.Expr) *discountConditionProductTagDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d discountConditionProductTagDo) Distinct(cols ...field.Expr) *discountConditionProductTagDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d discountConditionProductTagDo) Omit(cols ...field.Expr) *discountConditionProductTagDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d discountConditionProductTagDo) Join(table schema.Tabler, on ...field.Expr) *discountConditionProductTagDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d discountConditionProductTagDo) LeftJoin(table schema.Tabler, on ...field.Expr) *discountConditionProductTagDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d discountConditionProductTagDo) RightJoin(table schema.Tabler, on ...field.Expr) *discountConditionProductTagDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d discountConditionProductTagDo) Group(cols ...field.Expr) *discountConditionProductTagDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d discountConditionProductTagDo) Having(conds ...gen.Condition) *discountConditionProductTagDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d discountConditionProductTagDo) Limit(limit int) *discountConditionProductTagDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d discountConditionProductTagDo) Offset(offset int) *discountConditionProductTagDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d discountConditionProductTagDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *discountConditionProductTagDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d discountConditionProductTagDo) Unscoped() *discountConditionProductTagDo {
	return d.withDO(d.DO.Unscoped())
}

func (d discountConditionProductTagDo) Create(values ...*model.DiscountConditionProductTag) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d discountConditionProductTagDo) CreateInBatches(values []*model.DiscountConditionProductTag, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d discountConditionProductTagDo) Save(values ...*model.DiscountConditionProductTag) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d discountConditionProductTagDo) First() (*model.DiscountConditionProductTag, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiscountConditionProductTag), nil
	}
}

func (d discountConditionProductTagDo) Take() (*model.DiscountConditionProductTag, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiscountConditionProductTag), nil
	}
}

func (d discountConditionProductTagDo) Last() (*model.DiscountConditionProductTag, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiscountConditionProductTag), nil
	}
}

func (d discountConditionProductTagDo) Find() ([]*model.DiscountConditionProductTag, error) {
	result, err := d.DO.Find()
	return result.([]*model.DiscountConditionProductTag), err
}

func (d discountConditionProductTagDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DiscountConditionProductTag, err error) {
	buf := make([]*model.DiscountConditionProductTag, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d discountConditionProductTagDo) FindInBatches(result *[]*model.DiscountConditionProductTag, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d discountConditionProductTagDo) Attrs(attrs ...field.AssignExpr) *discountConditionProductTagDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d discountConditionProductTagDo) Assign(attrs ...field.AssignExpr) *discountConditionProductTagDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d discountConditionProductTagDo) Joins(fields ...field.RelationField) *discountConditionProductTagDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d discountConditionProductTagDo) Preload(fields ...field.RelationField) *discountConditionProductTagDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d discountConditionProductTagDo) FirstOrInit() (*model.DiscountConditionProductTag, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiscountConditionProductTag), nil
	}
}

func (d discountConditionProductTagDo) FirstOrCreate() (*model.DiscountConditionProductTag, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiscountConditionProductTag), nil
	}
}

func (d discountConditionProductTagDo) FindByPage(offset int, limit int) (result []*model.DiscountConditionProductTag, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d discountConditionProductTagDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d discountConditionProductTagDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d discountConditionProductTagDo) Delete(models ...*model.DiscountConditionProductTag) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *discountConditionProductTagDo) withDO(do gen.Dao) *discountConditionProductTagDo {
	d.DO = *do.(*gen.DO)
	return d
}
