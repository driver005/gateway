// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newTrackingLink(db *gorm.DB, opts ...gen.DOOption) trackingLink {
	_trackingLink := trackingLink{}

	_trackingLink.trackingLinkDo.UseDB(db, opts...)
	_trackingLink.trackingLinkDo.UseModel(&model.TrackingLink{})

	tableName := _trackingLink.trackingLinkDo.TableName()
	_trackingLink.ALL = field.NewAsterisk(tableName)
	_trackingLink.ID = field.NewString(tableName, "id")
	_trackingLink.URL = field.NewString(tableName, "url")
	_trackingLink.TrackingNumber = field.NewString(tableName, "tracking_number")
	_trackingLink.FulfillmentID = field.NewString(tableName, "fulfillment_id")
	_trackingLink.CreatedAt = field.NewTime(tableName, "created_at")
	_trackingLink.UpdatedAt = field.NewTime(tableName, "updated_at")
	_trackingLink.DeletedAt = field.NewField(tableName, "deleted_at")
	_trackingLink.Metadata = field.NewString(tableName, "metadata")
	_trackingLink.IdempotencyKey = field.NewString(tableName, "idempotency_key")

	_trackingLink.fillFieldMap()

	return _trackingLink
}

type trackingLink struct {
	trackingLinkDo trackingLinkDo

	ALL            field.Asterisk
	ID             field.String
	URL            field.String
	TrackingNumber field.String
	FulfillmentID  field.String
	CreatedAt      field.Time
	UpdatedAt      field.Time
	DeletedAt      field.Field
	Metadata       field.String
	IdempotencyKey field.String

	fieldMap map[string]field.Expr
}

func (t trackingLink) Table(newTableName string) *trackingLink {
	t.trackingLinkDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t trackingLink) As(alias string) *trackingLink {
	t.trackingLinkDo.DO = *(t.trackingLinkDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *trackingLink) updateTableName(table string) *trackingLink {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewString(table, "id")
	t.URL = field.NewString(table, "url")
	t.TrackingNumber = field.NewString(table, "tracking_number")
	t.FulfillmentID = field.NewString(table, "fulfillment_id")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.Metadata = field.NewString(table, "metadata")
	t.IdempotencyKey = field.NewString(table, "idempotency_key")

	t.fillFieldMap()

	return t
}

func (t *trackingLink) WithContext(ctx context.Context) *trackingLinkDo {
	return t.trackingLinkDo.WithContext(ctx)
}

func (t trackingLink) TableName() string { return t.trackingLinkDo.TableName() }

func (t trackingLink) Alias() string { return t.trackingLinkDo.Alias() }

func (t trackingLink) Columns(cols ...field.Expr) gen.Columns {
	return t.trackingLinkDo.Columns(cols...)
}

func (t *trackingLink) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *trackingLink) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 9)
	t.fieldMap["id"] = t.ID
	t.fieldMap["url"] = t.URL
	t.fieldMap["tracking_number"] = t.TrackingNumber
	t.fieldMap["fulfillment_id"] = t.FulfillmentID
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["metadata"] = t.Metadata
	t.fieldMap["idempotency_key"] = t.IdempotencyKey
}

func (t trackingLink) clone(db *gorm.DB) trackingLink {
	t.trackingLinkDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t trackingLink) replaceDB(db *gorm.DB) trackingLink {
	t.trackingLinkDo.ReplaceDB(db)
	return t
}

type trackingLinkDo struct{ gen.DO }

func (t trackingLinkDo) Debug() *trackingLinkDo {
	return t.withDO(t.DO.Debug())
}

func (t trackingLinkDo) WithContext(ctx context.Context) *trackingLinkDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t trackingLinkDo) ReadDB() *trackingLinkDo {
	return t.Clauses(dbresolver.Read)
}

func (t trackingLinkDo) WriteDB() *trackingLinkDo {
	return t.Clauses(dbresolver.Write)
}

func (t trackingLinkDo) Session(config *gorm.Session) *trackingLinkDo {
	return t.withDO(t.DO.Session(config))
}

func (t trackingLinkDo) Clauses(conds ...clause.Expression) *trackingLinkDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t trackingLinkDo) Returning(value interface{}, columns ...string) *trackingLinkDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t trackingLinkDo) Not(conds ...gen.Condition) *trackingLinkDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t trackingLinkDo) Or(conds ...gen.Condition) *trackingLinkDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t trackingLinkDo) Select(conds ...field.Expr) *trackingLinkDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t trackingLinkDo) Where(conds ...gen.Condition) *trackingLinkDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t trackingLinkDo) Order(conds ...field.Expr) *trackingLinkDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t trackingLinkDo) Distinct(cols ...field.Expr) *trackingLinkDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t trackingLinkDo) Omit(cols ...field.Expr) *trackingLinkDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t trackingLinkDo) Join(table schema.Tabler, on ...field.Expr) *trackingLinkDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t trackingLinkDo) LeftJoin(table schema.Tabler, on ...field.Expr) *trackingLinkDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t trackingLinkDo) RightJoin(table schema.Tabler, on ...field.Expr) *trackingLinkDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t trackingLinkDo) Group(cols ...field.Expr) *trackingLinkDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t trackingLinkDo) Having(conds ...gen.Condition) *trackingLinkDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t trackingLinkDo) Limit(limit int) *trackingLinkDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t trackingLinkDo) Offset(offset int) *trackingLinkDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t trackingLinkDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *trackingLinkDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t trackingLinkDo) Unscoped() *trackingLinkDo {
	return t.withDO(t.DO.Unscoped())
}

func (t trackingLinkDo) Create(values ...*model.TrackingLink) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t trackingLinkDo) CreateInBatches(values []*model.TrackingLink, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t trackingLinkDo) Save(values ...*model.TrackingLink) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t trackingLinkDo) First() (*model.TrackingLink, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TrackingLink), nil
	}
}

func (t trackingLinkDo) Take() (*model.TrackingLink, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TrackingLink), nil
	}
}

func (t trackingLinkDo) Last() (*model.TrackingLink, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TrackingLink), nil
	}
}

func (t trackingLinkDo) Find() ([]*model.TrackingLink, error) {
	result, err := t.DO.Find()
	return result.([]*model.TrackingLink), err
}

func (t trackingLinkDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TrackingLink, err error) {
	buf := make([]*model.TrackingLink, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t trackingLinkDo) FindInBatches(result *[]*model.TrackingLink, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t trackingLinkDo) Attrs(attrs ...field.AssignExpr) *trackingLinkDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t trackingLinkDo) Assign(attrs ...field.AssignExpr) *trackingLinkDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t trackingLinkDo) Joins(fields ...field.RelationField) *trackingLinkDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t trackingLinkDo) Preload(fields ...field.RelationField) *trackingLinkDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t trackingLinkDo) FirstOrInit() (*model.TrackingLink, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TrackingLink), nil
	}
}

func (t trackingLinkDo) FirstOrCreate() (*model.TrackingLink, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TrackingLink), nil
	}
}

func (t trackingLinkDo) FindByPage(offset int, limit int) (result []*model.TrackingLink, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t trackingLinkDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t trackingLinkDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t trackingLinkDo) Delete(models ...*model.TrackingLink) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *trackingLinkDo) withDO(do gen.Dao) *trackingLinkDo {
	t.DO = *do.(*gen.DO)
	return t
}
