// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newServiceZone(db *gorm.DB, opts ...gen.DOOption) serviceZone {
	_serviceZone := serviceZone{}

	_serviceZone.serviceZoneDo.UseDB(db, opts...)
	_serviceZone.serviceZoneDo.UseModel(&model.ServiceZone{})

	tableName := _serviceZone.serviceZoneDo.TableName()
	_serviceZone.ALL = field.NewAsterisk(tableName)
	_serviceZone.ID = field.NewString(tableName, "id")
	_serviceZone.Name = field.NewString(tableName, "name")
	_serviceZone.Metadata = field.NewString(tableName, "metadata")
	_serviceZone.FulfillmentSetID = field.NewString(tableName, "fulfillment_set_id")
	_serviceZone.CreatedAt = field.NewTime(tableName, "created_at")
	_serviceZone.UpdatedAt = field.NewTime(tableName, "updated_at")
	_serviceZone.DeletedAt = field.NewField(tableName, "deleted_at")

	_serviceZone.fillFieldMap()

	return _serviceZone
}

type serviceZone struct {
	serviceZoneDo serviceZoneDo

	ALL              field.Asterisk
	ID               field.String
	Name             field.String
	Metadata         field.String
	FulfillmentSetID field.String
	CreatedAt        field.Time
	UpdatedAt        field.Time
	DeletedAt        field.Field

	fieldMap map[string]field.Expr
}

func (s serviceZone) Table(newTableName string) *serviceZone {
	s.serviceZoneDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s serviceZone) As(alias string) *serviceZone {
	s.serviceZoneDo.DO = *(s.serviceZoneDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *serviceZone) updateTableName(table string) *serviceZone {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.Name = field.NewString(table, "name")
	s.Metadata = field.NewString(table, "metadata")
	s.FulfillmentSetID = field.NewString(table, "fulfillment_set_id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *serviceZone) WithContext(ctx context.Context) *serviceZoneDo {
	return s.serviceZoneDo.WithContext(ctx)
}

func (s serviceZone) TableName() string { return s.serviceZoneDo.TableName() }

func (s serviceZone) Alias() string { return s.serviceZoneDo.Alias() }

func (s serviceZone) Columns(cols ...field.Expr) gen.Columns { return s.serviceZoneDo.Columns(cols...) }

func (s *serviceZone) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *serviceZone) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["metadata"] = s.Metadata
	s.fieldMap["fulfillment_set_id"] = s.FulfillmentSetID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s serviceZone) clone(db *gorm.DB) serviceZone {
	s.serviceZoneDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s serviceZone) replaceDB(db *gorm.DB) serviceZone {
	s.serviceZoneDo.ReplaceDB(db)
	return s
}

type serviceZoneDo struct{ gen.DO }

func (s serviceZoneDo) Debug() *serviceZoneDo {
	return s.withDO(s.DO.Debug())
}

func (s serviceZoneDo) WithContext(ctx context.Context) *serviceZoneDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s serviceZoneDo) ReadDB() *serviceZoneDo {
	return s.Clauses(dbresolver.Read)
}

func (s serviceZoneDo) WriteDB() *serviceZoneDo {
	return s.Clauses(dbresolver.Write)
}

func (s serviceZoneDo) Session(config *gorm.Session) *serviceZoneDo {
	return s.withDO(s.DO.Session(config))
}

func (s serviceZoneDo) Clauses(conds ...clause.Expression) *serviceZoneDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s serviceZoneDo) Returning(value interface{}, columns ...string) *serviceZoneDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s serviceZoneDo) Not(conds ...gen.Condition) *serviceZoneDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s serviceZoneDo) Or(conds ...gen.Condition) *serviceZoneDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s serviceZoneDo) Select(conds ...field.Expr) *serviceZoneDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s serviceZoneDo) Where(conds ...gen.Condition) *serviceZoneDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s serviceZoneDo) Order(conds ...field.Expr) *serviceZoneDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s serviceZoneDo) Distinct(cols ...field.Expr) *serviceZoneDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s serviceZoneDo) Omit(cols ...field.Expr) *serviceZoneDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s serviceZoneDo) Join(table schema.Tabler, on ...field.Expr) *serviceZoneDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s serviceZoneDo) LeftJoin(table schema.Tabler, on ...field.Expr) *serviceZoneDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s serviceZoneDo) RightJoin(table schema.Tabler, on ...field.Expr) *serviceZoneDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s serviceZoneDo) Group(cols ...field.Expr) *serviceZoneDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s serviceZoneDo) Having(conds ...gen.Condition) *serviceZoneDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s serviceZoneDo) Limit(limit int) *serviceZoneDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s serviceZoneDo) Offset(offset int) *serviceZoneDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s serviceZoneDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *serviceZoneDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s serviceZoneDo) Unscoped() *serviceZoneDo {
	return s.withDO(s.DO.Unscoped())
}

func (s serviceZoneDo) Create(values ...*model.ServiceZone) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s serviceZoneDo) CreateInBatches(values []*model.ServiceZone, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s serviceZoneDo) Save(values ...*model.ServiceZone) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s serviceZoneDo) First() (*model.ServiceZone, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServiceZone), nil
	}
}

func (s serviceZoneDo) Take() (*model.ServiceZone, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServiceZone), nil
	}
}

func (s serviceZoneDo) Last() (*model.ServiceZone, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServiceZone), nil
	}
}

func (s serviceZoneDo) Find() ([]*model.ServiceZone, error) {
	result, err := s.DO.Find()
	return result.([]*model.ServiceZone), err
}

func (s serviceZoneDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServiceZone, err error) {
	buf := make([]*model.ServiceZone, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s serviceZoneDo) FindInBatches(result *[]*model.ServiceZone, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s serviceZoneDo) Attrs(attrs ...field.AssignExpr) *serviceZoneDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s serviceZoneDo) Assign(attrs ...field.AssignExpr) *serviceZoneDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s serviceZoneDo) Joins(fields ...field.RelationField) *serviceZoneDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s serviceZoneDo) Preload(fields ...field.RelationField) *serviceZoneDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s serviceZoneDo) FirstOrInit() (*model.ServiceZone, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServiceZone), nil
	}
}

func (s serviceZoneDo) FirstOrCreate() (*model.ServiceZone, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServiceZone), nil
	}
}

func (s serviceZoneDo) FindByPage(offset int, limit int) (result []*model.ServiceZone, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s serviceZoneDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s serviceZoneDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s serviceZoneDo) Delete(models ...*model.ServiceZone) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *serviceZoneDo) withDO(do gen.Dao) *serviceZoneDo {
	s.DO = *do.(*gen.DO)
	return s
}
