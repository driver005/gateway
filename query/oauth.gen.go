// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newOauth(db *gorm.DB, opts ...gen.DOOption) oauth {
	_oauth := oauth{}

	_oauth.oauthDo.UseDB(db, opts...)
	_oauth.oauthDo.UseModel(&model.Oauth{})

	tableName := _oauth.oauthDo.TableName()
	_oauth.ALL = field.NewAsterisk(tableName)
	_oauth.ID = field.NewString(tableName, "id")
	_oauth.DisplayName = field.NewString(tableName, "display_name")
	_oauth.ApplicationName = field.NewString(tableName, "application_name")
	_oauth.InstallURL = field.NewString(tableName, "install_url")
	_oauth.UninstallURL = field.NewString(tableName, "uninstall_url")
	_oauth.Data = field.NewString(tableName, "data")

	_oauth.fillFieldMap()

	return _oauth
}

type oauth struct {
	oauthDo oauthDo

	ALL             field.Asterisk
	ID              field.String
	DisplayName     field.String
	ApplicationName field.String
	InstallURL      field.String
	UninstallURL    field.String
	Data            field.String

	fieldMap map[string]field.Expr
}

func (o oauth) Table(newTableName string) *oauth {
	o.oauthDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o oauth) As(alias string) *oauth {
	o.oauthDo.DO = *(o.oauthDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *oauth) updateTableName(table string) *oauth {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewString(table, "id")
	o.DisplayName = field.NewString(table, "display_name")
	o.ApplicationName = field.NewString(table, "application_name")
	o.InstallURL = field.NewString(table, "install_url")
	o.UninstallURL = field.NewString(table, "uninstall_url")
	o.Data = field.NewString(table, "data")

	o.fillFieldMap()

	return o
}

func (o *oauth) WithContext(ctx context.Context) *oauthDo { return o.oauthDo.WithContext(ctx) }

func (o oauth) TableName() string { return o.oauthDo.TableName() }

func (o oauth) Alias() string { return o.oauthDo.Alias() }

func (o oauth) Columns(cols ...field.Expr) gen.Columns { return o.oauthDo.Columns(cols...) }

func (o *oauth) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *oauth) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 6)
	o.fieldMap["id"] = o.ID
	o.fieldMap["display_name"] = o.DisplayName
	o.fieldMap["application_name"] = o.ApplicationName
	o.fieldMap["install_url"] = o.InstallURL
	o.fieldMap["uninstall_url"] = o.UninstallURL
	o.fieldMap["data"] = o.Data
}

func (o oauth) clone(db *gorm.DB) oauth {
	o.oauthDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o oauth) replaceDB(db *gorm.DB) oauth {
	o.oauthDo.ReplaceDB(db)
	return o
}

type oauthDo struct{ gen.DO }

func (o oauthDo) Debug() *oauthDo {
	return o.withDO(o.DO.Debug())
}

func (o oauthDo) WithContext(ctx context.Context) *oauthDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o oauthDo) ReadDB() *oauthDo {
	return o.Clauses(dbresolver.Read)
}

func (o oauthDo) WriteDB() *oauthDo {
	return o.Clauses(dbresolver.Write)
}

func (o oauthDo) Session(config *gorm.Session) *oauthDo {
	return o.withDO(o.DO.Session(config))
}

func (o oauthDo) Clauses(conds ...clause.Expression) *oauthDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o oauthDo) Returning(value interface{}, columns ...string) *oauthDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o oauthDo) Not(conds ...gen.Condition) *oauthDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o oauthDo) Or(conds ...gen.Condition) *oauthDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o oauthDo) Select(conds ...field.Expr) *oauthDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o oauthDo) Where(conds ...gen.Condition) *oauthDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o oauthDo) Order(conds ...field.Expr) *oauthDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o oauthDo) Distinct(cols ...field.Expr) *oauthDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o oauthDo) Omit(cols ...field.Expr) *oauthDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o oauthDo) Join(table schema.Tabler, on ...field.Expr) *oauthDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o oauthDo) LeftJoin(table schema.Tabler, on ...field.Expr) *oauthDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o oauthDo) RightJoin(table schema.Tabler, on ...field.Expr) *oauthDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o oauthDo) Group(cols ...field.Expr) *oauthDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o oauthDo) Having(conds ...gen.Condition) *oauthDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o oauthDo) Limit(limit int) *oauthDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o oauthDo) Offset(offset int) *oauthDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o oauthDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *oauthDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o oauthDo) Unscoped() *oauthDo {
	return o.withDO(o.DO.Unscoped())
}

func (o oauthDo) Create(values ...*model.Oauth) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o oauthDo) CreateInBatches(values []*model.Oauth, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o oauthDo) Save(values ...*model.Oauth) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o oauthDo) First() (*model.Oauth, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Oauth), nil
	}
}

func (o oauthDo) Take() (*model.Oauth, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Oauth), nil
	}
}

func (o oauthDo) Last() (*model.Oauth, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Oauth), nil
	}
}

func (o oauthDo) Find() ([]*model.Oauth, error) {
	result, err := o.DO.Find()
	return result.([]*model.Oauth), err
}

func (o oauthDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Oauth, err error) {
	buf := make([]*model.Oauth, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o oauthDo) FindInBatches(result *[]*model.Oauth, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o oauthDo) Attrs(attrs ...field.AssignExpr) *oauthDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o oauthDo) Assign(attrs ...field.AssignExpr) *oauthDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o oauthDo) Joins(fields ...field.RelationField) *oauthDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o oauthDo) Preload(fields ...field.RelationField) *oauthDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o oauthDo) FirstOrInit() (*model.Oauth, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Oauth), nil
	}
}

func (o oauthDo) FirstOrCreate() (*model.Oauth, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Oauth), nil
	}
}

func (o oauthDo) FindByPage(offset int, limit int) (result []*model.Oauth, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o oauthDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o oauthDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o oauthDo) Delete(models ...*model.Oauth) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *oauthDo) withDO(do gen.Dao) *oauthDo {
	o.DO = *do.(*gen.DO)
	return o
}
