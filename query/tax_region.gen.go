// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newTaxRegion(db *gorm.DB, opts ...gen.DOOption) taxRegion {
	_taxRegion := taxRegion{}

	_taxRegion.taxRegionDo.UseDB(db, opts...)
	_taxRegion.taxRegionDo.UseModel(&model.TaxRegion{})

	tableName := _taxRegion.taxRegionDo.TableName()
	_taxRegion.ALL = field.NewAsterisk(tableName)
	_taxRegion.ID = field.NewString(tableName, "id")
	_taxRegion.CountryCode = field.NewString(tableName, "country_code")
	_taxRegion.ProvinceCode = field.NewString(tableName, "province_code")
	_taxRegion.ParentID = field.NewString(tableName, "parent_id")
	_taxRegion.Metadata = field.NewString(tableName, "metadata")
	_taxRegion.CreatedAt = field.NewTime(tableName, "created_at")
	_taxRegion.UpdatedAt = field.NewTime(tableName, "updated_at")
	_taxRegion.CreatedBy = field.NewString(tableName, "created_by")

	_taxRegion.fillFieldMap()

	return _taxRegion
}

type taxRegion struct {
	taxRegionDo taxRegionDo

	ALL          field.Asterisk
	ID           field.String
	CountryCode  field.String
	ProvinceCode field.String
	ParentID     field.String
	Metadata     field.String
	CreatedAt    field.Time
	UpdatedAt    field.Time
	CreatedBy    field.String

	fieldMap map[string]field.Expr
}

func (t taxRegion) Table(newTableName string) *taxRegion {
	t.taxRegionDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t taxRegion) As(alias string) *taxRegion {
	t.taxRegionDo.DO = *(t.taxRegionDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *taxRegion) updateTableName(table string) *taxRegion {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewString(table, "id")
	t.CountryCode = field.NewString(table, "country_code")
	t.ProvinceCode = field.NewString(table, "province_code")
	t.ParentID = field.NewString(table, "parent_id")
	t.Metadata = field.NewString(table, "metadata")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.CreatedBy = field.NewString(table, "created_by")

	t.fillFieldMap()

	return t
}

func (t *taxRegion) WithContext(ctx context.Context) *taxRegionDo {
	return t.taxRegionDo.WithContext(ctx)
}

func (t taxRegion) TableName() string { return t.taxRegionDo.TableName() }

func (t taxRegion) Alias() string { return t.taxRegionDo.Alias() }

func (t taxRegion) Columns(cols ...field.Expr) gen.Columns { return t.taxRegionDo.Columns(cols...) }

func (t *taxRegion) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *taxRegion) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 8)
	t.fieldMap["id"] = t.ID
	t.fieldMap["country_code"] = t.CountryCode
	t.fieldMap["province_code"] = t.ProvinceCode
	t.fieldMap["parent_id"] = t.ParentID
	t.fieldMap["metadata"] = t.Metadata
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["created_by"] = t.CreatedBy
}

func (t taxRegion) clone(db *gorm.DB) taxRegion {
	t.taxRegionDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t taxRegion) replaceDB(db *gorm.DB) taxRegion {
	t.taxRegionDo.ReplaceDB(db)
	return t
}

type taxRegionDo struct{ gen.DO }

func (t taxRegionDo) Debug() *taxRegionDo {
	return t.withDO(t.DO.Debug())
}

func (t taxRegionDo) WithContext(ctx context.Context) *taxRegionDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t taxRegionDo) ReadDB() *taxRegionDo {
	return t.Clauses(dbresolver.Read)
}

func (t taxRegionDo) WriteDB() *taxRegionDo {
	return t.Clauses(dbresolver.Write)
}

func (t taxRegionDo) Session(config *gorm.Session) *taxRegionDo {
	return t.withDO(t.DO.Session(config))
}

func (t taxRegionDo) Clauses(conds ...clause.Expression) *taxRegionDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t taxRegionDo) Returning(value interface{}, columns ...string) *taxRegionDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t taxRegionDo) Not(conds ...gen.Condition) *taxRegionDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t taxRegionDo) Or(conds ...gen.Condition) *taxRegionDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t taxRegionDo) Select(conds ...field.Expr) *taxRegionDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t taxRegionDo) Where(conds ...gen.Condition) *taxRegionDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t taxRegionDo) Order(conds ...field.Expr) *taxRegionDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t taxRegionDo) Distinct(cols ...field.Expr) *taxRegionDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t taxRegionDo) Omit(cols ...field.Expr) *taxRegionDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t taxRegionDo) Join(table schema.Tabler, on ...field.Expr) *taxRegionDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t taxRegionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *taxRegionDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t taxRegionDo) RightJoin(table schema.Tabler, on ...field.Expr) *taxRegionDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t taxRegionDo) Group(cols ...field.Expr) *taxRegionDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t taxRegionDo) Having(conds ...gen.Condition) *taxRegionDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t taxRegionDo) Limit(limit int) *taxRegionDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t taxRegionDo) Offset(offset int) *taxRegionDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t taxRegionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *taxRegionDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t taxRegionDo) Unscoped() *taxRegionDo {
	return t.withDO(t.DO.Unscoped())
}

func (t taxRegionDo) Create(values ...*model.TaxRegion) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t taxRegionDo) CreateInBatches(values []*model.TaxRegion, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t taxRegionDo) Save(values ...*model.TaxRegion) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t taxRegionDo) First() (*model.TaxRegion, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaxRegion), nil
	}
}

func (t taxRegionDo) Take() (*model.TaxRegion, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaxRegion), nil
	}
}

func (t taxRegionDo) Last() (*model.TaxRegion, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaxRegion), nil
	}
}

func (t taxRegionDo) Find() ([]*model.TaxRegion, error) {
	result, err := t.DO.Find()
	return result.([]*model.TaxRegion), err
}

func (t taxRegionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TaxRegion, err error) {
	buf := make([]*model.TaxRegion, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t taxRegionDo) FindInBatches(result *[]*model.TaxRegion, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t taxRegionDo) Attrs(attrs ...field.AssignExpr) *taxRegionDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t taxRegionDo) Assign(attrs ...field.AssignExpr) *taxRegionDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t taxRegionDo) Joins(fields ...field.RelationField) *taxRegionDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t taxRegionDo) Preload(fields ...field.RelationField) *taxRegionDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t taxRegionDo) FirstOrInit() (*model.TaxRegion, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaxRegion), nil
	}
}

func (t taxRegionDo) FirstOrCreate() (*model.TaxRegion, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaxRegion), nil
	}
}

func (t taxRegionDo) FindByPage(offset int, limit int) (result []*model.TaxRegion, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t taxRegionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t taxRegionDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t taxRegionDo) Delete(models ...*model.TaxRegion) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *taxRegionDo) withDO(do gen.Dao) *taxRegionDo {
	t.DO = *do.(*gen.DO)
	return t
}
