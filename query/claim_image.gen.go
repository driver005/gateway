// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newClaimImage(db *gorm.DB, opts ...gen.DOOption) claimImage {
	_claimImage := claimImage{}

	_claimImage.claimImageDo.UseDB(db, opts...)
	_claimImage.claimImageDo.UseModel(&model.ClaimImage{})

	tableName := _claimImage.claimImageDo.TableName()
	_claimImage.ALL = field.NewAsterisk(tableName)
	_claimImage.ID = field.NewString(tableName, "id")
	_claimImage.ClaimItemID = field.NewString(tableName, "claim_item_id")
	_claimImage.URL = field.NewString(tableName, "url")
	_claimImage.CreatedAt = field.NewTime(tableName, "created_at")
	_claimImage.UpdatedAt = field.NewTime(tableName, "updated_at")
	_claimImage.DeletedAt = field.NewField(tableName, "deleted_at")
	_claimImage.Metadata = field.NewString(tableName, "metadata")

	_claimImage.fillFieldMap()

	return _claimImage
}

type claimImage struct {
	claimImageDo claimImageDo

	ALL         field.Asterisk
	ID          field.String
	ClaimItemID field.String
	URL         field.String
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	Metadata    field.String

	fieldMap map[string]field.Expr
}

func (c claimImage) Table(newTableName string) *claimImage {
	c.claimImageDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c claimImage) As(alias string) *claimImage {
	c.claimImageDo.DO = *(c.claimImageDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *claimImage) updateTableName(table string) *claimImage {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewString(table, "id")
	c.ClaimItemID = field.NewString(table, "claim_item_id")
	c.URL = field.NewString(table, "url")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.Metadata = field.NewString(table, "metadata")

	c.fillFieldMap()

	return c
}

func (c *claimImage) WithContext(ctx context.Context) *claimImageDo {
	return c.claimImageDo.WithContext(ctx)
}

func (c claimImage) TableName() string { return c.claimImageDo.TableName() }

func (c claimImage) Alias() string { return c.claimImageDo.Alias() }

func (c claimImage) Columns(cols ...field.Expr) gen.Columns { return c.claimImageDo.Columns(cols...) }

func (c *claimImage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *claimImage) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 7)
	c.fieldMap["id"] = c.ID
	c.fieldMap["claim_item_id"] = c.ClaimItemID
	c.fieldMap["url"] = c.URL
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["metadata"] = c.Metadata
}

func (c claimImage) clone(db *gorm.DB) claimImage {
	c.claimImageDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c claimImage) replaceDB(db *gorm.DB) claimImage {
	c.claimImageDo.ReplaceDB(db)
	return c
}

type claimImageDo struct{ gen.DO }

func (c claimImageDo) Debug() *claimImageDo {
	return c.withDO(c.DO.Debug())
}

func (c claimImageDo) WithContext(ctx context.Context) *claimImageDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c claimImageDo) ReadDB() *claimImageDo {
	return c.Clauses(dbresolver.Read)
}

func (c claimImageDo) WriteDB() *claimImageDo {
	return c.Clauses(dbresolver.Write)
}

func (c claimImageDo) Session(config *gorm.Session) *claimImageDo {
	return c.withDO(c.DO.Session(config))
}

func (c claimImageDo) Clauses(conds ...clause.Expression) *claimImageDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c claimImageDo) Returning(value interface{}, columns ...string) *claimImageDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c claimImageDo) Not(conds ...gen.Condition) *claimImageDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c claimImageDo) Or(conds ...gen.Condition) *claimImageDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c claimImageDo) Select(conds ...field.Expr) *claimImageDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c claimImageDo) Where(conds ...gen.Condition) *claimImageDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c claimImageDo) Order(conds ...field.Expr) *claimImageDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c claimImageDo) Distinct(cols ...field.Expr) *claimImageDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c claimImageDo) Omit(cols ...field.Expr) *claimImageDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c claimImageDo) Join(table schema.Tabler, on ...field.Expr) *claimImageDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c claimImageDo) LeftJoin(table schema.Tabler, on ...field.Expr) *claimImageDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c claimImageDo) RightJoin(table schema.Tabler, on ...field.Expr) *claimImageDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c claimImageDo) Group(cols ...field.Expr) *claimImageDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c claimImageDo) Having(conds ...gen.Condition) *claimImageDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c claimImageDo) Limit(limit int) *claimImageDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c claimImageDo) Offset(offset int) *claimImageDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c claimImageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *claimImageDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c claimImageDo) Unscoped() *claimImageDo {
	return c.withDO(c.DO.Unscoped())
}

func (c claimImageDo) Create(values ...*model.ClaimImage) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c claimImageDo) CreateInBatches(values []*model.ClaimImage, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c claimImageDo) Save(values ...*model.ClaimImage) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c claimImageDo) First() (*model.ClaimImage, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClaimImage), nil
	}
}

func (c claimImageDo) Take() (*model.ClaimImage, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClaimImage), nil
	}
}

func (c claimImageDo) Last() (*model.ClaimImage, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClaimImage), nil
	}
}

func (c claimImageDo) Find() ([]*model.ClaimImage, error) {
	result, err := c.DO.Find()
	return result.([]*model.ClaimImage), err
}

func (c claimImageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ClaimImage, err error) {
	buf := make([]*model.ClaimImage, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c claimImageDo) FindInBatches(result *[]*model.ClaimImage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c claimImageDo) Attrs(attrs ...field.AssignExpr) *claimImageDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c claimImageDo) Assign(attrs ...field.AssignExpr) *claimImageDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c claimImageDo) Joins(fields ...field.RelationField) *claimImageDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c claimImageDo) Preload(fields ...field.RelationField) *claimImageDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c claimImageDo) FirstOrInit() (*model.ClaimImage, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClaimImage), nil
	}
}

func (c claimImageDo) FirstOrCreate() (*model.ClaimImage, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClaimImage), nil
	}
}

func (c claimImageDo) FindByPage(offset int, limit int) (result []*model.ClaimImage, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c claimImageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c claimImageDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c claimImageDo) Delete(models ...*model.ClaimImage) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *claimImageDo) withDO(do gen.Dao) *claimImageDo {
	c.DO = *do.(*gen.DO)
	return c
}
