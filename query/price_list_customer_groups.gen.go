// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newPriceListCustomerGroup(db *gorm.DB, opts ...gen.DOOption) priceListCustomerGroup {
	_priceListCustomerGroup := priceListCustomerGroup{}

	_priceListCustomerGroup.priceListCustomerGroupDo.UseDB(db, opts...)
	_priceListCustomerGroup.priceListCustomerGroupDo.UseModel(&model.PriceListCustomerGroup{})

	tableName := _priceListCustomerGroup.priceListCustomerGroupDo.TableName()
	_priceListCustomerGroup.ALL = field.NewAsterisk(tableName)
	_priceListCustomerGroup.PriceListID = field.NewString(tableName, "price_list_id")
	_priceListCustomerGroup.CustomerGroupID = field.NewString(tableName, "customer_group_id")

	_priceListCustomerGroup.fillFieldMap()

	return _priceListCustomerGroup
}

type priceListCustomerGroup struct {
	priceListCustomerGroupDo priceListCustomerGroupDo

	ALL             field.Asterisk
	PriceListID     field.String
	CustomerGroupID field.String

	fieldMap map[string]field.Expr
}

func (p priceListCustomerGroup) Table(newTableName string) *priceListCustomerGroup {
	p.priceListCustomerGroupDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p priceListCustomerGroup) As(alias string) *priceListCustomerGroup {
	p.priceListCustomerGroupDo.DO = *(p.priceListCustomerGroupDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *priceListCustomerGroup) updateTableName(table string) *priceListCustomerGroup {
	p.ALL = field.NewAsterisk(table)
	p.PriceListID = field.NewString(table, "price_list_id")
	p.CustomerGroupID = field.NewString(table, "customer_group_id")

	p.fillFieldMap()

	return p
}

func (p *priceListCustomerGroup) WithContext(ctx context.Context) *priceListCustomerGroupDo {
	return p.priceListCustomerGroupDo.WithContext(ctx)
}

func (p priceListCustomerGroup) TableName() string { return p.priceListCustomerGroupDo.TableName() }

func (p priceListCustomerGroup) Alias() string { return p.priceListCustomerGroupDo.Alias() }

func (p priceListCustomerGroup) Columns(cols ...field.Expr) gen.Columns {
	return p.priceListCustomerGroupDo.Columns(cols...)
}

func (p *priceListCustomerGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *priceListCustomerGroup) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 2)
	p.fieldMap["price_list_id"] = p.PriceListID
	p.fieldMap["customer_group_id"] = p.CustomerGroupID
}

func (p priceListCustomerGroup) clone(db *gorm.DB) priceListCustomerGroup {
	p.priceListCustomerGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p priceListCustomerGroup) replaceDB(db *gorm.DB) priceListCustomerGroup {
	p.priceListCustomerGroupDo.ReplaceDB(db)
	return p
}

type priceListCustomerGroupDo struct{ gen.DO }

func (p priceListCustomerGroupDo) Debug() *priceListCustomerGroupDo {
	return p.withDO(p.DO.Debug())
}

func (p priceListCustomerGroupDo) WithContext(ctx context.Context) *priceListCustomerGroupDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p priceListCustomerGroupDo) ReadDB() *priceListCustomerGroupDo {
	return p.Clauses(dbresolver.Read)
}

func (p priceListCustomerGroupDo) WriteDB() *priceListCustomerGroupDo {
	return p.Clauses(dbresolver.Write)
}

func (p priceListCustomerGroupDo) Session(config *gorm.Session) *priceListCustomerGroupDo {
	return p.withDO(p.DO.Session(config))
}

func (p priceListCustomerGroupDo) Clauses(conds ...clause.Expression) *priceListCustomerGroupDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p priceListCustomerGroupDo) Returning(value interface{}, columns ...string) *priceListCustomerGroupDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p priceListCustomerGroupDo) Not(conds ...gen.Condition) *priceListCustomerGroupDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p priceListCustomerGroupDo) Or(conds ...gen.Condition) *priceListCustomerGroupDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p priceListCustomerGroupDo) Select(conds ...field.Expr) *priceListCustomerGroupDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p priceListCustomerGroupDo) Where(conds ...gen.Condition) *priceListCustomerGroupDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p priceListCustomerGroupDo) Order(conds ...field.Expr) *priceListCustomerGroupDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p priceListCustomerGroupDo) Distinct(cols ...field.Expr) *priceListCustomerGroupDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p priceListCustomerGroupDo) Omit(cols ...field.Expr) *priceListCustomerGroupDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p priceListCustomerGroupDo) Join(table schema.Tabler, on ...field.Expr) *priceListCustomerGroupDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p priceListCustomerGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) *priceListCustomerGroupDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p priceListCustomerGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) *priceListCustomerGroupDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p priceListCustomerGroupDo) Group(cols ...field.Expr) *priceListCustomerGroupDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p priceListCustomerGroupDo) Having(conds ...gen.Condition) *priceListCustomerGroupDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p priceListCustomerGroupDo) Limit(limit int) *priceListCustomerGroupDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p priceListCustomerGroupDo) Offset(offset int) *priceListCustomerGroupDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p priceListCustomerGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *priceListCustomerGroupDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p priceListCustomerGroupDo) Unscoped() *priceListCustomerGroupDo {
	return p.withDO(p.DO.Unscoped())
}

func (p priceListCustomerGroupDo) Create(values ...*model.PriceListCustomerGroup) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p priceListCustomerGroupDo) CreateInBatches(values []*model.PriceListCustomerGroup, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p priceListCustomerGroupDo) Save(values ...*model.PriceListCustomerGroup) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p priceListCustomerGroupDo) First() (*model.PriceListCustomerGroup, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PriceListCustomerGroup), nil
	}
}

func (p priceListCustomerGroupDo) Take() (*model.PriceListCustomerGroup, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PriceListCustomerGroup), nil
	}
}

func (p priceListCustomerGroupDo) Last() (*model.PriceListCustomerGroup, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PriceListCustomerGroup), nil
	}
}

func (p priceListCustomerGroupDo) Find() ([]*model.PriceListCustomerGroup, error) {
	result, err := p.DO.Find()
	return result.([]*model.PriceListCustomerGroup), err
}

func (p priceListCustomerGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PriceListCustomerGroup, err error) {
	buf := make([]*model.PriceListCustomerGroup, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p priceListCustomerGroupDo) FindInBatches(result *[]*model.PriceListCustomerGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p priceListCustomerGroupDo) Attrs(attrs ...field.AssignExpr) *priceListCustomerGroupDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p priceListCustomerGroupDo) Assign(attrs ...field.AssignExpr) *priceListCustomerGroupDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p priceListCustomerGroupDo) Joins(fields ...field.RelationField) *priceListCustomerGroupDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p priceListCustomerGroupDo) Preload(fields ...field.RelationField) *priceListCustomerGroupDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p priceListCustomerGroupDo) FirstOrInit() (*model.PriceListCustomerGroup, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PriceListCustomerGroup), nil
	}
}

func (p priceListCustomerGroupDo) FirstOrCreate() (*model.PriceListCustomerGroup, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PriceListCustomerGroup), nil
	}
}

func (p priceListCustomerGroupDo) FindByPage(offset int, limit int) (result []*model.PriceListCustomerGroup, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p priceListCustomerGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p priceListCustomerGroupDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p priceListCustomerGroupDo) Delete(models ...*model.PriceListCustomerGroup) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *priceListCustomerGroupDo) withDO(do gen.Dao) *priceListCustomerGroupDo {
	p.DO = *do.(*gen.DO)
	return p
}
