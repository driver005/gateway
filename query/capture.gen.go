// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newCapture(db *gorm.DB, opts ...gen.DOOption) capture {
	_capture := capture{}

	_capture.captureDo.UseDB(db, opts...)
	_capture.captureDo.UseModel(&model.Capture{})

	tableName := _capture.captureDo.TableName()
	_capture.ALL = field.NewAsterisk(tableName)
	_capture.ID = field.NewString(tableName, "id")
	_capture.Amount = field.NewFloat64(tableName, "amount")
	_capture.PaymentID = field.NewString(tableName, "payment_id")
	_capture.CreatedAt = field.NewTime(tableName, "created_at")
	_capture.CreatedBy = field.NewString(tableName, "created_by")

	_capture.fillFieldMap()

	return _capture
}

type capture struct {
	captureDo captureDo

	ALL       field.Asterisk
	ID        field.String
	Amount    field.Float64
	PaymentID field.String
	CreatedAt field.Time
	CreatedBy field.String

	fieldMap map[string]field.Expr
}

func (c capture) Table(newTableName string) *capture {
	c.captureDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c capture) As(alias string) *capture {
	c.captureDo.DO = *(c.captureDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *capture) updateTableName(table string) *capture {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewString(table, "id")
	c.Amount = field.NewFloat64(table, "amount")
	c.PaymentID = field.NewString(table, "payment_id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.CreatedBy = field.NewString(table, "created_by")

	c.fillFieldMap()

	return c
}

func (c *capture) WithContext(ctx context.Context) *captureDo { return c.captureDo.WithContext(ctx) }

func (c capture) TableName() string { return c.captureDo.TableName() }

func (c capture) Alias() string { return c.captureDo.Alias() }

func (c capture) Columns(cols ...field.Expr) gen.Columns { return c.captureDo.Columns(cols...) }

func (c *capture) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *capture) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 5)
	c.fieldMap["id"] = c.ID
	c.fieldMap["amount"] = c.Amount
	c.fieldMap["payment_id"] = c.PaymentID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["created_by"] = c.CreatedBy
}

func (c capture) clone(db *gorm.DB) capture {
	c.captureDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c capture) replaceDB(db *gorm.DB) capture {
	c.captureDo.ReplaceDB(db)
	return c
}

type captureDo struct{ gen.DO }

func (c captureDo) Debug() *captureDo {
	return c.withDO(c.DO.Debug())
}

func (c captureDo) WithContext(ctx context.Context) *captureDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c captureDo) ReadDB() *captureDo {
	return c.Clauses(dbresolver.Read)
}

func (c captureDo) WriteDB() *captureDo {
	return c.Clauses(dbresolver.Write)
}

func (c captureDo) Session(config *gorm.Session) *captureDo {
	return c.withDO(c.DO.Session(config))
}

func (c captureDo) Clauses(conds ...clause.Expression) *captureDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c captureDo) Returning(value interface{}, columns ...string) *captureDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c captureDo) Not(conds ...gen.Condition) *captureDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c captureDo) Or(conds ...gen.Condition) *captureDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c captureDo) Select(conds ...field.Expr) *captureDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c captureDo) Where(conds ...gen.Condition) *captureDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c captureDo) Order(conds ...field.Expr) *captureDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c captureDo) Distinct(cols ...field.Expr) *captureDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c captureDo) Omit(cols ...field.Expr) *captureDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c captureDo) Join(table schema.Tabler, on ...field.Expr) *captureDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c captureDo) LeftJoin(table schema.Tabler, on ...field.Expr) *captureDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c captureDo) RightJoin(table schema.Tabler, on ...field.Expr) *captureDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c captureDo) Group(cols ...field.Expr) *captureDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c captureDo) Having(conds ...gen.Condition) *captureDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c captureDo) Limit(limit int) *captureDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c captureDo) Offset(offset int) *captureDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c captureDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *captureDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c captureDo) Unscoped() *captureDo {
	return c.withDO(c.DO.Unscoped())
}

func (c captureDo) Create(values ...*model.Capture) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c captureDo) CreateInBatches(values []*model.Capture, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c captureDo) Save(values ...*model.Capture) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c captureDo) First() (*model.Capture, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Capture), nil
	}
}

func (c captureDo) Take() (*model.Capture, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Capture), nil
	}
}

func (c captureDo) Last() (*model.Capture, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Capture), nil
	}
}

func (c captureDo) Find() ([]*model.Capture, error) {
	result, err := c.DO.Find()
	return result.([]*model.Capture), err
}

func (c captureDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Capture, err error) {
	buf := make([]*model.Capture, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c captureDo) FindInBatches(result *[]*model.Capture, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c captureDo) Attrs(attrs ...field.AssignExpr) *captureDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c captureDo) Assign(attrs ...field.AssignExpr) *captureDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c captureDo) Joins(fields ...field.RelationField) *captureDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c captureDo) Preload(fields ...field.RelationField) *captureDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c captureDo) FirstOrInit() (*model.Capture, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Capture), nil
	}
}

func (c captureDo) FirstOrCreate() (*model.Capture, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Capture), nil
	}
}

func (c captureDo) FindByPage(offset int, limit int) (result []*model.Capture, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c captureDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c captureDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c captureDo) Delete(models ...*model.Capture) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *captureDo) withDO(do gen.Dao) *captureDo {
	c.DO = *do.(*gen.DO)
	return c
}
