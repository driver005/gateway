// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newDiscountRegion(db *gorm.DB, opts ...gen.DOOption) discountRegion {
	_discountRegion := discountRegion{}

	_discountRegion.discountRegionDo.UseDB(db, opts...)
	_discountRegion.discountRegionDo.UseModel(&model.DiscountRegion{})

	tableName := _discountRegion.discountRegionDo.TableName()
	_discountRegion.ALL = field.NewAsterisk(tableName)
	_discountRegion.DiscountID = field.NewString(tableName, "discount_id")
	_discountRegion.RegionID = field.NewString(tableName, "region_id")

	_discountRegion.fillFieldMap()

	return _discountRegion
}

type discountRegion struct {
	discountRegionDo discountRegionDo

	ALL        field.Asterisk
	DiscountID field.String
	RegionID   field.String

	fieldMap map[string]field.Expr
}

func (d discountRegion) Table(newTableName string) *discountRegion {
	d.discountRegionDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d discountRegion) As(alias string) *discountRegion {
	d.discountRegionDo.DO = *(d.discountRegionDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *discountRegion) updateTableName(table string) *discountRegion {
	d.ALL = field.NewAsterisk(table)
	d.DiscountID = field.NewString(table, "discount_id")
	d.RegionID = field.NewString(table, "region_id")

	d.fillFieldMap()

	return d
}

func (d *discountRegion) WithContext(ctx context.Context) *discountRegionDo {
	return d.discountRegionDo.WithContext(ctx)
}

func (d discountRegion) TableName() string { return d.discountRegionDo.TableName() }

func (d discountRegion) Alias() string { return d.discountRegionDo.Alias() }

func (d discountRegion) Columns(cols ...field.Expr) gen.Columns {
	return d.discountRegionDo.Columns(cols...)
}

func (d *discountRegion) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *discountRegion) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 2)
	d.fieldMap["discount_id"] = d.DiscountID
	d.fieldMap["region_id"] = d.RegionID
}

func (d discountRegion) clone(db *gorm.DB) discountRegion {
	d.discountRegionDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d discountRegion) replaceDB(db *gorm.DB) discountRegion {
	d.discountRegionDo.ReplaceDB(db)
	return d
}

type discountRegionDo struct{ gen.DO }

func (d discountRegionDo) Debug() *discountRegionDo {
	return d.withDO(d.DO.Debug())
}

func (d discountRegionDo) WithContext(ctx context.Context) *discountRegionDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d discountRegionDo) ReadDB() *discountRegionDo {
	return d.Clauses(dbresolver.Read)
}

func (d discountRegionDo) WriteDB() *discountRegionDo {
	return d.Clauses(dbresolver.Write)
}

func (d discountRegionDo) Session(config *gorm.Session) *discountRegionDo {
	return d.withDO(d.DO.Session(config))
}

func (d discountRegionDo) Clauses(conds ...clause.Expression) *discountRegionDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d discountRegionDo) Returning(value interface{}, columns ...string) *discountRegionDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d discountRegionDo) Not(conds ...gen.Condition) *discountRegionDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d discountRegionDo) Or(conds ...gen.Condition) *discountRegionDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d discountRegionDo) Select(conds ...field.Expr) *discountRegionDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d discountRegionDo) Where(conds ...gen.Condition) *discountRegionDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d discountRegionDo) Order(conds ...field.Expr) *discountRegionDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d discountRegionDo) Distinct(cols ...field.Expr) *discountRegionDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d discountRegionDo) Omit(cols ...field.Expr) *discountRegionDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d discountRegionDo) Join(table schema.Tabler, on ...field.Expr) *discountRegionDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d discountRegionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *discountRegionDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d discountRegionDo) RightJoin(table schema.Tabler, on ...field.Expr) *discountRegionDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d discountRegionDo) Group(cols ...field.Expr) *discountRegionDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d discountRegionDo) Having(conds ...gen.Condition) *discountRegionDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d discountRegionDo) Limit(limit int) *discountRegionDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d discountRegionDo) Offset(offset int) *discountRegionDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d discountRegionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *discountRegionDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d discountRegionDo) Unscoped() *discountRegionDo {
	return d.withDO(d.DO.Unscoped())
}

func (d discountRegionDo) Create(values ...*model.DiscountRegion) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d discountRegionDo) CreateInBatches(values []*model.DiscountRegion, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d discountRegionDo) Save(values ...*model.DiscountRegion) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d discountRegionDo) First() (*model.DiscountRegion, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiscountRegion), nil
	}
}

func (d discountRegionDo) Take() (*model.DiscountRegion, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiscountRegion), nil
	}
}

func (d discountRegionDo) Last() (*model.DiscountRegion, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiscountRegion), nil
	}
}

func (d discountRegionDo) Find() ([]*model.DiscountRegion, error) {
	result, err := d.DO.Find()
	return result.([]*model.DiscountRegion), err
}

func (d discountRegionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DiscountRegion, err error) {
	buf := make([]*model.DiscountRegion, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d discountRegionDo) FindInBatches(result *[]*model.DiscountRegion, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d discountRegionDo) Attrs(attrs ...field.AssignExpr) *discountRegionDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d discountRegionDo) Assign(attrs ...field.AssignExpr) *discountRegionDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d discountRegionDo) Joins(fields ...field.RelationField) *discountRegionDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d discountRegionDo) Preload(fields ...field.RelationField) *discountRegionDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d discountRegionDo) FirstOrInit() (*model.DiscountRegion, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiscountRegion), nil
	}
}

func (d discountRegionDo) FirstOrCreate() (*model.DiscountRegion, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiscountRegion), nil
	}
}

func (d discountRegionDo) FindByPage(offset int, limit int) (result []*model.DiscountRegion, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d discountRegionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d discountRegionDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d discountRegionDo) Delete(models ...*model.DiscountRegion) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *discountRegionDo) withDO(do gen.Dao) *discountRegionDo {
	d.DO = *do.(*gen.DO)
	return d
}
