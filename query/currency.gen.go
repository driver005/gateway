// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newCurrency(db *gorm.DB, opts ...gen.DOOption) currency {
	_currency := currency{}

	_currency.currencyDo.UseDB(db, opts...)
	_currency.currencyDo.UseModel(&model.Currency{})

	tableName := _currency.currencyDo.TableName()
	_currency.ALL = field.NewAsterisk(tableName)
	_currency.Code = field.NewString(tableName, "code")
	_currency.Symbol = field.NewString(tableName, "symbol")
	_currency.SymbolNative = field.NewString(tableName, "symbol_native")
	_currency.Name = field.NewString(tableName, "name")
	_currency.IncludesTax = field.NewBool(tableName, "includes_tax")

	_currency.fillFieldMap()

	return _currency
}

type currency struct {
	currencyDo currencyDo

	ALL          field.Asterisk
	Code         field.String
	Symbol       field.String
	SymbolNative field.String
	Name         field.String
	IncludesTax  field.Bool

	fieldMap map[string]field.Expr
}

func (c currency) Table(newTableName string) *currency {
	c.currencyDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c currency) As(alias string) *currency {
	c.currencyDo.DO = *(c.currencyDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *currency) updateTableName(table string) *currency {
	c.ALL = field.NewAsterisk(table)
	c.Code = field.NewString(table, "code")
	c.Symbol = field.NewString(table, "symbol")
	c.SymbolNative = field.NewString(table, "symbol_native")
	c.Name = field.NewString(table, "name")
	c.IncludesTax = field.NewBool(table, "includes_tax")

	c.fillFieldMap()

	return c
}

func (c *currency) WithContext(ctx context.Context) *currencyDo { return c.currencyDo.WithContext(ctx) }

func (c currency) TableName() string { return c.currencyDo.TableName() }

func (c currency) Alias() string { return c.currencyDo.Alias() }

func (c currency) Columns(cols ...field.Expr) gen.Columns { return c.currencyDo.Columns(cols...) }

func (c *currency) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *currency) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 5)
	c.fieldMap["code"] = c.Code
	c.fieldMap["symbol"] = c.Symbol
	c.fieldMap["symbol_native"] = c.SymbolNative
	c.fieldMap["name"] = c.Name
	c.fieldMap["includes_tax"] = c.IncludesTax
}

func (c currency) clone(db *gorm.DB) currency {
	c.currencyDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c currency) replaceDB(db *gorm.DB) currency {
	c.currencyDo.ReplaceDB(db)
	return c
}

type currencyDo struct{ gen.DO }

func (c currencyDo) Debug() *currencyDo {
	return c.withDO(c.DO.Debug())
}

func (c currencyDo) WithContext(ctx context.Context) *currencyDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c currencyDo) ReadDB() *currencyDo {
	return c.Clauses(dbresolver.Read)
}

func (c currencyDo) WriteDB() *currencyDo {
	return c.Clauses(dbresolver.Write)
}

func (c currencyDo) Session(config *gorm.Session) *currencyDo {
	return c.withDO(c.DO.Session(config))
}

func (c currencyDo) Clauses(conds ...clause.Expression) *currencyDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c currencyDo) Returning(value interface{}, columns ...string) *currencyDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c currencyDo) Not(conds ...gen.Condition) *currencyDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c currencyDo) Or(conds ...gen.Condition) *currencyDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c currencyDo) Select(conds ...field.Expr) *currencyDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c currencyDo) Where(conds ...gen.Condition) *currencyDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c currencyDo) Order(conds ...field.Expr) *currencyDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c currencyDo) Distinct(cols ...field.Expr) *currencyDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c currencyDo) Omit(cols ...field.Expr) *currencyDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c currencyDo) Join(table schema.Tabler, on ...field.Expr) *currencyDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c currencyDo) LeftJoin(table schema.Tabler, on ...field.Expr) *currencyDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c currencyDo) RightJoin(table schema.Tabler, on ...field.Expr) *currencyDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c currencyDo) Group(cols ...field.Expr) *currencyDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c currencyDo) Having(conds ...gen.Condition) *currencyDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c currencyDo) Limit(limit int) *currencyDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c currencyDo) Offset(offset int) *currencyDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c currencyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *currencyDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c currencyDo) Unscoped() *currencyDo {
	return c.withDO(c.DO.Unscoped())
}

func (c currencyDo) Create(values ...*model.Currency) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c currencyDo) CreateInBatches(values []*model.Currency, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c currencyDo) Save(values ...*model.Currency) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c currencyDo) First() (*model.Currency, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Currency), nil
	}
}

func (c currencyDo) Take() (*model.Currency, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Currency), nil
	}
}

func (c currencyDo) Last() (*model.Currency, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Currency), nil
	}
}

func (c currencyDo) Find() ([]*model.Currency, error) {
	result, err := c.DO.Find()
	return result.([]*model.Currency), err
}

func (c currencyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Currency, err error) {
	buf := make([]*model.Currency, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c currencyDo) FindInBatches(result *[]*model.Currency, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c currencyDo) Attrs(attrs ...field.AssignExpr) *currencyDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c currencyDo) Assign(attrs ...field.AssignExpr) *currencyDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c currencyDo) Joins(fields ...field.RelationField) *currencyDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c currencyDo) Preload(fields ...field.RelationField) *currencyDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c currencyDo) FirstOrInit() (*model.Currency, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Currency), nil
	}
}

func (c currencyDo) FirstOrCreate() (*model.Currency, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Currency), nil
	}
}

func (c currencyDo) FindByPage(offset int, limit int) (result []*model.Currency, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c currencyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c currencyDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c currencyDo) Delete(models ...*model.Currency) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *currencyDo) withDO(do gen.Dao) *currencyDo {
	c.DO = *do.(*gen.DO)
	return c
}
