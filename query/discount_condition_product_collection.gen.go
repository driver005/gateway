// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newDiscountConditionProductCollection(db *gorm.DB, opts ...gen.DOOption) discountConditionProductCollection {
	_discountConditionProductCollection := discountConditionProductCollection{}

	_discountConditionProductCollection.discountConditionProductCollectionDo.UseDB(db, opts...)
	_discountConditionProductCollection.discountConditionProductCollectionDo.UseModel(&model.DiscountConditionProductCollection{})

	tableName := _discountConditionProductCollection.discountConditionProductCollectionDo.TableName()
	_discountConditionProductCollection.ALL = field.NewAsterisk(tableName)
	_discountConditionProductCollection.ProductCollectionID = field.NewString(tableName, "product_collection_id")
	_discountConditionProductCollection.ConditionID = field.NewString(tableName, "condition_id")
	_discountConditionProductCollection.CreatedAt = field.NewTime(tableName, "created_at")
	_discountConditionProductCollection.UpdatedAt = field.NewTime(tableName, "updated_at")
	_discountConditionProductCollection.Metadata = field.NewString(tableName, "metadata")

	_discountConditionProductCollection.fillFieldMap()

	return _discountConditionProductCollection
}

type discountConditionProductCollection struct {
	discountConditionProductCollectionDo discountConditionProductCollectionDo

	ALL                 field.Asterisk
	ProductCollectionID field.String
	ConditionID         field.String
	CreatedAt           field.Time
	UpdatedAt           field.Time
	Metadata            field.String

	fieldMap map[string]field.Expr
}

func (d discountConditionProductCollection) Table(newTableName string) *discountConditionProductCollection {
	d.discountConditionProductCollectionDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d discountConditionProductCollection) As(alias string) *discountConditionProductCollection {
	d.discountConditionProductCollectionDo.DO = *(d.discountConditionProductCollectionDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *discountConditionProductCollection) updateTableName(table string) *discountConditionProductCollection {
	d.ALL = field.NewAsterisk(table)
	d.ProductCollectionID = field.NewString(table, "product_collection_id")
	d.ConditionID = field.NewString(table, "condition_id")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.Metadata = field.NewString(table, "metadata")

	d.fillFieldMap()

	return d
}

func (d *discountConditionProductCollection) WithContext(ctx context.Context) *discountConditionProductCollectionDo {
	return d.discountConditionProductCollectionDo.WithContext(ctx)
}

func (d discountConditionProductCollection) TableName() string {
	return d.discountConditionProductCollectionDo.TableName()
}

func (d discountConditionProductCollection) Alias() string {
	return d.discountConditionProductCollectionDo.Alias()
}

func (d discountConditionProductCollection) Columns(cols ...field.Expr) gen.Columns {
	return d.discountConditionProductCollectionDo.Columns(cols...)
}

func (d *discountConditionProductCollection) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *discountConditionProductCollection) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 5)
	d.fieldMap["product_collection_id"] = d.ProductCollectionID
	d.fieldMap["condition_id"] = d.ConditionID
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["metadata"] = d.Metadata
}

func (d discountConditionProductCollection) clone(db *gorm.DB) discountConditionProductCollection {
	d.discountConditionProductCollectionDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d discountConditionProductCollection) replaceDB(db *gorm.DB) discountConditionProductCollection {
	d.discountConditionProductCollectionDo.ReplaceDB(db)
	return d
}

type discountConditionProductCollectionDo struct{ gen.DO }

func (d discountConditionProductCollectionDo) Debug() *discountConditionProductCollectionDo {
	return d.withDO(d.DO.Debug())
}

func (d discountConditionProductCollectionDo) WithContext(ctx context.Context) *discountConditionProductCollectionDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d discountConditionProductCollectionDo) ReadDB() *discountConditionProductCollectionDo {
	return d.Clauses(dbresolver.Read)
}

func (d discountConditionProductCollectionDo) WriteDB() *discountConditionProductCollectionDo {
	return d.Clauses(dbresolver.Write)
}

func (d discountConditionProductCollectionDo) Session(config *gorm.Session) *discountConditionProductCollectionDo {
	return d.withDO(d.DO.Session(config))
}

func (d discountConditionProductCollectionDo) Clauses(conds ...clause.Expression) *discountConditionProductCollectionDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d discountConditionProductCollectionDo) Returning(value interface{}, columns ...string) *discountConditionProductCollectionDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d discountConditionProductCollectionDo) Not(conds ...gen.Condition) *discountConditionProductCollectionDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d discountConditionProductCollectionDo) Or(conds ...gen.Condition) *discountConditionProductCollectionDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d discountConditionProductCollectionDo) Select(conds ...field.Expr) *discountConditionProductCollectionDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d discountConditionProductCollectionDo) Where(conds ...gen.Condition) *discountConditionProductCollectionDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d discountConditionProductCollectionDo) Order(conds ...field.Expr) *discountConditionProductCollectionDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d discountConditionProductCollectionDo) Distinct(cols ...field.Expr) *discountConditionProductCollectionDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d discountConditionProductCollectionDo) Omit(cols ...field.Expr) *discountConditionProductCollectionDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d discountConditionProductCollectionDo) Join(table schema.Tabler, on ...field.Expr) *discountConditionProductCollectionDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d discountConditionProductCollectionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *discountConditionProductCollectionDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d discountConditionProductCollectionDo) RightJoin(table schema.Tabler, on ...field.Expr) *discountConditionProductCollectionDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d discountConditionProductCollectionDo) Group(cols ...field.Expr) *discountConditionProductCollectionDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d discountConditionProductCollectionDo) Having(conds ...gen.Condition) *discountConditionProductCollectionDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d discountConditionProductCollectionDo) Limit(limit int) *discountConditionProductCollectionDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d discountConditionProductCollectionDo) Offset(offset int) *discountConditionProductCollectionDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d discountConditionProductCollectionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *discountConditionProductCollectionDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d discountConditionProductCollectionDo) Unscoped() *discountConditionProductCollectionDo {
	return d.withDO(d.DO.Unscoped())
}

func (d discountConditionProductCollectionDo) Create(values ...*model.DiscountConditionProductCollection) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d discountConditionProductCollectionDo) CreateInBatches(values []*model.DiscountConditionProductCollection, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d discountConditionProductCollectionDo) Save(values ...*model.DiscountConditionProductCollection) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d discountConditionProductCollectionDo) First() (*model.DiscountConditionProductCollection, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiscountConditionProductCollection), nil
	}
}

func (d discountConditionProductCollectionDo) Take() (*model.DiscountConditionProductCollection, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiscountConditionProductCollection), nil
	}
}

func (d discountConditionProductCollectionDo) Last() (*model.DiscountConditionProductCollection, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiscountConditionProductCollection), nil
	}
}

func (d discountConditionProductCollectionDo) Find() ([]*model.DiscountConditionProductCollection, error) {
	result, err := d.DO.Find()
	return result.([]*model.DiscountConditionProductCollection), err
}

func (d discountConditionProductCollectionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DiscountConditionProductCollection, err error) {
	buf := make([]*model.DiscountConditionProductCollection, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d discountConditionProductCollectionDo) FindInBatches(result *[]*model.DiscountConditionProductCollection, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d discountConditionProductCollectionDo) Attrs(attrs ...field.AssignExpr) *discountConditionProductCollectionDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d discountConditionProductCollectionDo) Assign(attrs ...field.AssignExpr) *discountConditionProductCollectionDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d discountConditionProductCollectionDo) Joins(fields ...field.RelationField) *discountConditionProductCollectionDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d discountConditionProductCollectionDo) Preload(fields ...field.RelationField) *discountConditionProductCollectionDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d discountConditionProductCollectionDo) FirstOrInit() (*model.DiscountConditionProductCollection, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiscountConditionProductCollection), nil
	}
}

func (d discountConditionProductCollectionDo) FirstOrCreate() (*model.DiscountConditionProductCollection, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiscountConditionProductCollection), nil
	}
}

func (d discountConditionProductCollectionDo) FindByPage(offset int, limit int) (result []*model.DiscountConditionProductCollection, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d discountConditionProductCollectionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d discountConditionProductCollectionDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d discountConditionProductCollectionDo) Delete(models ...*model.DiscountConditionProductCollection) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *discountConditionProductCollectionDo) withDO(do gen.Dao) *discountConditionProductCollectionDo {
	d.DO = *do.(*gen.DO)
	return d
}
