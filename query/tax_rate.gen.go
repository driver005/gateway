// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newTaxRate(db *gorm.DB, opts ...gen.DOOption) taxRate {
	_taxRate := taxRate{}

	_taxRate.taxRateDo.UseDB(db, opts...)
	_taxRate.taxRateDo.UseModel(&model.TaxRate{})

	tableName := _taxRate.taxRateDo.TableName()
	_taxRate.ALL = field.NewAsterisk(tableName)
	_taxRate.ID = field.NewString(tableName, "id")
	_taxRate.Rate = field.NewFloat32(tableName, "rate")
	_taxRate.Code = field.NewString(tableName, "code")
	_taxRate.Name = field.NewString(tableName, "name")
	_taxRate.IsDefault = field.NewBool(tableName, "is_default")
	_taxRate.IsCombinable = field.NewBool(tableName, "is_combinable")
	_taxRate.TaxRegionID = field.NewString(tableName, "tax_region_id")
	_taxRate.Metadata = field.NewString(tableName, "metadata")
	_taxRate.CreatedAt = field.NewTime(tableName, "created_at")
	_taxRate.UpdatedAt = field.NewTime(tableName, "updated_at")
	_taxRate.CreatedBy = field.NewString(tableName, "created_by")

	_taxRate.fillFieldMap()

	return _taxRate
}

type taxRate struct {
	taxRateDo taxRateDo

	ALL          field.Asterisk
	ID           field.String
	Rate         field.Float32
	Code         field.String
	Name         field.String
	IsDefault    field.Bool
	IsCombinable field.Bool
	TaxRegionID  field.String
	Metadata     field.String
	CreatedAt    field.Time
	UpdatedAt    field.Time
	CreatedBy    field.String

	fieldMap map[string]field.Expr
}

func (t taxRate) Table(newTableName string) *taxRate {
	t.taxRateDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t taxRate) As(alias string) *taxRate {
	t.taxRateDo.DO = *(t.taxRateDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *taxRate) updateTableName(table string) *taxRate {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewString(table, "id")
	t.Rate = field.NewFloat32(table, "rate")
	t.Code = field.NewString(table, "code")
	t.Name = field.NewString(table, "name")
	t.IsDefault = field.NewBool(table, "is_default")
	t.IsCombinable = field.NewBool(table, "is_combinable")
	t.TaxRegionID = field.NewString(table, "tax_region_id")
	t.Metadata = field.NewString(table, "metadata")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.CreatedBy = field.NewString(table, "created_by")

	t.fillFieldMap()

	return t
}

func (t *taxRate) WithContext(ctx context.Context) *taxRateDo { return t.taxRateDo.WithContext(ctx) }

func (t taxRate) TableName() string { return t.taxRateDo.TableName() }

func (t taxRate) Alias() string { return t.taxRateDo.Alias() }

func (t taxRate) Columns(cols ...field.Expr) gen.Columns { return t.taxRateDo.Columns(cols...) }

func (t *taxRate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *taxRate) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 11)
	t.fieldMap["id"] = t.ID
	t.fieldMap["rate"] = t.Rate
	t.fieldMap["code"] = t.Code
	t.fieldMap["name"] = t.Name
	t.fieldMap["is_default"] = t.IsDefault
	t.fieldMap["is_combinable"] = t.IsCombinable
	t.fieldMap["tax_region_id"] = t.TaxRegionID
	t.fieldMap["metadata"] = t.Metadata
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["created_by"] = t.CreatedBy
}

func (t taxRate) clone(db *gorm.DB) taxRate {
	t.taxRateDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t taxRate) replaceDB(db *gorm.DB) taxRate {
	t.taxRateDo.ReplaceDB(db)
	return t
}

type taxRateDo struct{ gen.DO }

func (t taxRateDo) Debug() *taxRateDo {
	return t.withDO(t.DO.Debug())
}

func (t taxRateDo) WithContext(ctx context.Context) *taxRateDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t taxRateDo) ReadDB() *taxRateDo {
	return t.Clauses(dbresolver.Read)
}

func (t taxRateDo) WriteDB() *taxRateDo {
	return t.Clauses(dbresolver.Write)
}

func (t taxRateDo) Session(config *gorm.Session) *taxRateDo {
	return t.withDO(t.DO.Session(config))
}

func (t taxRateDo) Clauses(conds ...clause.Expression) *taxRateDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t taxRateDo) Returning(value interface{}, columns ...string) *taxRateDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t taxRateDo) Not(conds ...gen.Condition) *taxRateDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t taxRateDo) Or(conds ...gen.Condition) *taxRateDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t taxRateDo) Select(conds ...field.Expr) *taxRateDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t taxRateDo) Where(conds ...gen.Condition) *taxRateDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t taxRateDo) Order(conds ...field.Expr) *taxRateDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t taxRateDo) Distinct(cols ...field.Expr) *taxRateDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t taxRateDo) Omit(cols ...field.Expr) *taxRateDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t taxRateDo) Join(table schema.Tabler, on ...field.Expr) *taxRateDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t taxRateDo) LeftJoin(table schema.Tabler, on ...field.Expr) *taxRateDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t taxRateDo) RightJoin(table schema.Tabler, on ...field.Expr) *taxRateDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t taxRateDo) Group(cols ...field.Expr) *taxRateDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t taxRateDo) Having(conds ...gen.Condition) *taxRateDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t taxRateDo) Limit(limit int) *taxRateDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t taxRateDo) Offset(offset int) *taxRateDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t taxRateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *taxRateDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t taxRateDo) Unscoped() *taxRateDo {
	return t.withDO(t.DO.Unscoped())
}

func (t taxRateDo) Create(values ...*model.TaxRate) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t taxRateDo) CreateInBatches(values []*model.TaxRate, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t taxRateDo) Save(values ...*model.TaxRate) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t taxRateDo) First() (*model.TaxRate, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaxRate), nil
	}
}

func (t taxRateDo) Take() (*model.TaxRate, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaxRate), nil
	}
}

func (t taxRateDo) Last() (*model.TaxRate, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaxRate), nil
	}
}

func (t taxRateDo) Find() ([]*model.TaxRate, error) {
	result, err := t.DO.Find()
	return result.([]*model.TaxRate), err
}

func (t taxRateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TaxRate, err error) {
	buf := make([]*model.TaxRate, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t taxRateDo) FindInBatches(result *[]*model.TaxRate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t taxRateDo) Attrs(attrs ...field.AssignExpr) *taxRateDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t taxRateDo) Assign(attrs ...field.AssignExpr) *taxRateDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t taxRateDo) Joins(fields ...field.RelationField) *taxRateDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t taxRateDo) Preload(fields ...field.RelationField) *taxRateDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t taxRateDo) FirstOrInit() (*model.TaxRate, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaxRate), nil
	}
}

func (t taxRateDo) FirstOrCreate() (*model.TaxRate, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaxRate), nil
	}
}

func (t taxRateDo) FindByPage(offset int, limit int) (result []*model.TaxRate, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t taxRateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t taxRateDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t taxRateDo) Delete(models ...*model.TaxRate) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *taxRateDo) withDO(do gen.Dao) *taxRateDo {
	t.DO = *do.(*gen.DO)
	return t
}
