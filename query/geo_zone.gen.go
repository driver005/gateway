// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newGeoZone(db *gorm.DB, opts ...gen.DOOption) geoZone {
	_geoZone := geoZone{}

	_geoZone.geoZoneDo.UseDB(db, opts...)
	_geoZone.geoZoneDo.UseModel(&model.GeoZone{})

	tableName := _geoZone.geoZoneDo.TableName()
	_geoZone.ALL = field.NewAsterisk(tableName)
	_geoZone.ID = field.NewString(tableName, "id")
	_geoZone.Type = field.NewString(tableName, "type")
	_geoZone.CountryCode = field.NewString(tableName, "country_code")
	_geoZone.ProvinceCode = field.NewString(tableName, "province_code")
	_geoZone.City = field.NewString(tableName, "city")
	_geoZone.ServiceZoneID = field.NewString(tableName, "service_zone_id")
	_geoZone.PostalExpression = field.NewString(tableName, "postal_expression")
	_geoZone.Metadata = field.NewString(tableName, "metadata")
	_geoZone.CreatedAt = field.NewTime(tableName, "created_at")
	_geoZone.UpdatedAt = field.NewTime(tableName, "updated_at")
	_geoZone.DeletedAt = field.NewField(tableName, "deleted_at")

	_geoZone.fillFieldMap()

	return _geoZone
}

type geoZone struct {
	geoZoneDo geoZoneDo

	ALL              field.Asterisk
	ID               field.String
	Type             field.String
	CountryCode      field.String
	ProvinceCode     field.String
	City             field.String
	ServiceZoneID    field.String
	PostalExpression field.String
	Metadata         field.String
	CreatedAt        field.Time
	UpdatedAt        field.Time
	DeletedAt        field.Field

	fieldMap map[string]field.Expr
}

func (g geoZone) Table(newTableName string) *geoZone {
	g.geoZoneDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g geoZone) As(alias string) *geoZone {
	g.geoZoneDo.DO = *(g.geoZoneDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *geoZone) updateTableName(table string) *geoZone {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewString(table, "id")
	g.Type = field.NewString(table, "type")
	g.CountryCode = field.NewString(table, "country_code")
	g.ProvinceCode = field.NewString(table, "province_code")
	g.City = field.NewString(table, "city")
	g.ServiceZoneID = field.NewString(table, "service_zone_id")
	g.PostalExpression = field.NewString(table, "postal_expression")
	g.Metadata = field.NewString(table, "metadata")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")
	g.DeletedAt = field.NewField(table, "deleted_at")

	g.fillFieldMap()

	return g
}

func (g *geoZone) WithContext(ctx context.Context) *geoZoneDo { return g.geoZoneDo.WithContext(ctx) }

func (g geoZone) TableName() string { return g.geoZoneDo.TableName() }

func (g geoZone) Alias() string { return g.geoZoneDo.Alias() }

func (g geoZone) Columns(cols ...field.Expr) gen.Columns { return g.geoZoneDo.Columns(cols...) }

func (g *geoZone) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *geoZone) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 11)
	g.fieldMap["id"] = g.ID
	g.fieldMap["type"] = g.Type
	g.fieldMap["country_code"] = g.CountryCode
	g.fieldMap["province_code"] = g.ProvinceCode
	g.fieldMap["city"] = g.City
	g.fieldMap["service_zone_id"] = g.ServiceZoneID
	g.fieldMap["postal_expression"] = g.PostalExpression
	g.fieldMap["metadata"] = g.Metadata
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["deleted_at"] = g.DeletedAt
}

func (g geoZone) clone(db *gorm.DB) geoZone {
	g.geoZoneDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g geoZone) replaceDB(db *gorm.DB) geoZone {
	g.geoZoneDo.ReplaceDB(db)
	return g
}

type geoZoneDo struct{ gen.DO }

func (g geoZoneDo) Debug() *geoZoneDo {
	return g.withDO(g.DO.Debug())
}

func (g geoZoneDo) WithContext(ctx context.Context) *geoZoneDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g geoZoneDo) ReadDB() *geoZoneDo {
	return g.Clauses(dbresolver.Read)
}

func (g geoZoneDo) WriteDB() *geoZoneDo {
	return g.Clauses(dbresolver.Write)
}

func (g geoZoneDo) Session(config *gorm.Session) *geoZoneDo {
	return g.withDO(g.DO.Session(config))
}

func (g geoZoneDo) Clauses(conds ...clause.Expression) *geoZoneDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g geoZoneDo) Returning(value interface{}, columns ...string) *geoZoneDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g geoZoneDo) Not(conds ...gen.Condition) *geoZoneDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g geoZoneDo) Or(conds ...gen.Condition) *geoZoneDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g geoZoneDo) Select(conds ...field.Expr) *geoZoneDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g geoZoneDo) Where(conds ...gen.Condition) *geoZoneDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g geoZoneDo) Order(conds ...field.Expr) *geoZoneDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g geoZoneDo) Distinct(cols ...field.Expr) *geoZoneDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g geoZoneDo) Omit(cols ...field.Expr) *geoZoneDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g geoZoneDo) Join(table schema.Tabler, on ...field.Expr) *geoZoneDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g geoZoneDo) LeftJoin(table schema.Tabler, on ...field.Expr) *geoZoneDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g geoZoneDo) RightJoin(table schema.Tabler, on ...field.Expr) *geoZoneDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g geoZoneDo) Group(cols ...field.Expr) *geoZoneDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g geoZoneDo) Having(conds ...gen.Condition) *geoZoneDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g geoZoneDo) Limit(limit int) *geoZoneDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g geoZoneDo) Offset(offset int) *geoZoneDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g geoZoneDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *geoZoneDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g geoZoneDo) Unscoped() *geoZoneDo {
	return g.withDO(g.DO.Unscoped())
}

func (g geoZoneDo) Create(values ...*model.GeoZone) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g geoZoneDo) CreateInBatches(values []*model.GeoZone, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g geoZoneDo) Save(values ...*model.GeoZone) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g geoZoneDo) First() (*model.GeoZone, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GeoZone), nil
	}
}

func (g geoZoneDo) Take() (*model.GeoZone, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GeoZone), nil
	}
}

func (g geoZoneDo) Last() (*model.GeoZone, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GeoZone), nil
	}
}

func (g geoZoneDo) Find() ([]*model.GeoZone, error) {
	result, err := g.DO.Find()
	return result.([]*model.GeoZone), err
}

func (g geoZoneDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GeoZone, err error) {
	buf := make([]*model.GeoZone, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g geoZoneDo) FindInBatches(result *[]*model.GeoZone, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g geoZoneDo) Attrs(attrs ...field.AssignExpr) *geoZoneDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g geoZoneDo) Assign(attrs ...field.AssignExpr) *geoZoneDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g geoZoneDo) Joins(fields ...field.RelationField) *geoZoneDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g geoZoneDo) Preload(fields ...field.RelationField) *geoZoneDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g geoZoneDo) FirstOrInit() (*model.GeoZone, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GeoZone), nil
	}
}

func (g geoZoneDo) FirstOrCreate() (*model.GeoZone, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GeoZone), nil
	}
}

func (g geoZoneDo) FindByPage(offset int, limit int) (result []*model.GeoZone, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g geoZoneDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g geoZoneDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g geoZoneDo) Delete(models ...*model.GeoZone) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *geoZoneDo) withDO(do gen.Dao) *geoZoneDo {
	g.DO = *do.(*gen.DO)
	return g
}
