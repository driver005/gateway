// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newCartAddress(db *gorm.DB, opts ...gen.DOOption) cartAddress {
	_cartAddress := cartAddress{}

	_cartAddress.cartAddressDo.UseDB(db, opts...)
	_cartAddress.cartAddressDo.UseModel(&model.CartAddress{})

	tableName := _cartAddress.cartAddressDo.TableName()
	_cartAddress.ALL = field.NewAsterisk(tableName)
	_cartAddress.ID = field.NewString(tableName, "id")
	_cartAddress.CustomerID = field.NewString(tableName, "customer_id")
	_cartAddress.Company = field.NewString(tableName, "company")
	_cartAddress.FirstName = field.NewString(tableName, "first_name")
	_cartAddress.LastName = field.NewString(tableName, "last_name")
	_cartAddress.Address1 = field.NewString(tableName, "address_1")
	_cartAddress.Address2 = field.NewString(tableName, "address_2")
	_cartAddress.City = field.NewString(tableName, "city")
	_cartAddress.CountryCode = field.NewString(tableName, "country_code")
	_cartAddress.Province = field.NewString(tableName, "province")
	_cartAddress.PostalCode = field.NewString(tableName, "postal_code")
	_cartAddress.Phone = field.NewString(tableName, "phone")
	_cartAddress.Metadata = field.NewString(tableName, "metadata")
	_cartAddress.CreatedAt = field.NewTime(tableName, "created_at")
	_cartAddress.UpdatedAt = field.NewTime(tableName, "updated_at")

	_cartAddress.fillFieldMap()

	return _cartAddress
}

type cartAddress struct {
	cartAddressDo cartAddressDo

	ALL         field.Asterisk
	ID          field.String
	CustomerID  field.String
	Company     field.String
	FirstName   field.String
	LastName    field.String
	Address1    field.String
	Address2    field.String
	City        field.String
	CountryCode field.String
	Province    field.String
	PostalCode  field.String
	Phone       field.String
	Metadata    field.String
	CreatedAt   field.Time
	UpdatedAt   field.Time

	fieldMap map[string]field.Expr
}

func (c cartAddress) Table(newTableName string) *cartAddress {
	c.cartAddressDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cartAddress) As(alias string) *cartAddress {
	c.cartAddressDo.DO = *(c.cartAddressDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cartAddress) updateTableName(table string) *cartAddress {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewString(table, "id")
	c.CustomerID = field.NewString(table, "customer_id")
	c.Company = field.NewString(table, "company")
	c.FirstName = field.NewString(table, "first_name")
	c.LastName = field.NewString(table, "last_name")
	c.Address1 = field.NewString(table, "address_1")
	c.Address2 = field.NewString(table, "address_2")
	c.City = field.NewString(table, "city")
	c.CountryCode = field.NewString(table, "country_code")
	c.Province = field.NewString(table, "province")
	c.PostalCode = field.NewString(table, "postal_code")
	c.Phone = field.NewString(table, "phone")
	c.Metadata = field.NewString(table, "metadata")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *cartAddress) WithContext(ctx context.Context) *cartAddressDo {
	return c.cartAddressDo.WithContext(ctx)
}

func (c cartAddress) TableName() string { return c.cartAddressDo.TableName() }

func (c cartAddress) Alias() string { return c.cartAddressDo.Alias() }

func (c cartAddress) Columns(cols ...field.Expr) gen.Columns { return c.cartAddressDo.Columns(cols...) }

func (c *cartAddress) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cartAddress) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 15)
	c.fieldMap["id"] = c.ID
	c.fieldMap["customer_id"] = c.CustomerID
	c.fieldMap["company"] = c.Company
	c.fieldMap["first_name"] = c.FirstName
	c.fieldMap["last_name"] = c.LastName
	c.fieldMap["address_1"] = c.Address1
	c.fieldMap["address_2"] = c.Address2
	c.fieldMap["city"] = c.City
	c.fieldMap["country_code"] = c.CountryCode
	c.fieldMap["province"] = c.Province
	c.fieldMap["postal_code"] = c.PostalCode
	c.fieldMap["phone"] = c.Phone
	c.fieldMap["metadata"] = c.Metadata
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
}

func (c cartAddress) clone(db *gorm.DB) cartAddress {
	c.cartAddressDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cartAddress) replaceDB(db *gorm.DB) cartAddress {
	c.cartAddressDo.ReplaceDB(db)
	return c
}

type cartAddressDo struct{ gen.DO }

func (c cartAddressDo) Debug() *cartAddressDo {
	return c.withDO(c.DO.Debug())
}

func (c cartAddressDo) WithContext(ctx context.Context) *cartAddressDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cartAddressDo) ReadDB() *cartAddressDo {
	return c.Clauses(dbresolver.Read)
}

func (c cartAddressDo) WriteDB() *cartAddressDo {
	return c.Clauses(dbresolver.Write)
}

func (c cartAddressDo) Session(config *gorm.Session) *cartAddressDo {
	return c.withDO(c.DO.Session(config))
}

func (c cartAddressDo) Clauses(conds ...clause.Expression) *cartAddressDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cartAddressDo) Returning(value interface{}, columns ...string) *cartAddressDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cartAddressDo) Not(conds ...gen.Condition) *cartAddressDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cartAddressDo) Or(conds ...gen.Condition) *cartAddressDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cartAddressDo) Select(conds ...field.Expr) *cartAddressDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cartAddressDo) Where(conds ...gen.Condition) *cartAddressDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cartAddressDo) Order(conds ...field.Expr) *cartAddressDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cartAddressDo) Distinct(cols ...field.Expr) *cartAddressDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cartAddressDo) Omit(cols ...field.Expr) *cartAddressDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cartAddressDo) Join(table schema.Tabler, on ...field.Expr) *cartAddressDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cartAddressDo) LeftJoin(table schema.Tabler, on ...field.Expr) *cartAddressDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cartAddressDo) RightJoin(table schema.Tabler, on ...field.Expr) *cartAddressDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cartAddressDo) Group(cols ...field.Expr) *cartAddressDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cartAddressDo) Having(conds ...gen.Condition) *cartAddressDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cartAddressDo) Limit(limit int) *cartAddressDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cartAddressDo) Offset(offset int) *cartAddressDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cartAddressDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *cartAddressDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cartAddressDo) Unscoped() *cartAddressDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cartAddressDo) Create(values ...*model.CartAddress) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cartAddressDo) CreateInBatches(values []*model.CartAddress, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cartAddressDo) Save(values ...*model.CartAddress) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cartAddressDo) First() (*model.CartAddress, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CartAddress), nil
	}
}

func (c cartAddressDo) Take() (*model.CartAddress, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CartAddress), nil
	}
}

func (c cartAddressDo) Last() (*model.CartAddress, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CartAddress), nil
	}
}

func (c cartAddressDo) Find() ([]*model.CartAddress, error) {
	result, err := c.DO.Find()
	return result.([]*model.CartAddress), err
}

func (c cartAddressDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CartAddress, err error) {
	buf := make([]*model.CartAddress, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cartAddressDo) FindInBatches(result *[]*model.CartAddress, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cartAddressDo) Attrs(attrs ...field.AssignExpr) *cartAddressDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cartAddressDo) Assign(attrs ...field.AssignExpr) *cartAddressDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cartAddressDo) Joins(fields ...field.RelationField) *cartAddressDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cartAddressDo) Preload(fields ...field.RelationField) *cartAddressDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cartAddressDo) FirstOrInit() (*model.CartAddress, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CartAddress), nil
	}
}

func (c cartAddressDo) FirstOrCreate() (*model.CartAddress, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CartAddress), nil
	}
}

func (c cartAddressDo) FindByPage(offset int, limit int) (result []*model.CartAddress, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cartAddressDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cartAddressDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cartAddressDo) Delete(models ...*model.CartAddress) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cartAddressDo) withDO(do gen.Dao) *cartAddressDo {
	c.DO = *do.(*gen.DO)
	return c
}
