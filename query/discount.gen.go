// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newDiscount(db *gorm.DB, opts ...gen.DOOption) discount {
	_discount := discount{}

	_discount.discountDo.UseDB(db, opts...)
	_discount.discountDo.UseModel(&model.Discount{})

	tableName := _discount.discountDo.TableName()
	_discount.ALL = field.NewAsterisk(tableName)
	_discount.ID = field.NewString(tableName, "id")
	_discount.Code = field.NewString(tableName, "code")
	_discount.IsDynamic = field.NewBool(tableName, "is_dynamic")
	_discount.RuleID = field.NewString(tableName, "rule_id")
	_discount.IsDisabled = field.NewBool(tableName, "is_disabled")
	_discount.ParentDiscountID = field.NewString(tableName, "parent_discount_id")
	_discount.StartsAt = field.NewTime(tableName, "starts_at")
	_discount.EndsAt = field.NewTime(tableName, "ends_at")
	_discount.CreatedAt = field.NewTime(tableName, "created_at")
	_discount.UpdatedAt = field.NewTime(tableName, "updated_at")
	_discount.DeletedAt = field.NewField(tableName, "deleted_at")
	_discount.Metadata = field.NewString(tableName, "metadata")
	_discount.UsageLimit = field.NewInt32(tableName, "usage_limit")
	_discount.UsageCount = field.NewInt32(tableName, "usage_count")
	_discount.ValidDuration = field.NewString(tableName, "valid_duration")

	_discount.fillFieldMap()

	return _discount
}

type discount struct {
	discountDo discountDo

	ALL              field.Asterisk
	ID               field.String
	Code             field.String
	IsDynamic        field.Bool
	RuleID           field.String
	IsDisabled       field.Bool
	ParentDiscountID field.String
	StartsAt         field.Time
	EndsAt           field.Time
	CreatedAt        field.Time
	UpdatedAt        field.Time
	DeletedAt        field.Field
	Metadata         field.String
	UsageLimit       field.Int32
	UsageCount       field.Int32
	ValidDuration    field.String

	fieldMap map[string]field.Expr
}

func (d discount) Table(newTableName string) *discount {
	d.discountDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d discount) As(alias string) *discount {
	d.discountDo.DO = *(d.discountDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *discount) updateTableName(table string) *discount {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewString(table, "id")
	d.Code = field.NewString(table, "code")
	d.IsDynamic = field.NewBool(table, "is_dynamic")
	d.RuleID = field.NewString(table, "rule_id")
	d.IsDisabled = field.NewBool(table, "is_disabled")
	d.ParentDiscountID = field.NewString(table, "parent_discount_id")
	d.StartsAt = field.NewTime(table, "starts_at")
	d.EndsAt = field.NewTime(table, "ends_at")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.DeletedAt = field.NewField(table, "deleted_at")
	d.Metadata = field.NewString(table, "metadata")
	d.UsageLimit = field.NewInt32(table, "usage_limit")
	d.UsageCount = field.NewInt32(table, "usage_count")
	d.ValidDuration = field.NewString(table, "valid_duration")

	d.fillFieldMap()

	return d
}

func (d *discount) WithContext(ctx context.Context) *discountDo { return d.discountDo.WithContext(ctx) }

func (d discount) TableName() string { return d.discountDo.TableName() }

func (d discount) Alias() string { return d.discountDo.Alias() }

func (d discount) Columns(cols ...field.Expr) gen.Columns { return d.discountDo.Columns(cols...) }

func (d *discount) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *discount) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 15)
	d.fieldMap["id"] = d.ID
	d.fieldMap["code"] = d.Code
	d.fieldMap["is_dynamic"] = d.IsDynamic
	d.fieldMap["rule_id"] = d.RuleID
	d.fieldMap["is_disabled"] = d.IsDisabled
	d.fieldMap["parent_discount_id"] = d.ParentDiscountID
	d.fieldMap["starts_at"] = d.StartsAt
	d.fieldMap["ends_at"] = d.EndsAt
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["deleted_at"] = d.DeletedAt
	d.fieldMap["metadata"] = d.Metadata
	d.fieldMap["usage_limit"] = d.UsageLimit
	d.fieldMap["usage_count"] = d.UsageCount
	d.fieldMap["valid_duration"] = d.ValidDuration
}

func (d discount) clone(db *gorm.DB) discount {
	d.discountDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d discount) replaceDB(db *gorm.DB) discount {
	d.discountDo.ReplaceDB(db)
	return d
}

type discountDo struct{ gen.DO }

func (d discountDo) Debug() *discountDo {
	return d.withDO(d.DO.Debug())
}

func (d discountDo) WithContext(ctx context.Context) *discountDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d discountDo) ReadDB() *discountDo {
	return d.Clauses(dbresolver.Read)
}

func (d discountDo) WriteDB() *discountDo {
	return d.Clauses(dbresolver.Write)
}

func (d discountDo) Session(config *gorm.Session) *discountDo {
	return d.withDO(d.DO.Session(config))
}

func (d discountDo) Clauses(conds ...clause.Expression) *discountDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d discountDo) Returning(value interface{}, columns ...string) *discountDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d discountDo) Not(conds ...gen.Condition) *discountDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d discountDo) Or(conds ...gen.Condition) *discountDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d discountDo) Select(conds ...field.Expr) *discountDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d discountDo) Where(conds ...gen.Condition) *discountDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d discountDo) Order(conds ...field.Expr) *discountDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d discountDo) Distinct(cols ...field.Expr) *discountDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d discountDo) Omit(cols ...field.Expr) *discountDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d discountDo) Join(table schema.Tabler, on ...field.Expr) *discountDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d discountDo) LeftJoin(table schema.Tabler, on ...field.Expr) *discountDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d discountDo) RightJoin(table schema.Tabler, on ...field.Expr) *discountDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d discountDo) Group(cols ...field.Expr) *discountDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d discountDo) Having(conds ...gen.Condition) *discountDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d discountDo) Limit(limit int) *discountDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d discountDo) Offset(offset int) *discountDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d discountDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *discountDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d discountDo) Unscoped() *discountDo {
	return d.withDO(d.DO.Unscoped())
}

func (d discountDo) Create(values ...*model.Discount) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d discountDo) CreateInBatches(values []*model.Discount, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d discountDo) Save(values ...*model.Discount) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d discountDo) First() (*model.Discount, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Discount), nil
	}
}

func (d discountDo) Take() (*model.Discount, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Discount), nil
	}
}

func (d discountDo) Last() (*model.Discount, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Discount), nil
	}
}

func (d discountDo) Find() ([]*model.Discount, error) {
	result, err := d.DO.Find()
	return result.([]*model.Discount), err
}

func (d discountDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Discount, err error) {
	buf := make([]*model.Discount, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d discountDo) FindInBatches(result *[]*model.Discount, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d discountDo) Attrs(attrs ...field.AssignExpr) *discountDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d discountDo) Assign(attrs ...field.AssignExpr) *discountDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d discountDo) Joins(fields ...field.RelationField) *discountDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d discountDo) Preload(fields ...field.RelationField) *discountDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d discountDo) FirstOrInit() (*model.Discount, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Discount), nil
	}
}

func (d discountDo) FirstOrCreate() (*model.Discount, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Discount), nil
	}
}

func (d discountDo) FindByPage(offset int, limit int) (result []*model.Discount, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d discountDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d discountDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d discountDo) Delete(models ...*model.Discount) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *discountDo) withDO(do gen.Dao) *discountDo {
	d.DO = *do.(*gen.DO)
	return d
}
