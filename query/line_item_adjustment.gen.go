// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newLineItemAdjustment(db *gorm.DB, opts ...gen.DOOption) lineItemAdjustment {
	_lineItemAdjustment := lineItemAdjustment{}

	_lineItemAdjustment.lineItemAdjustmentDo.UseDB(db, opts...)
	_lineItemAdjustment.lineItemAdjustmentDo.UseModel(&model.LineItemAdjustment{})

	tableName := _lineItemAdjustment.lineItemAdjustmentDo.TableName()
	_lineItemAdjustment.ALL = field.NewAsterisk(tableName)
	_lineItemAdjustment.ID = field.NewString(tableName, "id")
	_lineItemAdjustment.ItemID = field.NewString(tableName, "item_id")
	_lineItemAdjustment.Description = field.NewString(tableName, "description")
	_lineItemAdjustment.DiscountID = field.NewString(tableName, "discount_id")
	_lineItemAdjustment.Amount = field.NewFloat64(tableName, "amount")
	_lineItemAdjustment.Metadata = field.NewString(tableName, "metadata")

	_lineItemAdjustment.fillFieldMap()

	return _lineItemAdjustment
}

type lineItemAdjustment struct {
	lineItemAdjustmentDo lineItemAdjustmentDo

	ALL         field.Asterisk
	ID          field.String
	ItemID      field.String
	Description field.String
	DiscountID  field.String
	Amount      field.Float64
	Metadata    field.String

	fieldMap map[string]field.Expr
}

func (l lineItemAdjustment) Table(newTableName string) *lineItemAdjustment {
	l.lineItemAdjustmentDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lineItemAdjustment) As(alias string) *lineItemAdjustment {
	l.lineItemAdjustmentDo.DO = *(l.lineItemAdjustmentDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lineItemAdjustment) updateTableName(table string) *lineItemAdjustment {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "id")
	l.ItemID = field.NewString(table, "item_id")
	l.Description = field.NewString(table, "description")
	l.DiscountID = field.NewString(table, "discount_id")
	l.Amount = field.NewFloat64(table, "amount")
	l.Metadata = field.NewString(table, "metadata")

	l.fillFieldMap()

	return l
}

func (l *lineItemAdjustment) WithContext(ctx context.Context) *lineItemAdjustmentDo {
	return l.lineItemAdjustmentDo.WithContext(ctx)
}

func (l lineItemAdjustment) TableName() string { return l.lineItemAdjustmentDo.TableName() }

func (l lineItemAdjustment) Alias() string { return l.lineItemAdjustmentDo.Alias() }

func (l lineItemAdjustment) Columns(cols ...field.Expr) gen.Columns {
	return l.lineItemAdjustmentDo.Columns(cols...)
}

func (l *lineItemAdjustment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lineItemAdjustment) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 6)
	l.fieldMap["id"] = l.ID
	l.fieldMap["item_id"] = l.ItemID
	l.fieldMap["description"] = l.Description
	l.fieldMap["discount_id"] = l.DiscountID
	l.fieldMap["amount"] = l.Amount
	l.fieldMap["metadata"] = l.Metadata
}

func (l lineItemAdjustment) clone(db *gorm.DB) lineItemAdjustment {
	l.lineItemAdjustmentDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l lineItemAdjustment) replaceDB(db *gorm.DB) lineItemAdjustment {
	l.lineItemAdjustmentDo.ReplaceDB(db)
	return l
}

type lineItemAdjustmentDo struct{ gen.DO }

func (l lineItemAdjustmentDo) Debug() *lineItemAdjustmentDo {
	return l.withDO(l.DO.Debug())
}

func (l lineItemAdjustmentDo) WithContext(ctx context.Context) *lineItemAdjustmentDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lineItemAdjustmentDo) ReadDB() *lineItemAdjustmentDo {
	return l.Clauses(dbresolver.Read)
}

func (l lineItemAdjustmentDo) WriteDB() *lineItemAdjustmentDo {
	return l.Clauses(dbresolver.Write)
}

func (l lineItemAdjustmentDo) Session(config *gorm.Session) *lineItemAdjustmentDo {
	return l.withDO(l.DO.Session(config))
}

func (l lineItemAdjustmentDo) Clauses(conds ...clause.Expression) *lineItemAdjustmentDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lineItemAdjustmentDo) Returning(value interface{}, columns ...string) *lineItemAdjustmentDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lineItemAdjustmentDo) Not(conds ...gen.Condition) *lineItemAdjustmentDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lineItemAdjustmentDo) Or(conds ...gen.Condition) *lineItemAdjustmentDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lineItemAdjustmentDo) Select(conds ...field.Expr) *lineItemAdjustmentDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lineItemAdjustmentDo) Where(conds ...gen.Condition) *lineItemAdjustmentDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lineItemAdjustmentDo) Order(conds ...field.Expr) *lineItemAdjustmentDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lineItemAdjustmentDo) Distinct(cols ...field.Expr) *lineItemAdjustmentDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lineItemAdjustmentDo) Omit(cols ...field.Expr) *lineItemAdjustmentDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lineItemAdjustmentDo) Join(table schema.Tabler, on ...field.Expr) *lineItemAdjustmentDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lineItemAdjustmentDo) LeftJoin(table schema.Tabler, on ...field.Expr) *lineItemAdjustmentDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lineItemAdjustmentDo) RightJoin(table schema.Tabler, on ...field.Expr) *lineItemAdjustmentDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lineItemAdjustmentDo) Group(cols ...field.Expr) *lineItemAdjustmentDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lineItemAdjustmentDo) Having(conds ...gen.Condition) *lineItemAdjustmentDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lineItemAdjustmentDo) Limit(limit int) *lineItemAdjustmentDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lineItemAdjustmentDo) Offset(offset int) *lineItemAdjustmentDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lineItemAdjustmentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *lineItemAdjustmentDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lineItemAdjustmentDo) Unscoped() *lineItemAdjustmentDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lineItemAdjustmentDo) Create(values ...*model.LineItemAdjustment) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lineItemAdjustmentDo) CreateInBatches(values []*model.LineItemAdjustment, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lineItemAdjustmentDo) Save(values ...*model.LineItemAdjustment) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lineItemAdjustmentDo) First() (*model.LineItemAdjustment, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LineItemAdjustment), nil
	}
}

func (l lineItemAdjustmentDo) Take() (*model.LineItemAdjustment, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LineItemAdjustment), nil
	}
}

func (l lineItemAdjustmentDo) Last() (*model.LineItemAdjustment, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LineItemAdjustment), nil
	}
}

func (l lineItemAdjustmentDo) Find() ([]*model.LineItemAdjustment, error) {
	result, err := l.DO.Find()
	return result.([]*model.LineItemAdjustment), err
}

func (l lineItemAdjustmentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LineItemAdjustment, err error) {
	buf := make([]*model.LineItemAdjustment, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lineItemAdjustmentDo) FindInBatches(result *[]*model.LineItemAdjustment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lineItemAdjustmentDo) Attrs(attrs ...field.AssignExpr) *lineItemAdjustmentDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lineItemAdjustmentDo) Assign(attrs ...field.AssignExpr) *lineItemAdjustmentDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lineItemAdjustmentDo) Joins(fields ...field.RelationField) *lineItemAdjustmentDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lineItemAdjustmentDo) Preload(fields ...field.RelationField) *lineItemAdjustmentDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lineItemAdjustmentDo) FirstOrInit() (*model.LineItemAdjustment, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LineItemAdjustment), nil
	}
}

func (l lineItemAdjustmentDo) FirstOrCreate() (*model.LineItemAdjustment, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LineItemAdjustment), nil
	}
}

func (l lineItemAdjustmentDo) FindByPage(offset int, limit int) (result []*model.LineItemAdjustment, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lineItemAdjustmentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lineItemAdjustmentDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lineItemAdjustmentDo) Delete(models ...*model.LineItemAdjustment) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lineItemAdjustmentDo) withDO(do gen.Dao) *lineItemAdjustmentDo {
	l.DO = *do.(*gen.DO)
	return l
}
