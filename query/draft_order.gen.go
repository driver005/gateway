// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newDraftOrder(db *gorm.DB, opts ...gen.DOOption) draftOrder {
	_draftOrder := draftOrder{}

	_draftOrder.draftOrderDo.UseDB(db, opts...)
	_draftOrder.draftOrderDo.UseModel(&model.DraftOrder{})

	tableName := _draftOrder.draftOrderDo.TableName()
	_draftOrder.ALL = field.NewAsterisk(tableName)
	_draftOrder.ID = field.NewString(tableName, "id")
	_draftOrder.Status = field.NewString(tableName, "status")
	_draftOrder.DisplayID = field.NewInt32(tableName, "display_id")
	_draftOrder.CartID = field.NewString(tableName, "cart_id")
	_draftOrder.OrderID = field.NewString(tableName, "order_id")
	_draftOrder.CanceledAt = field.NewTime(tableName, "canceled_at")
	_draftOrder.CreatedAt = field.NewTime(tableName, "created_at")
	_draftOrder.UpdatedAt = field.NewTime(tableName, "updated_at")
	_draftOrder.CompletedAt = field.NewTime(tableName, "completed_at")
	_draftOrder.Metadata = field.NewString(tableName, "metadata")
	_draftOrder.IdempotencyKey = field.NewString(tableName, "idempotency_key")
	_draftOrder.NoNotificationOrder = field.NewBool(tableName, "no_notification_order")

	_draftOrder.fillFieldMap()

	return _draftOrder
}

type draftOrder struct {
	draftOrderDo draftOrderDo

	ALL                 field.Asterisk
	ID                  field.String
	Status              field.String
	DisplayID           field.Int32
	CartID              field.String
	OrderID             field.String
	CanceledAt          field.Time
	CreatedAt           field.Time
	UpdatedAt           field.Time
	CompletedAt         field.Time
	Metadata            field.String
	IdempotencyKey      field.String
	NoNotificationOrder field.Bool

	fieldMap map[string]field.Expr
}

func (d draftOrder) Table(newTableName string) *draftOrder {
	d.draftOrderDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d draftOrder) As(alias string) *draftOrder {
	d.draftOrderDo.DO = *(d.draftOrderDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *draftOrder) updateTableName(table string) *draftOrder {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewString(table, "id")
	d.Status = field.NewString(table, "status")
	d.DisplayID = field.NewInt32(table, "display_id")
	d.CartID = field.NewString(table, "cart_id")
	d.OrderID = field.NewString(table, "order_id")
	d.CanceledAt = field.NewTime(table, "canceled_at")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.CompletedAt = field.NewTime(table, "completed_at")
	d.Metadata = field.NewString(table, "metadata")
	d.IdempotencyKey = field.NewString(table, "idempotency_key")
	d.NoNotificationOrder = field.NewBool(table, "no_notification_order")

	d.fillFieldMap()

	return d
}

func (d *draftOrder) WithContext(ctx context.Context) *draftOrderDo {
	return d.draftOrderDo.WithContext(ctx)
}

func (d draftOrder) TableName() string { return d.draftOrderDo.TableName() }

func (d draftOrder) Alias() string { return d.draftOrderDo.Alias() }

func (d draftOrder) Columns(cols ...field.Expr) gen.Columns { return d.draftOrderDo.Columns(cols...) }

func (d *draftOrder) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *draftOrder) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 12)
	d.fieldMap["id"] = d.ID
	d.fieldMap["status"] = d.Status
	d.fieldMap["display_id"] = d.DisplayID
	d.fieldMap["cart_id"] = d.CartID
	d.fieldMap["order_id"] = d.OrderID
	d.fieldMap["canceled_at"] = d.CanceledAt
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["completed_at"] = d.CompletedAt
	d.fieldMap["metadata"] = d.Metadata
	d.fieldMap["idempotency_key"] = d.IdempotencyKey
	d.fieldMap["no_notification_order"] = d.NoNotificationOrder
}

func (d draftOrder) clone(db *gorm.DB) draftOrder {
	d.draftOrderDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d draftOrder) replaceDB(db *gorm.DB) draftOrder {
	d.draftOrderDo.ReplaceDB(db)
	return d
}

type draftOrderDo struct{ gen.DO }

func (d draftOrderDo) Debug() *draftOrderDo {
	return d.withDO(d.DO.Debug())
}

func (d draftOrderDo) WithContext(ctx context.Context) *draftOrderDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d draftOrderDo) ReadDB() *draftOrderDo {
	return d.Clauses(dbresolver.Read)
}

func (d draftOrderDo) WriteDB() *draftOrderDo {
	return d.Clauses(dbresolver.Write)
}

func (d draftOrderDo) Session(config *gorm.Session) *draftOrderDo {
	return d.withDO(d.DO.Session(config))
}

func (d draftOrderDo) Clauses(conds ...clause.Expression) *draftOrderDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d draftOrderDo) Returning(value interface{}, columns ...string) *draftOrderDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d draftOrderDo) Not(conds ...gen.Condition) *draftOrderDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d draftOrderDo) Or(conds ...gen.Condition) *draftOrderDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d draftOrderDo) Select(conds ...field.Expr) *draftOrderDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d draftOrderDo) Where(conds ...gen.Condition) *draftOrderDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d draftOrderDo) Order(conds ...field.Expr) *draftOrderDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d draftOrderDo) Distinct(cols ...field.Expr) *draftOrderDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d draftOrderDo) Omit(cols ...field.Expr) *draftOrderDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d draftOrderDo) Join(table schema.Tabler, on ...field.Expr) *draftOrderDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d draftOrderDo) LeftJoin(table schema.Tabler, on ...field.Expr) *draftOrderDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d draftOrderDo) RightJoin(table schema.Tabler, on ...field.Expr) *draftOrderDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d draftOrderDo) Group(cols ...field.Expr) *draftOrderDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d draftOrderDo) Having(conds ...gen.Condition) *draftOrderDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d draftOrderDo) Limit(limit int) *draftOrderDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d draftOrderDo) Offset(offset int) *draftOrderDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d draftOrderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *draftOrderDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d draftOrderDo) Unscoped() *draftOrderDo {
	return d.withDO(d.DO.Unscoped())
}

func (d draftOrderDo) Create(values ...*model.DraftOrder) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d draftOrderDo) CreateInBatches(values []*model.DraftOrder, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d draftOrderDo) Save(values ...*model.DraftOrder) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d draftOrderDo) First() (*model.DraftOrder, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DraftOrder), nil
	}
}

func (d draftOrderDo) Take() (*model.DraftOrder, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DraftOrder), nil
	}
}

func (d draftOrderDo) Last() (*model.DraftOrder, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DraftOrder), nil
	}
}

func (d draftOrderDo) Find() ([]*model.DraftOrder, error) {
	result, err := d.DO.Find()
	return result.([]*model.DraftOrder), err
}

func (d draftOrderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DraftOrder, err error) {
	buf := make([]*model.DraftOrder, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d draftOrderDo) FindInBatches(result *[]*model.DraftOrder, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d draftOrderDo) Attrs(attrs ...field.AssignExpr) *draftOrderDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d draftOrderDo) Assign(attrs ...field.AssignExpr) *draftOrderDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d draftOrderDo) Joins(fields ...field.RelationField) *draftOrderDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d draftOrderDo) Preload(fields ...field.RelationField) *draftOrderDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d draftOrderDo) FirstOrInit() (*model.DraftOrder, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DraftOrder), nil
	}
}

func (d draftOrderDo) FirstOrCreate() (*model.DraftOrder, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DraftOrder), nil
	}
}

func (d draftOrderDo) FindByPage(offset int, limit int) (result []*model.DraftOrder, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d draftOrderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d draftOrderDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d draftOrderDo) Delete(models ...*model.DraftOrder) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *draftOrderDo) withDO(do gen.Dao) *draftOrderDo {
	d.DO = *do.(*gen.DO)
	return d
}
