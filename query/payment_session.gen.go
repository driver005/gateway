// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newPaymentSession(db *gorm.DB, opts ...gen.DOOption) paymentSession {
	_paymentSession := paymentSession{}

	_paymentSession.paymentSessionDo.UseDB(db, opts...)
	_paymentSession.paymentSessionDo.UseModel(&model.PaymentSession{})

	tableName := _paymentSession.paymentSessionDo.TableName()
	_paymentSession.ALL = field.NewAsterisk(tableName)
	_paymentSession.ID = field.NewString(tableName, "id")
	_paymentSession.CurrencyCode = field.NewString(tableName, "currency_code")
	_paymentSession.Amount = field.NewFloat64(tableName, "amount")
	_paymentSession.ProviderID = field.NewString(tableName, "provider_id")
	_paymentSession.Data = field.NewString(tableName, "data")
	_paymentSession.Status = field.NewString(tableName, "status")
	_paymentSession.AuthorizedAt = field.NewTime(tableName, "authorized_at")
	_paymentSession.PaymentCollectionID = field.NewString(tableName, "payment_collection_id")

	_paymentSession.fillFieldMap()

	return _paymentSession
}

type paymentSession struct {
	paymentSessionDo paymentSessionDo

	ALL                 field.Asterisk
	ID                  field.String
	CurrencyCode        field.String
	Amount              field.Float64
	ProviderID          field.String
	Data                field.String
	Status              field.String
	AuthorizedAt        field.Time
	PaymentCollectionID field.String

	fieldMap map[string]field.Expr
}

func (p paymentSession) Table(newTableName string) *paymentSession {
	p.paymentSessionDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p paymentSession) As(alias string) *paymentSession {
	p.paymentSessionDo.DO = *(p.paymentSessionDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *paymentSession) updateTableName(table string) *paymentSession {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewString(table, "id")
	p.CurrencyCode = field.NewString(table, "currency_code")
	p.Amount = field.NewFloat64(table, "amount")
	p.ProviderID = field.NewString(table, "provider_id")
	p.Data = field.NewString(table, "data")
	p.Status = field.NewString(table, "status")
	p.AuthorizedAt = field.NewTime(table, "authorized_at")
	p.PaymentCollectionID = field.NewString(table, "payment_collection_id")

	p.fillFieldMap()

	return p
}

func (p *paymentSession) WithContext(ctx context.Context) *paymentSessionDo {
	return p.paymentSessionDo.WithContext(ctx)
}

func (p paymentSession) TableName() string { return p.paymentSessionDo.TableName() }

func (p paymentSession) Alias() string { return p.paymentSessionDo.Alias() }

func (p paymentSession) Columns(cols ...field.Expr) gen.Columns {
	return p.paymentSessionDo.Columns(cols...)
}

func (p *paymentSession) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *paymentSession) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 8)
	p.fieldMap["id"] = p.ID
	p.fieldMap["currency_code"] = p.CurrencyCode
	p.fieldMap["amount"] = p.Amount
	p.fieldMap["provider_id"] = p.ProviderID
	p.fieldMap["data"] = p.Data
	p.fieldMap["status"] = p.Status
	p.fieldMap["authorized_at"] = p.AuthorizedAt
	p.fieldMap["payment_collection_id"] = p.PaymentCollectionID
}

func (p paymentSession) clone(db *gorm.DB) paymentSession {
	p.paymentSessionDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p paymentSession) replaceDB(db *gorm.DB) paymentSession {
	p.paymentSessionDo.ReplaceDB(db)
	return p
}

type paymentSessionDo struct{ gen.DO }

func (p paymentSessionDo) Debug() *paymentSessionDo {
	return p.withDO(p.DO.Debug())
}

func (p paymentSessionDo) WithContext(ctx context.Context) *paymentSessionDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p paymentSessionDo) ReadDB() *paymentSessionDo {
	return p.Clauses(dbresolver.Read)
}

func (p paymentSessionDo) WriteDB() *paymentSessionDo {
	return p.Clauses(dbresolver.Write)
}

func (p paymentSessionDo) Session(config *gorm.Session) *paymentSessionDo {
	return p.withDO(p.DO.Session(config))
}

func (p paymentSessionDo) Clauses(conds ...clause.Expression) *paymentSessionDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p paymentSessionDo) Returning(value interface{}, columns ...string) *paymentSessionDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p paymentSessionDo) Not(conds ...gen.Condition) *paymentSessionDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p paymentSessionDo) Or(conds ...gen.Condition) *paymentSessionDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p paymentSessionDo) Select(conds ...field.Expr) *paymentSessionDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p paymentSessionDo) Where(conds ...gen.Condition) *paymentSessionDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p paymentSessionDo) Order(conds ...field.Expr) *paymentSessionDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p paymentSessionDo) Distinct(cols ...field.Expr) *paymentSessionDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p paymentSessionDo) Omit(cols ...field.Expr) *paymentSessionDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p paymentSessionDo) Join(table schema.Tabler, on ...field.Expr) *paymentSessionDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p paymentSessionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *paymentSessionDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p paymentSessionDo) RightJoin(table schema.Tabler, on ...field.Expr) *paymentSessionDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p paymentSessionDo) Group(cols ...field.Expr) *paymentSessionDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p paymentSessionDo) Having(conds ...gen.Condition) *paymentSessionDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p paymentSessionDo) Limit(limit int) *paymentSessionDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p paymentSessionDo) Offset(offset int) *paymentSessionDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p paymentSessionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *paymentSessionDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p paymentSessionDo) Unscoped() *paymentSessionDo {
	return p.withDO(p.DO.Unscoped())
}

func (p paymentSessionDo) Create(values ...*model.PaymentSession) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p paymentSessionDo) CreateInBatches(values []*model.PaymentSession, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p paymentSessionDo) Save(values ...*model.PaymentSession) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p paymentSessionDo) First() (*model.PaymentSession, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentSession), nil
	}
}

func (p paymentSessionDo) Take() (*model.PaymentSession, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentSession), nil
	}
}

func (p paymentSessionDo) Last() (*model.PaymentSession, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentSession), nil
	}
}

func (p paymentSessionDo) Find() ([]*model.PaymentSession, error) {
	result, err := p.DO.Find()
	return result.([]*model.PaymentSession), err
}

func (p paymentSessionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PaymentSession, err error) {
	buf := make([]*model.PaymentSession, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p paymentSessionDo) FindInBatches(result *[]*model.PaymentSession, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p paymentSessionDo) Attrs(attrs ...field.AssignExpr) *paymentSessionDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p paymentSessionDo) Assign(attrs ...field.AssignExpr) *paymentSessionDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p paymentSessionDo) Joins(fields ...field.RelationField) *paymentSessionDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p paymentSessionDo) Preload(fields ...field.RelationField) *paymentSessionDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p paymentSessionDo) FirstOrInit() (*model.PaymentSession, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentSession), nil
	}
}

func (p paymentSessionDo) FirstOrCreate() (*model.PaymentSession, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentSession), nil
	}
}

func (p paymentSessionDo) FindByPage(offset int, limit int) (result []*model.PaymentSession, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p paymentSessionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p paymentSessionDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p paymentSessionDo) Delete(models ...*model.PaymentSession) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *paymentSessionDo) withDO(do gen.Dao) *paymentSessionDo {
	p.DO = *do.(*gen.DO)
	return p
}
