// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newShippingOption(db *gorm.DB, opts ...gen.DOOption) shippingOption {
	_shippingOption := shippingOption{}

	_shippingOption.shippingOptionDo.UseDB(db, opts...)
	_shippingOption.shippingOptionDo.UseModel(&model.ShippingOption{})

	tableName := _shippingOption.shippingOptionDo.TableName()
	_shippingOption.ALL = field.NewAsterisk(tableName)
	_shippingOption.ID = field.NewString(tableName, "id")
	_shippingOption.Name = field.NewString(tableName, "name")
	_shippingOption.PriceType = field.NewString(tableName, "price_type")
	_shippingOption.ServiceZoneID = field.NewString(tableName, "service_zone_id")
	_shippingOption.ShippingProfileID = field.NewString(tableName, "shipping_profile_id")
	_shippingOption.ServiceProviderID = field.NewString(tableName, "service_provider_id")
	_shippingOption.Data = field.NewString(tableName, "data")
	_shippingOption.Metadata = field.NewString(tableName, "metadata")
	_shippingOption.ShippingOptionTypeID = field.NewString(tableName, "shipping_option_type_id")
	_shippingOption.CreatedAt = field.NewTime(tableName, "created_at")
	_shippingOption.UpdatedAt = field.NewTime(tableName, "updated_at")
	_shippingOption.DeletedAt = field.NewField(tableName, "deleted_at")

	_shippingOption.fillFieldMap()

	return _shippingOption
}

type shippingOption struct {
	shippingOptionDo shippingOptionDo

	ALL                  field.Asterisk
	ID                   field.String
	Name                 field.String
	PriceType            field.String
	ServiceZoneID        field.String
	ShippingProfileID    field.String
	ServiceProviderID    field.String
	Data                 field.String
	Metadata             field.String
	ShippingOptionTypeID field.String
	CreatedAt            field.Time
	UpdatedAt            field.Time
	DeletedAt            field.Field

	fieldMap map[string]field.Expr
}

func (s shippingOption) Table(newTableName string) *shippingOption {
	s.shippingOptionDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s shippingOption) As(alias string) *shippingOption {
	s.shippingOptionDo.DO = *(s.shippingOptionDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *shippingOption) updateTableName(table string) *shippingOption {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.Name = field.NewString(table, "name")
	s.PriceType = field.NewString(table, "price_type")
	s.ServiceZoneID = field.NewString(table, "service_zone_id")
	s.ShippingProfileID = field.NewString(table, "shipping_profile_id")
	s.ServiceProviderID = field.NewString(table, "service_provider_id")
	s.Data = field.NewString(table, "data")
	s.Metadata = field.NewString(table, "metadata")
	s.ShippingOptionTypeID = field.NewString(table, "shipping_option_type_id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *shippingOption) WithContext(ctx context.Context) *shippingOptionDo {
	return s.shippingOptionDo.WithContext(ctx)
}

func (s shippingOption) TableName() string { return s.shippingOptionDo.TableName() }

func (s shippingOption) Alias() string { return s.shippingOptionDo.Alias() }

func (s shippingOption) Columns(cols ...field.Expr) gen.Columns {
	return s.shippingOptionDo.Columns(cols...)
}

func (s *shippingOption) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *shippingOption) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 12)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["price_type"] = s.PriceType
	s.fieldMap["service_zone_id"] = s.ServiceZoneID
	s.fieldMap["shipping_profile_id"] = s.ShippingProfileID
	s.fieldMap["service_provider_id"] = s.ServiceProviderID
	s.fieldMap["data"] = s.Data
	s.fieldMap["metadata"] = s.Metadata
	s.fieldMap["shipping_option_type_id"] = s.ShippingOptionTypeID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s shippingOption) clone(db *gorm.DB) shippingOption {
	s.shippingOptionDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s shippingOption) replaceDB(db *gorm.DB) shippingOption {
	s.shippingOptionDo.ReplaceDB(db)
	return s
}

type shippingOptionDo struct{ gen.DO }

func (s shippingOptionDo) Debug() *shippingOptionDo {
	return s.withDO(s.DO.Debug())
}

func (s shippingOptionDo) WithContext(ctx context.Context) *shippingOptionDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s shippingOptionDo) ReadDB() *shippingOptionDo {
	return s.Clauses(dbresolver.Read)
}

func (s shippingOptionDo) WriteDB() *shippingOptionDo {
	return s.Clauses(dbresolver.Write)
}

func (s shippingOptionDo) Session(config *gorm.Session) *shippingOptionDo {
	return s.withDO(s.DO.Session(config))
}

func (s shippingOptionDo) Clauses(conds ...clause.Expression) *shippingOptionDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s shippingOptionDo) Returning(value interface{}, columns ...string) *shippingOptionDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s shippingOptionDo) Not(conds ...gen.Condition) *shippingOptionDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s shippingOptionDo) Or(conds ...gen.Condition) *shippingOptionDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s shippingOptionDo) Select(conds ...field.Expr) *shippingOptionDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s shippingOptionDo) Where(conds ...gen.Condition) *shippingOptionDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s shippingOptionDo) Order(conds ...field.Expr) *shippingOptionDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s shippingOptionDo) Distinct(cols ...field.Expr) *shippingOptionDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s shippingOptionDo) Omit(cols ...field.Expr) *shippingOptionDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s shippingOptionDo) Join(table schema.Tabler, on ...field.Expr) *shippingOptionDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s shippingOptionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *shippingOptionDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s shippingOptionDo) RightJoin(table schema.Tabler, on ...field.Expr) *shippingOptionDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s shippingOptionDo) Group(cols ...field.Expr) *shippingOptionDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s shippingOptionDo) Having(conds ...gen.Condition) *shippingOptionDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s shippingOptionDo) Limit(limit int) *shippingOptionDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s shippingOptionDo) Offset(offset int) *shippingOptionDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s shippingOptionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *shippingOptionDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s shippingOptionDo) Unscoped() *shippingOptionDo {
	return s.withDO(s.DO.Unscoped())
}

func (s shippingOptionDo) Create(values ...*model.ShippingOption) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s shippingOptionDo) CreateInBatches(values []*model.ShippingOption, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s shippingOptionDo) Save(values ...*model.ShippingOption) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s shippingOptionDo) First() (*model.ShippingOption, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShippingOption), nil
	}
}

func (s shippingOptionDo) Take() (*model.ShippingOption, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShippingOption), nil
	}
}

func (s shippingOptionDo) Last() (*model.ShippingOption, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShippingOption), nil
	}
}

func (s shippingOptionDo) Find() ([]*model.ShippingOption, error) {
	result, err := s.DO.Find()
	return result.([]*model.ShippingOption), err
}

func (s shippingOptionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ShippingOption, err error) {
	buf := make([]*model.ShippingOption, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s shippingOptionDo) FindInBatches(result *[]*model.ShippingOption, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s shippingOptionDo) Attrs(attrs ...field.AssignExpr) *shippingOptionDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s shippingOptionDo) Assign(attrs ...field.AssignExpr) *shippingOptionDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s shippingOptionDo) Joins(fields ...field.RelationField) *shippingOptionDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s shippingOptionDo) Preload(fields ...field.RelationField) *shippingOptionDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s shippingOptionDo) FirstOrInit() (*model.ShippingOption, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShippingOption), nil
	}
}

func (s shippingOptionDo) FirstOrCreate() (*model.ShippingOption, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShippingOption), nil
	}
}

func (s shippingOptionDo) FindByPage(offset int, limit int) (result []*model.ShippingOption, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s shippingOptionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s shippingOptionDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s shippingOptionDo) Delete(models ...*model.ShippingOption) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *shippingOptionDo) withDO(do gen.Dao) *shippingOptionDo {
	s.DO = *do.(*gen.DO)
	return s
}
