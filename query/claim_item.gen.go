// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newClaimItem(db *gorm.DB, opts ...gen.DOOption) claimItem {
	_claimItem := claimItem{}

	_claimItem.claimItemDo.UseDB(db, opts...)
	_claimItem.claimItemDo.UseModel(&model.ClaimItem{})

	tableName := _claimItem.claimItemDo.TableName()
	_claimItem.ALL = field.NewAsterisk(tableName)
	_claimItem.ID = field.NewString(tableName, "id")
	_claimItem.ClaimOrderID = field.NewString(tableName, "claim_order_id")
	_claimItem.ItemID = field.NewString(tableName, "item_id")
	_claimItem.VariantID = field.NewString(tableName, "variant_id")
	_claimItem.Reason = field.NewString(tableName, "reason")
	_claimItem.Note = field.NewString(tableName, "note")
	_claimItem.Quantity = field.NewInt32(tableName, "quantity")
	_claimItem.CreatedAt = field.NewTime(tableName, "created_at")
	_claimItem.UpdatedAt = field.NewTime(tableName, "updated_at")
	_claimItem.DeletedAt = field.NewField(tableName, "deleted_at")
	_claimItem.Metadata = field.NewString(tableName, "metadata")

	_claimItem.fillFieldMap()

	return _claimItem
}

type claimItem struct {
	claimItemDo claimItemDo

	ALL          field.Asterisk
	ID           field.String
	ClaimOrderID field.String
	ItemID       field.String
	VariantID    field.String
	Reason       field.String
	Note         field.String
	Quantity     field.Int32
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field
	Metadata     field.String

	fieldMap map[string]field.Expr
}

func (c claimItem) Table(newTableName string) *claimItem {
	c.claimItemDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c claimItem) As(alias string) *claimItem {
	c.claimItemDo.DO = *(c.claimItemDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *claimItem) updateTableName(table string) *claimItem {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewString(table, "id")
	c.ClaimOrderID = field.NewString(table, "claim_order_id")
	c.ItemID = field.NewString(table, "item_id")
	c.VariantID = field.NewString(table, "variant_id")
	c.Reason = field.NewString(table, "reason")
	c.Note = field.NewString(table, "note")
	c.Quantity = field.NewInt32(table, "quantity")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.Metadata = field.NewString(table, "metadata")

	c.fillFieldMap()

	return c
}

func (c *claimItem) WithContext(ctx context.Context) *claimItemDo {
	return c.claimItemDo.WithContext(ctx)
}

func (c claimItem) TableName() string { return c.claimItemDo.TableName() }

func (c claimItem) Alias() string { return c.claimItemDo.Alias() }

func (c claimItem) Columns(cols ...field.Expr) gen.Columns { return c.claimItemDo.Columns(cols...) }

func (c *claimItem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *claimItem) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 11)
	c.fieldMap["id"] = c.ID
	c.fieldMap["claim_order_id"] = c.ClaimOrderID
	c.fieldMap["item_id"] = c.ItemID
	c.fieldMap["variant_id"] = c.VariantID
	c.fieldMap["reason"] = c.Reason
	c.fieldMap["note"] = c.Note
	c.fieldMap["quantity"] = c.Quantity
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["metadata"] = c.Metadata
}

func (c claimItem) clone(db *gorm.DB) claimItem {
	c.claimItemDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c claimItem) replaceDB(db *gorm.DB) claimItem {
	c.claimItemDo.ReplaceDB(db)
	return c
}

type claimItemDo struct{ gen.DO }

func (c claimItemDo) Debug() *claimItemDo {
	return c.withDO(c.DO.Debug())
}

func (c claimItemDo) WithContext(ctx context.Context) *claimItemDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c claimItemDo) ReadDB() *claimItemDo {
	return c.Clauses(dbresolver.Read)
}

func (c claimItemDo) WriteDB() *claimItemDo {
	return c.Clauses(dbresolver.Write)
}

func (c claimItemDo) Session(config *gorm.Session) *claimItemDo {
	return c.withDO(c.DO.Session(config))
}

func (c claimItemDo) Clauses(conds ...clause.Expression) *claimItemDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c claimItemDo) Returning(value interface{}, columns ...string) *claimItemDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c claimItemDo) Not(conds ...gen.Condition) *claimItemDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c claimItemDo) Or(conds ...gen.Condition) *claimItemDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c claimItemDo) Select(conds ...field.Expr) *claimItemDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c claimItemDo) Where(conds ...gen.Condition) *claimItemDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c claimItemDo) Order(conds ...field.Expr) *claimItemDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c claimItemDo) Distinct(cols ...field.Expr) *claimItemDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c claimItemDo) Omit(cols ...field.Expr) *claimItemDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c claimItemDo) Join(table schema.Tabler, on ...field.Expr) *claimItemDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c claimItemDo) LeftJoin(table schema.Tabler, on ...field.Expr) *claimItemDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c claimItemDo) RightJoin(table schema.Tabler, on ...field.Expr) *claimItemDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c claimItemDo) Group(cols ...field.Expr) *claimItemDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c claimItemDo) Having(conds ...gen.Condition) *claimItemDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c claimItemDo) Limit(limit int) *claimItemDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c claimItemDo) Offset(offset int) *claimItemDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c claimItemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *claimItemDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c claimItemDo) Unscoped() *claimItemDo {
	return c.withDO(c.DO.Unscoped())
}

func (c claimItemDo) Create(values ...*model.ClaimItem) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c claimItemDo) CreateInBatches(values []*model.ClaimItem, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c claimItemDo) Save(values ...*model.ClaimItem) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c claimItemDo) First() (*model.ClaimItem, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClaimItem), nil
	}
}

func (c claimItemDo) Take() (*model.ClaimItem, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClaimItem), nil
	}
}

func (c claimItemDo) Last() (*model.ClaimItem, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClaimItem), nil
	}
}

func (c claimItemDo) Find() ([]*model.ClaimItem, error) {
	result, err := c.DO.Find()
	return result.([]*model.ClaimItem), err
}

func (c claimItemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ClaimItem, err error) {
	buf := make([]*model.ClaimItem, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c claimItemDo) FindInBatches(result *[]*model.ClaimItem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c claimItemDo) Attrs(attrs ...field.AssignExpr) *claimItemDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c claimItemDo) Assign(attrs ...field.AssignExpr) *claimItemDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c claimItemDo) Joins(fields ...field.RelationField) *claimItemDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c claimItemDo) Preload(fields ...field.RelationField) *claimItemDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c claimItemDo) FirstOrInit() (*model.ClaimItem, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClaimItem), nil
	}
}

func (c claimItemDo) FirstOrCreate() (*model.ClaimItem, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClaimItem), nil
	}
}

func (c claimItemDo) FindByPage(offset int, limit int) (result []*model.ClaimItem, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c claimItemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c claimItemDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c claimItemDo) Delete(models ...*model.ClaimItem) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *claimItemDo) withDO(do gen.Dao) *claimItemDo {
	c.DO = *do.(*gen.DO)
	return c
}
