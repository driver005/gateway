// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newRegionCountry(db *gorm.DB, opts ...gen.DOOption) regionCountry {
	_regionCountry := regionCountry{}

	_regionCountry.regionCountryDo.UseDB(db, opts...)
	_regionCountry.regionCountryDo.UseModel(&model.RegionCountry{})

	tableName := _regionCountry.regionCountryDo.TableName()
	_regionCountry.ALL = field.NewAsterisk(tableName)
	_regionCountry.ID = field.NewString(tableName, "id")
	_regionCountry.Iso2 = field.NewString(tableName, "iso_2")
	_regionCountry.Iso3 = field.NewString(tableName, "iso_3")
	_regionCountry.NumCode = field.NewInt32(tableName, "num_code")
	_regionCountry.Name = field.NewString(tableName, "name")
	_regionCountry.DisplayName = field.NewString(tableName, "display_name")
	_regionCountry.RegionID = field.NewString(tableName, "region_id")

	_regionCountry.fillFieldMap()

	return _regionCountry
}

type regionCountry struct {
	regionCountryDo regionCountryDo

	ALL         field.Asterisk
	ID          field.String
	Iso2        field.String
	Iso3        field.String
	NumCode     field.Int32
	Name        field.String
	DisplayName field.String
	RegionID    field.String

	fieldMap map[string]field.Expr
}

func (r regionCountry) Table(newTableName string) *regionCountry {
	r.regionCountryDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r regionCountry) As(alias string) *regionCountry {
	r.regionCountryDo.DO = *(r.regionCountryDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *regionCountry) updateTableName(table string) *regionCountry {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewString(table, "id")
	r.Iso2 = field.NewString(table, "iso_2")
	r.Iso3 = field.NewString(table, "iso_3")
	r.NumCode = field.NewInt32(table, "num_code")
	r.Name = field.NewString(table, "name")
	r.DisplayName = field.NewString(table, "display_name")
	r.RegionID = field.NewString(table, "region_id")

	r.fillFieldMap()

	return r
}

func (r *regionCountry) WithContext(ctx context.Context) *regionCountryDo {
	return r.regionCountryDo.WithContext(ctx)
}

func (r regionCountry) TableName() string { return r.regionCountryDo.TableName() }

func (r regionCountry) Alias() string { return r.regionCountryDo.Alias() }

func (r regionCountry) Columns(cols ...field.Expr) gen.Columns {
	return r.regionCountryDo.Columns(cols...)
}

func (r *regionCountry) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *regionCountry) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 7)
	r.fieldMap["id"] = r.ID
	r.fieldMap["iso_2"] = r.Iso2
	r.fieldMap["iso_3"] = r.Iso3
	r.fieldMap["num_code"] = r.NumCode
	r.fieldMap["name"] = r.Name
	r.fieldMap["display_name"] = r.DisplayName
	r.fieldMap["region_id"] = r.RegionID
}

func (r regionCountry) clone(db *gorm.DB) regionCountry {
	r.regionCountryDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r regionCountry) replaceDB(db *gorm.DB) regionCountry {
	r.regionCountryDo.ReplaceDB(db)
	return r
}

type regionCountryDo struct{ gen.DO }

func (r regionCountryDo) Debug() *regionCountryDo {
	return r.withDO(r.DO.Debug())
}

func (r regionCountryDo) WithContext(ctx context.Context) *regionCountryDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r regionCountryDo) ReadDB() *regionCountryDo {
	return r.Clauses(dbresolver.Read)
}

func (r regionCountryDo) WriteDB() *regionCountryDo {
	return r.Clauses(dbresolver.Write)
}

func (r regionCountryDo) Session(config *gorm.Session) *regionCountryDo {
	return r.withDO(r.DO.Session(config))
}

func (r regionCountryDo) Clauses(conds ...clause.Expression) *regionCountryDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r regionCountryDo) Returning(value interface{}, columns ...string) *regionCountryDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r regionCountryDo) Not(conds ...gen.Condition) *regionCountryDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r regionCountryDo) Or(conds ...gen.Condition) *regionCountryDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r regionCountryDo) Select(conds ...field.Expr) *regionCountryDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r regionCountryDo) Where(conds ...gen.Condition) *regionCountryDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r regionCountryDo) Order(conds ...field.Expr) *regionCountryDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r regionCountryDo) Distinct(cols ...field.Expr) *regionCountryDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r regionCountryDo) Omit(cols ...field.Expr) *regionCountryDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r regionCountryDo) Join(table schema.Tabler, on ...field.Expr) *regionCountryDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r regionCountryDo) LeftJoin(table schema.Tabler, on ...field.Expr) *regionCountryDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r regionCountryDo) RightJoin(table schema.Tabler, on ...field.Expr) *regionCountryDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r regionCountryDo) Group(cols ...field.Expr) *regionCountryDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r regionCountryDo) Having(conds ...gen.Condition) *regionCountryDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r regionCountryDo) Limit(limit int) *regionCountryDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r regionCountryDo) Offset(offset int) *regionCountryDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r regionCountryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *regionCountryDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r regionCountryDo) Unscoped() *regionCountryDo {
	return r.withDO(r.DO.Unscoped())
}

func (r regionCountryDo) Create(values ...*model.RegionCountry) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r regionCountryDo) CreateInBatches(values []*model.RegionCountry, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r regionCountryDo) Save(values ...*model.RegionCountry) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r regionCountryDo) First() (*model.RegionCountry, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RegionCountry), nil
	}
}

func (r regionCountryDo) Take() (*model.RegionCountry, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RegionCountry), nil
	}
}

func (r regionCountryDo) Last() (*model.RegionCountry, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RegionCountry), nil
	}
}

func (r regionCountryDo) Find() ([]*model.RegionCountry, error) {
	result, err := r.DO.Find()
	return result.([]*model.RegionCountry), err
}

func (r regionCountryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RegionCountry, err error) {
	buf := make([]*model.RegionCountry, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r regionCountryDo) FindInBatches(result *[]*model.RegionCountry, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r regionCountryDo) Attrs(attrs ...field.AssignExpr) *regionCountryDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r regionCountryDo) Assign(attrs ...field.AssignExpr) *regionCountryDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r regionCountryDo) Joins(fields ...field.RelationField) *regionCountryDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r regionCountryDo) Preload(fields ...field.RelationField) *regionCountryDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r regionCountryDo) FirstOrInit() (*model.RegionCountry, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RegionCountry), nil
	}
}

func (r regionCountryDo) FirstOrCreate() (*model.RegionCountry, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RegionCountry), nil
	}
}

func (r regionCountryDo) FindByPage(offset int, limit int) (result []*model.RegionCountry, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r regionCountryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r regionCountryDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r regionCountryDo) Delete(models ...*model.RegionCountry) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *regionCountryDo) withDO(do gen.Dao) *regionCountryDo {
	r.DO = *do.(*gen.DO)
	return r
}
