// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newDiscountConditionProduct(db *gorm.DB, opts ...gen.DOOption) discountConditionProduct {
	_discountConditionProduct := discountConditionProduct{}

	_discountConditionProduct.discountConditionProductDo.UseDB(db, opts...)
	_discountConditionProduct.discountConditionProductDo.UseModel(&model.DiscountConditionProduct{})

	tableName := _discountConditionProduct.discountConditionProductDo.TableName()
	_discountConditionProduct.ALL = field.NewAsterisk(tableName)
	_discountConditionProduct.ProductID = field.NewString(tableName, "product_id")
	_discountConditionProduct.ConditionID = field.NewString(tableName, "condition_id")
	_discountConditionProduct.CreatedAt = field.NewTime(tableName, "created_at")
	_discountConditionProduct.UpdatedAt = field.NewTime(tableName, "updated_at")
	_discountConditionProduct.Metadata = field.NewString(tableName, "metadata")

	_discountConditionProduct.fillFieldMap()

	return _discountConditionProduct
}

type discountConditionProduct struct {
	discountConditionProductDo discountConditionProductDo

	ALL         field.Asterisk
	ProductID   field.String
	ConditionID field.String
	CreatedAt   field.Time
	UpdatedAt   field.Time
	Metadata    field.String

	fieldMap map[string]field.Expr
}

func (d discountConditionProduct) Table(newTableName string) *discountConditionProduct {
	d.discountConditionProductDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d discountConditionProduct) As(alias string) *discountConditionProduct {
	d.discountConditionProductDo.DO = *(d.discountConditionProductDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *discountConditionProduct) updateTableName(table string) *discountConditionProduct {
	d.ALL = field.NewAsterisk(table)
	d.ProductID = field.NewString(table, "product_id")
	d.ConditionID = field.NewString(table, "condition_id")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.Metadata = field.NewString(table, "metadata")

	d.fillFieldMap()

	return d
}

func (d *discountConditionProduct) WithContext(ctx context.Context) *discountConditionProductDo {
	return d.discountConditionProductDo.WithContext(ctx)
}

func (d discountConditionProduct) TableName() string { return d.discountConditionProductDo.TableName() }

func (d discountConditionProduct) Alias() string { return d.discountConditionProductDo.Alias() }

func (d discountConditionProduct) Columns(cols ...field.Expr) gen.Columns {
	return d.discountConditionProductDo.Columns(cols...)
}

func (d *discountConditionProduct) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *discountConditionProduct) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 5)
	d.fieldMap["product_id"] = d.ProductID
	d.fieldMap["condition_id"] = d.ConditionID
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["metadata"] = d.Metadata
}

func (d discountConditionProduct) clone(db *gorm.DB) discountConditionProduct {
	d.discountConditionProductDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d discountConditionProduct) replaceDB(db *gorm.DB) discountConditionProduct {
	d.discountConditionProductDo.ReplaceDB(db)
	return d
}

type discountConditionProductDo struct{ gen.DO }

func (d discountConditionProductDo) Debug() *discountConditionProductDo {
	return d.withDO(d.DO.Debug())
}

func (d discountConditionProductDo) WithContext(ctx context.Context) *discountConditionProductDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d discountConditionProductDo) ReadDB() *discountConditionProductDo {
	return d.Clauses(dbresolver.Read)
}

func (d discountConditionProductDo) WriteDB() *discountConditionProductDo {
	return d.Clauses(dbresolver.Write)
}

func (d discountConditionProductDo) Session(config *gorm.Session) *discountConditionProductDo {
	return d.withDO(d.DO.Session(config))
}

func (d discountConditionProductDo) Clauses(conds ...clause.Expression) *discountConditionProductDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d discountConditionProductDo) Returning(value interface{}, columns ...string) *discountConditionProductDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d discountConditionProductDo) Not(conds ...gen.Condition) *discountConditionProductDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d discountConditionProductDo) Or(conds ...gen.Condition) *discountConditionProductDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d discountConditionProductDo) Select(conds ...field.Expr) *discountConditionProductDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d discountConditionProductDo) Where(conds ...gen.Condition) *discountConditionProductDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d discountConditionProductDo) Order(conds ...field.Expr) *discountConditionProductDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d discountConditionProductDo) Distinct(cols ...field.Expr) *discountConditionProductDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d discountConditionProductDo) Omit(cols ...field.Expr) *discountConditionProductDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d discountConditionProductDo) Join(table schema.Tabler, on ...field.Expr) *discountConditionProductDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d discountConditionProductDo) LeftJoin(table schema.Tabler, on ...field.Expr) *discountConditionProductDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d discountConditionProductDo) RightJoin(table schema.Tabler, on ...field.Expr) *discountConditionProductDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d discountConditionProductDo) Group(cols ...field.Expr) *discountConditionProductDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d discountConditionProductDo) Having(conds ...gen.Condition) *discountConditionProductDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d discountConditionProductDo) Limit(limit int) *discountConditionProductDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d discountConditionProductDo) Offset(offset int) *discountConditionProductDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d discountConditionProductDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *discountConditionProductDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d discountConditionProductDo) Unscoped() *discountConditionProductDo {
	return d.withDO(d.DO.Unscoped())
}

func (d discountConditionProductDo) Create(values ...*model.DiscountConditionProduct) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d discountConditionProductDo) CreateInBatches(values []*model.DiscountConditionProduct, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d discountConditionProductDo) Save(values ...*model.DiscountConditionProduct) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d discountConditionProductDo) First() (*model.DiscountConditionProduct, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiscountConditionProduct), nil
	}
}

func (d discountConditionProductDo) Take() (*model.DiscountConditionProduct, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiscountConditionProduct), nil
	}
}

func (d discountConditionProductDo) Last() (*model.DiscountConditionProduct, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiscountConditionProduct), nil
	}
}

func (d discountConditionProductDo) Find() ([]*model.DiscountConditionProduct, error) {
	result, err := d.DO.Find()
	return result.([]*model.DiscountConditionProduct), err
}

func (d discountConditionProductDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DiscountConditionProduct, err error) {
	buf := make([]*model.DiscountConditionProduct, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d discountConditionProductDo) FindInBatches(result *[]*model.DiscountConditionProduct, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d discountConditionProductDo) Attrs(attrs ...field.AssignExpr) *discountConditionProductDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d discountConditionProductDo) Assign(attrs ...field.AssignExpr) *discountConditionProductDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d discountConditionProductDo) Joins(fields ...field.RelationField) *discountConditionProductDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d discountConditionProductDo) Preload(fields ...field.RelationField) *discountConditionProductDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d discountConditionProductDo) FirstOrInit() (*model.DiscountConditionProduct, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiscountConditionProduct), nil
	}
}

func (d discountConditionProductDo) FirstOrCreate() (*model.DiscountConditionProduct, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiscountConditionProduct), nil
	}
}

func (d discountConditionProductDo) FindByPage(offset int, limit int) (result []*model.DiscountConditionProduct, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d discountConditionProductDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d discountConditionProductDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d discountConditionProductDo) Delete(models ...*model.DiscountConditionProduct) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *discountConditionProductDo) withDO(do gen.Dao) *discountConditionProductDo {
	d.DO = *do.(*gen.DO)
	return d
}
