// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newClaimOrder(db *gorm.DB, opts ...gen.DOOption) claimOrder {
	_claimOrder := claimOrder{}

	_claimOrder.claimOrderDo.UseDB(db, opts...)
	_claimOrder.claimOrderDo.UseModel(&model.ClaimOrder{})

	tableName := _claimOrder.claimOrderDo.TableName()
	_claimOrder.ALL = field.NewAsterisk(tableName)
	_claimOrder.ID = field.NewString(tableName, "id")
	_claimOrder.PaymentStatus = field.NewString(tableName, "payment_status")
	_claimOrder.FulfillmentStatus = field.NewString(tableName, "fulfillment_status")
	_claimOrder.Type = field.NewString(tableName, "type")
	_claimOrder.OrderID = field.NewString(tableName, "order_id")
	_claimOrder.ShippingAddressID = field.NewString(tableName, "shipping_address_id")
	_claimOrder.RefundAmount = field.NewInt32(tableName, "refund_amount")
	_claimOrder.CanceledAt = field.NewTime(tableName, "canceled_at")
	_claimOrder.CreatedAt = field.NewTime(tableName, "created_at")
	_claimOrder.UpdatedAt = field.NewTime(tableName, "updated_at")
	_claimOrder.DeletedAt = field.NewField(tableName, "deleted_at")
	_claimOrder.Metadata = field.NewString(tableName, "metadata")
	_claimOrder.IdempotencyKey = field.NewString(tableName, "idempotency_key")
	_claimOrder.NoNotification = field.NewBool(tableName, "no_notification")

	_claimOrder.fillFieldMap()

	return _claimOrder
}

type claimOrder struct {
	claimOrderDo claimOrderDo

	ALL               field.Asterisk
	ID                field.String
	PaymentStatus     field.String
	FulfillmentStatus field.String
	Type              field.String
	OrderID           field.String
	ShippingAddressID field.String
	RefundAmount      field.Int32
	CanceledAt        field.Time
	CreatedAt         field.Time
	UpdatedAt         field.Time
	DeletedAt         field.Field
	Metadata          field.String
	IdempotencyKey    field.String
	NoNotification    field.Bool

	fieldMap map[string]field.Expr
}

func (c claimOrder) Table(newTableName string) *claimOrder {
	c.claimOrderDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c claimOrder) As(alias string) *claimOrder {
	c.claimOrderDo.DO = *(c.claimOrderDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *claimOrder) updateTableName(table string) *claimOrder {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewString(table, "id")
	c.PaymentStatus = field.NewString(table, "payment_status")
	c.FulfillmentStatus = field.NewString(table, "fulfillment_status")
	c.Type = field.NewString(table, "type")
	c.OrderID = field.NewString(table, "order_id")
	c.ShippingAddressID = field.NewString(table, "shipping_address_id")
	c.RefundAmount = field.NewInt32(table, "refund_amount")
	c.CanceledAt = field.NewTime(table, "canceled_at")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.Metadata = field.NewString(table, "metadata")
	c.IdempotencyKey = field.NewString(table, "idempotency_key")
	c.NoNotification = field.NewBool(table, "no_notification")

	c.fillFieldMap()

	return c
}

func (c *claimOrder) WithContext(ctx context.Context) *claimOrderDo {
	return c.claimOrderDo.WithContext(ctx)
}

func (c claimOrder) TableName() string { return c.claimOrderDo.TableName() }

func (c claimOrder) Alias() string { return c.claimOrderDo.Alias() }

func (c claimOrder) Columns(cols ...field.Expr) gen.Columns { return c.claimOrderDo.Columns(cols...) }

func (c *claimOrder) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *claimOrder) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 14)
	c.fieldMap["id"] = c.ID
	c.fieldMap["payment_status"] = c.PaymentStatus
	c.fieldMap["fulfillment_status"] = c.FulfillmentStatus
	c.fieldMap["type"] = c.Type
	c.fieldMap["order_id"] = c.OrderID
	c.fieldMap["shipping_address_id"] = c.ShippingAddressID
	c.fieldMap["refund_amount"] = c.RefundAmount
	c.fieldMap["canceled_at"] = c.CanceledAt
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["metadata"] = c.Metadata
	c.fieldMap["idempotency_key"] = c.IdempotencyKey
	c.fieldMap["no_notification"] = c.NoNotification
}

func (c claimOrder) clone(db *gorm.DB) claimOrder {
	c.claimOrderDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c claimOrder) replaceDB(db *gorm.DB) claimOrder {
	c.claimOrderDo.ReplaceDB(db)
	return c
}

type claimOrderDo struct{ gen.DO }

func (c claimOrderDo) Debug() *claimOrderDo {
	return c.withDO(c.DO.Debug())
}

func (c claimOrderDo) WithContext(ctx context.Context) *claimOrderDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c claimOrderDo) ReadDB() *claimOrderDo {
	return c.Clauses(dbresolver.Read)
}

func (c claimOrderDo) WriteDB() *claimOrderDo {
	return c.Clauses(dbresolver.Write)
}

func (c claimOrderDo) Session(config *gorm.Session) *claimOrderDo {
	return c.withDO(c.DO.Session(config))
}

func (c claimOrderDo) Clauses(conds ...clause.Expression) *claimOrderDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c claimOrderDo) Returning(value interface{}, columns ...string) *claimOrderDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c claimOrderDo) Not(conds ...gen.Condition) *claimOrderDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c claimOrderDo) Or(conds ...gen.Condition) *claimOrderDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c claimOrderDo) Select(conds ...field.Expr) *claimOrderDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c claimOrderDo) Where(conds ...gen.Condition) *claimOrderDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c claimOrderDo) Order(conds ...field.Expr) *claimOrderDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c claimOrderDo) Distinct(cols ...field.Expr) *claimOrderDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c claimOrderDo) Omit(cols ...field.Expr) *claimOrderDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c claimOrderDo) Join(table schema.Tabler, on ...field.Expr) *claimOrderDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c claimOrderDo) LeftJoin(table schema.Tabler, on ...field.Expr) *claimOrderDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c claimOrderDo) RightJoin(table schema.Tabler, on ...field.Expr) *claimOrderDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c claimOrderDo) Group(cols ...field.Expr) *claimOrderDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c claimOrderDo) Having(conds ...gen.Condition) *claimOrderDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c claimOrderDo) Limit(limit int) *claimOrderDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c claimOrderDo) Offset(offset int) *claimOrderDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c claimOrderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *claimOrderDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c claimOrderDo) Unscoped() *claimOrderDo {
	return c.withDO(c.DO.Unscoped())
}

func (c claimOrderDo) Create(values ...*model.ClaimOrder) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c claimOrderDo) CreateInBatches(values []*model.ClaimOrder, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c claimOrderDo) Save(values ...*model.ClaimOrder) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c claimOrderDo) First() (*model.ClaimOrder, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClaimOrder), nil
	}
}

func (c claimOrderDo) Take() (*model.ClaimOrder, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClaimOrder), nil
	}
}

func (c claimOrderDo) Last() (*model.ClaimOrder, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClaimOrder), nil
	}
}

func (c claimOrderDo) Find() ([]*model.ClaimOrder, error) {
	result, err := c.DO.Find()
	return result.([]*model.ClaimOrder), err
}

func (c claimOrderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ClaimOrder, err error) {
	buf := make([]*model.ClaimOrder, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c claimOrderDo) FindInBatches(result *[]*model.ClaimOrder, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c claimOrderDo) Attrs(attrs ...field.AssignExpr) *claimOrderDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c claimOrderDo) Assign(attrs ...field.AssignExpr) *claimOrderDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c claimOrderDo) Joins(fields ...field.RelationField) *claimOrderDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c claimOrderDo) Preload(fields ...field.RelationField) *claimOrderDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c claimOrderDo) FirstOrInit() (*model.ClaimOrder, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClaimOrder), nil
	}
}

func (c claimOrderDo) FirstOrCreate() (*model.ClaimOrder, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClaimOrder), nil
	}
}

func (c claimOrderDo) FindByPage(offset int, limit int) (result []*model.ClaimOrder, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c claimOrderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c claimOrderDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c claimOrderDo) Delete(models ...*model.ClaimOrder) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *claimOrderDo) withDO(do gen.Dao) *claimOrderDo {
	c.DO = *do.(*gen.DO)
	return c
}
