// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newAuthUser(db *gorm.DB, opts ...gen.DOOption) authUser {
	_authUser := authUser{}

	_authUser.authUserDo.UseDB(db, opts...)
	_authUser.authUserDo.UseModel(&model.AuthUser{})

	tableName := _authUser.authUserDo.TableName()
	_authUser.ALL = field.NewAsterisk(tableName)
	_authUser.ID = field.NewString(tableName, "id")
	_authUser.EntityID = field.NewString(tableName, "entity_id")
	_authUser.Provider = field.NewString(tableName, "provider")
	_authUser.Scope = field.NewString(tableName, "scope")
	_authUser.UserMetadata = field.NewString(tableName, "user_metadata")
	_authUser.AppMetadata = field.NewString(tableName, "app_metadata")
	_authUser.ProviderMetadata = field.NewString(tableName, "provider_metadata")

	_authUser.fillFieldMap()

	return _authUser
}

type authUser struct {
	authUserDo authUserDo

	ALL              field.Asterisk
	ID               field.String
	EntityID         field.String
	Provider         field.String
	Scope            field.String
	UserMetadata     field.String
	AppMetadata      field.String
	ProviderMetadata field.String

	fieldMap map[string]field.Expr
}

func (a authUser) Table(newTableName string) *authUser {
	a.authUserDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a authUser) As(alias string) *authUser {
	a.authUserDo.DO = *(a.authUserDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *authUser) updateTableName(table string) *authUser {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "id")
	a.EntityID = field.NewString(table, "entity_id")
	a.Provider = field.NewString(table, "provider")
	a.Scope = field.NewString(table, "scope")
	a.UserMetadata = field.NewString(table, "user_metadata")
	a.AppMetadata = field.NewString(table, "app_metadata")
	a.ProviderMetadata = field.NewString(table, "provider_metadata")

	a.fillFieldMap()

	return a
}

func (a *authUser) WithContext(ctx context.Context) *authUserDo { return a.authUserDo.WithContext(ctx) }

func (a authUser) TableName() string { return a.authUserDo.TableName() }

func (a authUser) Alias() string { return a.authUserDo.Alias() }

func (a authUser) Columns(cols ...field.Expr) gen.Columns { return a.authUserDo.Columns(cols...) }

func (a *authUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *authUser) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 7)
	a.fieldMap["id"] = a.ID
	a.fieldMap["entity_id"] = a.EntityID
	a.fieldMap["provider"] = a.Provider
	a.fieldMap["scope"] = a.Scope
	a.fieldMap["user_metadata"] = a.UserMetadata
	a.fieldMap["app_metadata"] = a.AppMetadata
	a.fieldMap["provider_metadata"] = a.ProviderMetadata
}

func (a authUser) clone(db *gorm.DB) authUser {
	a.authUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a authUser) replaceDB(db *gorm.DB) authUser {
	a.authUserDo.ReplaceDB(db)
	return a
}

type authUserDo struct{ gen.DO }

func (a authUserDo) Debug() *authUserDo {
	return a.withDO(a.DO.Debug())
}

func (a authUserDo) WithContext(ctx context.Context) *authUserDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a authUserDo) ReadDB() *authUserDo {
	return a.Clauses(dbresolver.Read)
}

func (a authUserDo) WriteDB() *authUserDo {
	return a.Clauses(dbresolver.Write)
}

func (a authUserDo) Session(config *gorm.Session) *authUserDo {
	return a.withDO(a.DO.Session(config))
}

func (a authUserDo) Clauses(conds ...clause.Expression) *authUserDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a authUserDo) Returning(value interface{}, columns ...string) *authUserDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a authUserDo) Not(conds ...gen.Condition) *authUserDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a authUserDo) Or(conds ...gen.Condition) *authUserDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a authUserDo) Select(conds ...field.Expr) *authUserDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a authUserDo) Where(conds ...gen.Condition) *authUserDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a authUserDo) Order(conds ...field.Expr) *authUserDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a authUserDo) Distinct(cols ...field.Expr) *authUserDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a authUserDo) Omit(cols ...field.Expr) *authUserDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a authUserDo) Join(table schema.Tabler, on ...field.Expr) *authUserDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a authUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) *authUserDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a authUserDo) RightJoin(table schema.Tabler, on ...field.Expr) *authUserDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a authUserDo) Group(cols ...field.Expr) *authUserDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a authUserDo) Having(conds ...gen.Condition) *authUserDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a authUserDo) Limit(limit int) *authUserDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a authUserDo) Offset(offset int) *authUserDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a authUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *authUserDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a authUserDo) Unscoped() *authUserDo {
	return a.withDO(a.DO.Unscoped())
}

func (a authUserDo) Create(values ...*model.AuthUser) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a authUserDo) CreateInBatches(values []*model.AuthUser, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a authUserDo) Save(values ...*model.AuthUser) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a authUserDo) First() (*model.AuthUser, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthUser), nil
	}
}

func (a authUserDo) Take() (*model.AuthUser, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthUser), nil
	}
}

func (a authUserDo) Last() (*model.AuthUser, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthUser), nil
	}
}

func (a authUserDo) Find() ([]*model.AuthUser, error) {
	result, err := a.DO.Find()
	return result.([]*model.AuthUser), err
}

func (a authUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AuthUser, err error) {
	buf := make([]*model.AuthUser, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a authUserDo) FindInBatches(result *[]*model.AuthUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a authUserDo) Attrs(attrs ...field.AssignExpr) *authUserDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a authUserDo) Assign(attrs ...field.AssignExpr) *authUserDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a authUserDo) Joins(fields ...field.RelationField) *authUserDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a authUserDo) Preload(fields ...field.RelationField) *authUserDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a authUserDo) FirstOrInit() (*model.AuthUser, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthUser), nil
	}
}

func (a authUserDo) FirstOrCreate() (*model.AuthUser, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AuthUser), nil
	}
}

func (a authUserDo) FindByPage(offset int, limit int) (result []*model.AuthUser, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a authUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a authUserDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a authUserDo) Delete(models ...*model.AuthUser) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *authUserDo) withDO(do gen.Dao) *authUserDo {
	a.DO = *do.(*gen.DO)
	return a
}
