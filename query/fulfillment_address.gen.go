// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newFulfillmentAddress(db *gorm.DB, opts ...gen.DOOption) fulfillmentAddress {
	_fulfillmentAddress := fulfillmentAddress{}

	_fulfillmentAddress.fulfillmentAddressDo.UseDB(db, opts...)
	_fulfillmentAddress.fulfillmentAddressDo.UseModel(&model.FulfillmentAddress{})

	tableName := _fulfillmentAddress.fulfillmentAddressDo.TableName()
	_fulfillmentAddress.ALL = field.NewAsterisk(tableName)
	_fulfillmentAddress.ID = field.NewString(tableName, "id")
	_fulfillmentAddress.FulfillmentID = field.NewString(tableName, "fulfillment_id")
	_fulfillmentAddress.Company = field.NewString(tableName, "company")
	_fulfillmentAddress.FirstName = field.NewString(tableName, "first_name")
	_fulfillmentAddress.LastName = field.NewString(tableName, "last_name")
	_fulfillmentAddress.Address1 = field.NewString(tableName, "address_1")
	_fulfillmentAddress.Address2 = field.NewString(tableName, "address_2")
	_fulfillmentAddress.City = field.NewString(tableName, "city")
	_fulfillmentAddress.CountryCode = field.NewString(tableName, "country_code")
	_fulfillmentAddress.Province = field.NewString(tableName, "province")
	_fulfillmentAddress.PostalCode = field.NewString(tableName, "postal_code")
	_fulfillmentAddress.Phone = field.NewString(tableName, "phone")
	_fulfillmentAddress.Metadata = field.NewString(tableName, "metadata")
	_fulfillmentAddress.CreatedAt = field.NewTime(tableName, "created_at")
	_fulfillmentAddress.UpdatedAt = field.NewTime(tableName, "updated_at")
	_fulfillmentAddress.DeletedAt = field.NewField(tableName, "deleted_at")

	_fulfillmentAddress.fillFieldMap()

	return _fulfillmentAddress
}

type fulfillmentAddress struct {
	fulfillmentAddressDo fulfillmentAddressDo

	ALL           field.Asterisk
	ID            field.String
	FulfillmentID field.String
	Company       field.String
	FirstName     field.String
	LastName      field.String
	Address1      field.String
	Address2      field.String
	City          field.String
	CountryCode   field.String
	Province      field.String
	PostalCode    field.String
	Phone         field.String
	Metadata      field.String
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field

	fieldMap map[string]field.Expr
}

func (f fulfillmentAddress) Table(newTableName string) *fulfillmentAddress {
	f.fulfillmentAddressDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fulfillmentAddress) As(alias string) *fulfillmentAddress {
	f.fulfillmentAddressDo.DO = *(f.fulfillmentAddressDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fulfillmentAddress) updateTableName(table string) *fulfillmentAddress {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewString(table, "id")
	f.FulfillmentID = field.NewString(table, "fulfillment_id")
	f.Company = field.NewString(table, "company")
	f.FirstName = field.NewString(table, "first_name")
	f.LastName = field.NewString(table, "last_name")
	f.Address1 = field.NewString(table, "address_1")
	f.Address2 = field.NewString(table, "address_2")
	f.City = field.NewString(table, "city")
	f.CountryCode = field.NewString(table, "country_code")
	f.Province = field.NewString(table, "province")
	f.PostalCode = field.NewString(table, "postal_code")
	f.Phone = field.NewString(table, "phone")
	f.Metadata = field.NewString(table, "metadata")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.UpdatedAt = field.NewTime(table, "updated_at")
	f.DeletedAt = field.NewField(table, "deleted_at")

	f.fillFieldMap()

	return f
}

func (f *fulfillmentAddress) WithContext(ctx context.Context) *fulfillmentAddressDo {
	return f.fulfillmentAddressDo.WithContext(ctx)
}

func (f fulfillmentAddress) TableName() string { return f.fulfillmentAddressDo.TableName() }

func (f fulfillmentAddress) Alias() string { return f.fulfillmentAddressDo.Alias() }

func (f fulfillmentAddress) Columns(cols ...field.Expr) gen.Columns {
	return f.fulfillmentAddressDo.Columns(cols...)
}

func (f *fulfillmentAddress) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fulfillmentAddress) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 16)
	f.fieldMap["id"] = f.ID
	f.fieldMap["fulfillment_id"] = f.FulfillmentID
	f.fieldMap["company"] = f.Company
	f.fieldMap["first_name"] = f.FirstName
	f.fieldMap["last_name"] = f.LastName
	f.fieldMap["address_1"] = f.Address1
	f.fieldMap["address_2"] = f.Address2
	f.fieldMap["city"] = f.City
	f.fieldMap["country_code"] = f.CountryCode
	f.fieldMap["province"] = f.Province
	f.fieldMap["postal_code"] = f.PostalCode
	f.fieldMap["phone"] = f.Phone
	f.fieldMap["metadata"] = f.Metadata
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["deleted_at"] = f.DeletedAt
}

func (f fulfillmentAddress) clone(db *gorm.DB) fulfillmentAddress {
	f.fulfillmentAddressDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fulfillmentAddress) replaceDB(db *gorm.DB) fulfillmentAddress {
	f.fulfillmentAddressDo.ReplaceDB(db)
	return f
}

type fulfillmentAddressDo struct{ gen.DO }

func (f fulfillmentAddressDo) Debug() *fulfillmentAddressDo {
	return f.withDO(f.DO.Debug())
}

func (f fulfillmentAddressDo) WithContext(ctx context.Context) *fulfillmentAddressDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fulfillmentAddressDo) ReadDB() *fulfillmentAddressDo {
	return f.Clauses(dbresolver.Read)
}

func (f fulfillmentAddressDo) WriteDB() *fulfillmentAddressDo {
	return f.Clauses(dbresolver.Write)
}

func (f fulfillmentAddressDo) Session(config *gorm.Session) *fulfillmentAddressDo {
	return f.withDO(f.DO.Session(config))
}

func (f fulfillmentAddressDo) Clauses(conds ...clause.Expression) *fulfillmentAddressDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fulfillmentAddressDo) Returning(value interface{}, columns ...string) *fulfillmentAddressDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fulfillmentAddressDo) Not(conds ...gen.Condition) *fulfillmentAddressDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fulfillmentAddressDo) Or(conds ...gen.Condition) *fulfillmentAddressDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fulfillmentAddressDo) Select(conds ...field.Expr) *fulfillmentAddressDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fulfillmentAddressDo) Where(conds ...gen.Condition) *fulfillmentAddressDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fulfillmentAddressDo) Order(conds ...field.Expr) *fulfillmentAddressDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fulfillmentAddressDo) Distinct(cols ...field.Expr) *fulfillmentAddressDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fulfillmentAddressDo) Omit(cols ...field.Expr) *fulfillmentAddressDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fulfillmentAddressDo) Join(table schema.Tabler, on ...field.Expr) *fulfillmentAddressDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fulfillmentAddressDo) LeftJoin(table schema.Tabler, on ...field.Expr) *fulfillmentAddressDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fulfillmentAddressDo) RightJoin(table schema.Tabler, on ...field.Expr) *fulfillmentAddressDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fulfillmentAddressDo) Group(cols ...field.Expr) *fulfillmentAddressDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fulfillmentAddressDo) Having(conds ...gen.Condition) *fulfillmentAddressDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fulfillmentAddressDo) Limit(limit int) *fulfillmentAddressDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fulfillmentAddressDo) Offset(offset int) *fulfillmentAddressDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fulfillmentAddressDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *fulfillmentAddressDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fulfillmentAddressDo) Unscoped() *fulfillmentAddressDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fulfillmentAddressDo) Create(values ...*model.FulfillmentAddress) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fulfillmentAddressDo) CreateInBatches(values []*model.FulfillmentAddress, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fulfillmentAddressDo) Save(values ...*model.FulfillmentAddress) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fulfillmentAddressDo) First() (*model.FulfillmentAddress, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FulfillmentAddress), nil
	}
}

func (f fulfillmentAddressDo) Take() (*model.FulfillmentAddress, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FulfillmentAddress), nil
	}
}

func (f fulfillmentAddressDo) Last() (*model.FulfillmentAddress, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FulfillmentAddress), nil
	}
}

func (f fulfillmentAddressDo) Find() ([]*model.FulfillmentAddress, error) {
	result, err := f.DO.Find()
	return result.([]*model.FulfillmentAddress), err
}

func (f fulfillmentAddressDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FulfillmentAddress, err error) {
	buf := make([]*model.FulfillmentAddress, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fulfillmentAddressDo) FindInBatches(result *[]*model.FulfillmentAddress, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fulfillmentAddressDo) Attrs(attrs ...field.AssignExpr) *fulfillmentAddressDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fulfillmentAddressDo) Assign(attrs ...field.AssignExpr) *fulfillmentAddressDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fulfillmentAddressDo) Joins(fields ...field.RelationField) *fulfillmentAddressDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fulfillmentAddressDo) Preload(fields ...field.RelationField) *fulfillmentAddressDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fulfillmentAddressDo) FirstOrInit() (*model.FulfillmentAddress, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FulfillmentAddress), nil
	}
}

func (f fulfillmentAddressDo) FirstOrCreate() (*model.FulfillmentAddress, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FulfillmentAddress), nil
	}
}

func (f fulfillmentAddressDo) FindByPage(offset int, limit int) (result []*model.FulfillmentAddress, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fulfillmentAddressDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fulfillmentAddressDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fulfillmentAddressDo) Delete(models ...*model.FulfillmentAddress) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fulfillmentAddressDo) withDO(do gen.Dao) *fulfillmentAddressDo {
	f.DO = *do.(*gen.DO)
	return f
}
