// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newReturnReason(db *gorm.DB, opts ...gen.DOOption) returnReason {
	_returnReason := returnReason{}

	_returnReason.returnReasonDo.UseDB(db, opts...)
	_returnReason.returnReasonDo.UseModel(&model.ReturnReason{})

	tableName := _returnReason.returnReasonDo.TableName()
	_returnReason.ALL = field.NewAsterisk(tableName)
	_returnReason.ID = field.NewString(tableName, "id")
	_returnReason.Value = field.NewString(tableName, "value")
	_returnReason.Label = field.NewString(tableName, "label")
	_returnReason.Description = field.NewString(tableName, "description")
	_returnReason.CreatedAt = field.NewTime(tableName, "created_at")
	_returnReason.UpdatedAt = field.NewTime(tableName, "updated_at")
	_returnReason.DeletedAt = field.NewField(tableName, "deleted_at")
	_returnReason.Metadata = field.NewString(tableName, "metadata")
	_returnReason.ParentReturnReasonID = field.NewString(tableName, "parent_return_reason_id")

	_returnReason.fillFieldMap()

	return _returnReason
}

type returnReason struct {
	returnReasonDo returnReasonDo

	ALL                  field.Asterisk
	ID                   field.String
	Value                field.String
	Label                field.String
	Description          field.String
	CreatedAt            field.Time
	UpdatedAt            field.Time
	DeletedAt            field.Field
	Metadata             field.String
	ParentReturnReasonID field.String

	fieldMap map[string]field.Expr
}

func (r returnReason) Table(newTableName string) *returnReason {
	r.returnReasonDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r returnReason) As(alias string) *returnReason {
	r.returnReasonDo.DO = *(r.returnReasonDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *returnReason) updateTableName(table string) *returnReason {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewString(table, "id")
	r.Value = field.NewString(table, "value")
	r.Label = field.NewString(table, "label")
	r.Description = field.NewString(table, "description")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")
	r.DeletedAt = field.NewField(table, "deleted_at")
	r.Metadata = field.NewString(table, "metadata")
	r.ParentReturnReasonID = field.NewString(table, "parent_return_reason_id")

	r.fillFieldMap()

	return r
}

func (r *returnReason) WithContext(ctx context.Context) *returnReasonDo {
	return r.returnReasonDo.WithContext(ctx)
}

func (r returnReason) TableName() string { return r.returnReasonDo.TableName() }

func (r returnReason) Alias() string { return r.returnReasonDo.Alias() }

func (r returnReason) Columns(cols ...field.Expr) gen.Columns {
	return r.returnReasonDo.Columns(cols...)
}

func (r *returnReason) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *returnReason) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 9)
	r.fieldMap["id"] = r.ID
	r.fieldMap["value"] = r.Value
	r.fieldMap["label"] = r.Label
	r.fieldMap["description"] = r.Description
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["deleted_at"] = r.DeletedAt
	r.fieldMap["metadata"] = r.Metadata
	r.fieldMap["parent_return_reason_id"] = r.ParentReturnReasonID
}

func (r returnReason) clone(db *gorm.DB) returnReason {
	r.returnReasonDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r returnReason) replaceDB(db *gorm.DB) returnReason {
	r.returnReasonDo.ReplaceDB(db)
	return r
}

type returnReasonDo struct{ gen.DO }

func (r returnReasonDo) Debug() *returnReasonDo {
	return r.withDO(r.DO.Debug())
}

func (r returnReasonDo) WithContext(ctx context.Context) *returnReasonDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r returnReasonDo) ReadDB() *returnReasonDo {
	return r.Clauses(dbresolver.Read)
}

func (r returnReasonDo) WriteDB() *returnReasonDo {
	return r.Clauses(dbresolver.Write)
}

func (r returnReasonDo) Session(config *gorm.Session) *returnReasonDo {
	return r.withDO(r.DO.Session(config))
}

func (r returnReasonDo) Clauses(conds ...clause.Expression) *returnReasonDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r returnReasonDo) Returning(value interface{}, columns ...string) *returnReasonDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r returnReasonDo) Not(conds ...gen.Condition) *returnReasonDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r returnReasonDo) Or(conds ...gen.Condition) *returnReasonDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r returnReasonDo) Select(conds ...field.Expr) *returnReasonDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r returnReasonDo) Where(conds ...gen.Condition) *returnReasonDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r returnReasonDo) Order(conds ...field.Expr) *returnReasonDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r returnReasonDo) Distinct(cols ...field.Expr) *returnReasonDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r returnReasonDo) Omit(cols ...field.Expr) *returnReasonDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r returnReasonDo) Join(table schema.Tabler, on ...field.Expr) *returnReasonDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r returnReasonDo) LeftJoin(table schema.Tabler, on ...field.Expr) *returnReasonDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r returnReasonDo) RightJoin(table schema.Tabler, on ...field.Expr) *returnReasonDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r returnReasonDo) Group(cols ...field.Expr) *returnReasonDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r returnReasonDo) Having(conds ...gen.Condition) *returnReasonDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r returnReasonDo) Limit(limit int) *returnReasonDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r returnReasonDo) Offset(offset int) *returnReasonDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r returnReasonDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *returnReasonDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r returnReasonDo) Unscoped() *returnReasonDo {
	return r.withDO(r.DO.Unscoped())
}

func (r returnReasonDo) Create(values ...*model.ReturnReason) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r returnReasonDo) CreateInBatches(values []*model.ReturnReason, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r returnReasonDo) Save(values ...*model.ReturnReason) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r returnReasonDo) First() (*model.ReturnReason, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReturnReason), nil
	}
}

func (r returnReasonDo) Take() (*model.ReturnReason, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReturnReason), nil
	}
}

func (r returnReasonDo) Last() (*model.ReturnReason, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReturnReason), nil
	}
}

func (r returnReasonDo) Find() ([]*model.ReturnReason, error) {
	result, err := r.DO.Find()
	return result.([]*model.ReturnReason), err
}

func (r returnReasonDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ReturnReason, err error) {
	buf := make([]*model.ReturnReason, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r returnReasonDo) FindInBatches(result *[]*model.ReturnReason, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r returnReasonDo) Attrs(attrs ...field.AssignExpr) *returnReasonDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r returnReasonDo) Assign(attrs ...field.AssignExpr) *returnReasonDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r returnReasonDo) Joins(fields ...field.RelationField) *returnReasonDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r returnReasonDo) Preload(fields ...field.RelationField) *returnReasonDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r returnReasonDo) FirstOrInit() (*model.ReturnReason, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReturnReason), nil
	}
}

func (r returnReasonDo) FirstOrCreate() (*model.ReturnReason, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReturnReason), nil
	}
}

func (r returnReasonDo) FindByPage(offset int, limit int) (result []*model.ReturnReason, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r returnReasonDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r returnReasonDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r returnReasonDo) Delete(models ...*model.ReturnReason) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *returnReasonDo) withDO(do gen.Dao) *returnReasonDo {
	r.DO = *do.(*gen.DO)
	return r
}
