// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newMoneyAmount(db *gorm.DB, opts ...gen.DOOption) moneyAmount {
	_moneyAmount := moneyAmount{}

	_moneyAmount.moneyAmountDo.UseDB(db, opts...)
	_moneyAmount.moneyAmountDo.UseModel(&model.MoneyAmount{})

	tableName := _moneyAmount.moneyAmountDo.TableName()
	_moneyAmount.ALL = field.NewAsterisk(tableName)
	_moneyAmount.ID = field.NewString(tableName, "id")
	_moneyAmount.CurrencyCode = field.NewString(tableName, "currency_code")
	_moneyAmount.Amount = field.NewFloat64(tableName, "amount")
	_moneyAmount.MinQuantity = field.NewFloat64(tableName, "min_quantity")
	_moneyAmount.MaxQuantity = field.NewFloat64(tableName, "max_quantity")
	_moneyAmount.CreatedAt = field.NewTime(tableName, "created_at")
	_moneyAmount.UpdatedAt = field.NewTime(tableName, "updated_at")
	_moneyAmount.DeletedAt = field.NewField(tableName, "deleted_at")

	_moneyAmount.fillFieldMap()

	return _moneyAmount
}

type moneyAmount struct {
	moneyAmountDo moneyAmountDo

	ALL          field.Asterisk
	ID           field.String
	CurrencyCode field.String
	Amount       field.Float64
	MinQuantity  field.Float64
	MaxQuantity  field.Float64
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field

	fieldMap map[string]field.Expr
}

func (m moneyAmount) Table(newTableName string) *moneyAmount {
	m.moneyAmountDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m moneyAmount) As(alias string) *moneyAmount {
	m.moneyAmountDo.DO = *(m.moneyAmountDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *moneyAmount) updateTableName(table string) *moneyAmount {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewString(table, "id")
	m.CurrencyCode = field.NewString(table, "currency_code")
	m.Amount = field.NewFloat64(table, "amount")
	m.MinQuantity = field.NewFloat64(table, "min_quantity")
	m.MaxQuantity = field.NewFloat64(table, "max_quantity")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")
	m.DeletedAt = field.NewField(table, "deleted_at")

	m.fillFieldMap()

	return m
}

func (m *moneyAmount) WithContext(ctx context.Context) *moneyAmountDo {
	return m.moneyAmountDo.WithContext(ctx)
}

func (m moneyAmount) TableName() string { return m.moneyAmountDo.TableName() }

func (m moneyAmount) Alias() string { return m.moneyAmountDo.Alias() }

func (m moneyAmount) Columns(cols ...field.Expr) gen.Columns { return m.moneyAmountDo.Columns(cols...) }

func (m *moneyAmount) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *moneyAmount) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 8)
	m.fieldMap["id"] = m.ID
	m.fieldMap["currency_code"] = m.CurrencyCode
	m.fieldMap["amount"] = m.Amount
	m.fieldMap["min_quantity"] = m.MinQuantity
	m.fieldMap["max_quantity"] = m.MaxQuantity
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["deleted_at"] = m.DeletedAt
}

func (m moneyAmount) clone(db *gorm.DB) moneyAmount {
	m.moneyAmountDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m moneyAmount) replaceDB(db *gorm.DB) moneyAmount {
	m.moneyAmountDo.ReplaceDB(db)
	return m
}

type moneyAmountDo struct{ gen.DO }

func (m moneyAmountDo) Debug() *moneyAmountDo {
	return m.withDO(m.DO.Debug())
}

func (m moneyAmountDo) WithContext(ctx context.Context) *moneyAmountDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m moneyAmountDo) ReadDB() *moneyAmountDo {
	return m.Clauses(dbresolver.Read)
}

func (m moneyAmountDo) WriteDB() *moneyAmountDo {
	return m.Clauses(dbresolver.Write)
}

func (m moneyAmountDo) Session(config *gorm.Session) *moneyAmountDo {
	return m.withDO(m.DO.Session(config))
}

func (m moneyAmountDo) Clauses(conds ...clause.Expression) *moneyAmountDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m moneyAmountDo) Returning(value interface{}, columns ...string) *moneyAmountDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m moneyAmountDo) Not(conds ...gen.Condition) *moneyAmountDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m moneyAmountDo) Or(conds ...gen.Condition) *moneyAmountDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m moneyAmountDo) Select(conds ...field.Expr) *moneyAmountDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m moneyAmountDo) Where(conds ...gen.Condition) *moneyAmountDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m moneyAmountDo) Order(conds ...field.Expr) *moneyAmountDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m moneyAmountDo) Distinct(cols ...field.Expr) *moneyAmountDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m moneyAmountDo) Omit(cols ...field.Expr) *moneyAmountDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m moneyAmountDo) Join(table schema.Tabler, on ...field.Expr) *moneyAmountDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m moneyAmountDo) LeftJoin(table schema.Tabler, on ...field.Expr) *moneyAmountDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m moneyAmountDo) RightJoin(table schema.Tabler, on ...field.Expr) *moneyAmountDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m moneyAmountDo) Group(cols ...field.Expr) *moneyAmountDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m moneyAmountDo) Having(conds ...gen.Condition) *moneyAmountDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m moneyAmountDo) Limit(limit int) *moneyAmountDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m moneyAmountDo) Offset(offset int) *moneyAmountDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m moneyAmountDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *moneyAmountDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m moneyAmountDo) Unscoped() *moneyAmountDo {
	return m.withDO(m.DO.Unscoped())
}

func (m moneyAmountDo) Create(values ...*model.MoneyAmount) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m moneyAmountDo) CreateInBatches(values []*model.MoneyAmount, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m moneyAmountDo) Save(values ...*model.MoneyAmount) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m moneyAmountDo) First() (*model.MoneyAmount, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MoneyAmount), nil
	}
}

func (m moneyAmountDo) Take() (*model.MoneyAmount, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MoneyAmount), nil
	}
}

func (m moneyAmountDo) Last() (*model.MoneyAmount, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MoneyAmount), nil
	}
}

func (m moneyAmountDo) Find() ([]*model.MoneyAmount, error) {
	result, err := m.DO.Find()
	return result.([]*model.MoneyAmount), err
}

func (m moneyAmountDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MoneyAmount, err error) {
	buf := make([]*model.MoneyAmount, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m moneyAmountDo) FindInBatches(result *[]*model.MoneyAmount, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m moneyAmountDo) Attrs(attrs ...field.AssignExpr) *moneyAmountDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m moneyAmountDo) Assign(attrs ...field.AssignExpr) *moneyAmountDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m moneyAmountDo) Joins(fields ...field.RelationField) *moneyAmountDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m moneyAmountDo) Preload(fields ...field.RelationField) *moneyAmountDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m moneyAmountDo) FirstOrInit() (*model.MoneyAmount, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MoneyAmount), nil
	}
}

func (m moneyAmountDo) FirstOrCreate() (*model.MoneyAmount, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MoneyAmount), nil
	}
}

func (m moneyAmountDo) FindByPage(offset int, limit int) (result []*model.MoneyAmount, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m moneyAmountDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m moneyAmountDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m moneyAmountDo) Delete(models ...*model.MoneyAmount) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *moneyAmountDo) withDO(do gen.Dao) *moneyAmountDo {
	m.DO = *do.(*gen.DO)
	return m
}
