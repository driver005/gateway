// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newCartShippingMethodTaxLine(db *gorm.DB, opts ...gen.DOOption) cartShippingMethodTaxLine {
	_cartShippingMethodTaxLine := cartShippingMethodTaxLine{}

	_cartShippingMethodTaxLine.cartShippingMethodTaxLineDo.UseDB(db, opts...)
	_cartShippingMethodTaxLine.cartShippingMethodTaxLineDo.UseModel(&model.CartShippingMethodTaxLine{})

	tableName := _cartShippingMethodTaxLine.cartShippingMethodTaxLineDo.TableName()
	_cartShippingMethodTaxLine.ALL = field.NewAsterisk(tableName)
	_cartShippingMethodTaxLine.ID = field.NewString(tableName, "id")
	_cartShippingMethodTaxLine.Description = field.NewString(tableName, "description")
	_cartShippingMethodTaxLine.TaxRateID = field.NewString(tableName, "tax_rate_id")
	_cartShippingMethodTaxLine.Code = field.NewString(tableName, "code")
	_cartShippingMethodTaxLine.Rate = field.NewFloat64(tableName, "rate")
	_cartShippingMethodTaxLine.ProviderID = field.NewString(tableName, "provider_id")
	_cartShippingMethodTaxLine.CreatedAt = field.NewTime(tableName, "created_at")
	_cartShippingMethodTaxLine.UpdatedAt = field.NewTime(tableName, "updated_at")
	_cartShippingMethodTaxLine.ShippingMethodID = field.NewString(tableName, "shipping_method_id")

	_cartShippingMethodTaxLine.fillFieldMap()

	return _cartShippingMethodTaxLine
}

type cartShippingMethodTaxLine struct {
	cartShippingMethodTaxLineDo cartShippingMethodTaxLineDo

	ALL              field.Asterisk
	ID               field.String
	Description      field.String
	TaxRateID        field.String
	Code             field.String
	Rate             field.Float64
	ProviderID       field.String
	CreatedAt        field.Time
	UpdatedAt        field.Time
	ShippingMethodID field.String

	fieldMap map[string]field.Expr
}

func (c cartShippingMethodTaxLine) Table(newTableName string) *cartShippingMethodTaxLine {
	c.cartShippingMethodTaxLineDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cartShippingMethodTaxLine) As(alias string) *cartShippingMethodTaxLine {
	c.cartShippingMethodTaxLineDo.DO = *(c.cartShippingMethodTaxLineDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cartShippingMethodTaxLine) updateTableName(table string) *cartShippingMethodTaxLine {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewString(table, "id")
	c.Description = field.NewString(table, "description")
	c.TaxRateID = field.NewString(table, "tax_rate_id")
	c.Code = field.NewString(table, "code")
	c.Rate = field.NewFloat64(table, "rate")
	c.ProviderID = field.NewString(table, "provider_id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.ShippingMethodID = field.NewString(table, "shipping_method_id")

	c.fillFieldMap()

	return c
}

func (c *cartShippingMethodTaxLine) WithContext(ctx context.Context) *cartShippingMethodTaxLineDo {
	return c.cartShippingMethodTaxLineDo.WithContext(ctx)
}

func (c cartShippingMethodTaxLine) TableName() string {
	return c.cartShippingMethodTaxLineDo.TableName()
}

func (c cartShippingMethodTaxLine) Alias() string { return c.cartShippingMethodTaxLineDo.Alias() }

func (c cartShippingMethodTaxLine) Columns(cols ...field.Expr) gen.Columns {
	return c.cartShippingMethodTaxLineDo.Columns(cols...)
}

func (c *cartShippingMethodTaxLine) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cartShippingMethodTaxLine) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 9)
	c.fieldMap["id"] = c.ID
	c.fieldMap["description"] = c.Description
	c.fieldMap["tax_rate_id"] = c.TaxRateID
	c.fieldMap["code"] = c.Code
	c.fieldMap["rate"] = c.Rate
	c.fieldMap["provider_id"] = c.ProviderID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["shipping_method_id"] = c.ShippingMethodID
}

func (c cartShippingMethodTaxLine) clone(db *gorm.DB) cartShippingMethodTaxLine {
	c.cartShippingMethodTaxLineDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cartShippingMethodTaxLine) replaceDB(db *gorm.DB) cartShippingMethodTaxLine {
	c.cartShippingMethodTaxLineDo.ReplaceDB(db)
	return c
}

type cartShippingMethodTaxLineDo struct{ gen.DO }

func (c cartShippingMethodTaxLineDo) Debug() *cartShippingMethodTaxLineDo {
	return c.withDO(c.DO.Debug())
}

func (c cartShippingMethodTaxLineDo) WithContext(ctx context.Context) *cartShippingMethodTaxLineDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cartShippingMethodTaxLineDo) ReadDB() *cartShippingMethodTaxLineDo {
	return c.Clauses(dbresolver.Read)
}

func (c cartShippingMethodTaxLineDo) WriteDB() *cartShippingMethodTaxLineDo {
	return c.Clauses(dbresolver.Write)
}

func (c cartShippingMethodTaxLineDo) Session(config *gorm.Session) *cartShippingMethodTaxLineDo {
	return c.withDO(c.DO.Session(config))
}

func (c cartShippingMethodTaxLineDo) Clauses(conds ...clause.Expression) *cartShippingMethodTaxLineDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cartShippingMethodTaxLineDo) Returning(value interface{}, columns ...string) *cartShippingMethodTaxLineDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cartShippingMethodTaxLineDo) Not(conds ...gen.Condition) *cartShippingMethodTaxLineDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cartShippingMethodTaxLineDo) Or(conds ...gen.Condition) *cartShippingMethodTaxLineDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cartShippingMethodTaxLineDo) Select(conds ...field.Expr) *cartShippingMethodTaxLineDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cartShippingMethodTaxLineDo) Where(conds ...gen.Condition) *cartShippingMethodTaxLineDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cartShippingMethodTaxLineDo) Order(conds ...field.Expr) *cartShippingMethodTaxLineDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cartShippingMethodTaxLineDo) Distinct(cols ...field.Expr) *cartShippingMethodTaxLineDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cartShippingMethodTaxLineDo) Omit(cols ...field.Expr) *cartShippingMethodTaxLineDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cartShippingMethodTaxLineDo) Join(table schema.Tabler, on ...field.Expr) *cartShippingMethodTaxLineDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cartShippingMethodTaxLineDo) LeftJoin(table schema.Tabler, on ...field.Expr) *cartShippingMethodTaxLineDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cartShippingMethodTaxLineDo) RightJoin(table schema.Tabler, on ...field.Expr) *cartShippingMethodTaxLineDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cartShippingMethodTaxLineDo) Group(cols ...field.Expr) *cartShippingMethodTaxLineDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cartShippingMethodTaxLineDo) Having(conds ...gen.Condition) *cartShippingMethodTaxLineDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cartShippingMethodTaxLineDo) Limit(limit int) *cartShippingMethodTaxLineDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cartShippingMethodTaxLineDo) Offset(offset int) *cartShippingMethodTaxLineDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cartShippingMethodTaxLineDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *cartShippingMethodTaxLineDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cartShippingMethodTaxLineDo) Unscoped() *cartShippingMethodTaxLineDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cartShippingMethodTaxLineDo) Create(values ...*model.CartShippingMethodTaxLine) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cartShippingMethodTaxLineDo) CreateInBatches(values []*model.CartShippingMethodTaxLine, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cartShippingMethodTaxLineDo) Save(values ...*model.CartShippingMethodTaxLine) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cartShippingMethodTaxLineDo) First() (*model.CartShippingMethodTaxLine, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CartShippingMethodTaxLine), nil
	}
}

func (c cartShippingMethodTaxLineDo) Take() (*model.CartShippingMethodTaxLine, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CartShippingMethodTaxLine), nil
	}
}

func (c cartShippingMethodTaxLineDo) Last() (*model.CartShippingMethodTaxLine, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CartShippingMethodTaxLine), nil
	}
}

func (c cartShippingMethodTaxLineDo) Find() ([]*model.CartShippingMethodTaxLine, error) {
	result, err := c.DO.Find()
	return result.([]*model.CartShippingMethodTaxLine), err
}

func (c cartShippingMethodTaxLineDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CartShippingMethodTaxLine, err error) {
	buf := make([]*model.CartShippingMethodTaxLine, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cartShippingMethodTaxLineDo) FindInBatches(result *[]*model.CartShippingMethodTaxLine, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cartShippingMethodTaxLineDo) Attrs(attrs ...field.AssignExpr) *cartShippingMethodTaxLineDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cartShippingMethodTaxLineDo) Assign(attrs ...field.AssignExpr) *cartShippingMethodTaxLineDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cartShippingMethodTaxLineDo) Joins(fields ...field.RelationField) *cartShippingMethodTaxLineDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cartShippingMethodTaxLineDo) Preload(fields ...field.RelationField) *cartShippingMethodTaxLineDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cartShippingMethodTaxLineDo) FirstOrInit() (*model.CartShippingMethodTaxLine, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CartShippingMethodTaxLine), nil
	}
}

func (c cartShippingMethodTaxLineDo) FirstOrCreate() (*model.CartShippingMethodTaxLine, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CartShippingMethodTaxLine), nil
	}
}

func (c cartShippingMethodTaxLineDo) FindByPage(offset int, limit int) (result []*model.CartShippingMethodTaxLine, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cartShippingMethodTaxLineDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cartShippingMethodTaxLineDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cartShippingMethodTaxLineDo) Delete(models ...*model.CartShippingMethodTaxLine) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cartShippingMethodTaxLineDo) withDO(do gen.Dao) *cartShippingMethodTaxLineDo {
	c.DO = *do.(*gen.DO)
	return c
}
