// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newStagedJob(db *gorm.DB, opts ...gen.DOOption) stagedJob {
	_stagedJob := stagedJob{}

	_stagedJob.stagedJobDo.UseDB(db, opts...)
	_stagedJob.stagedJobDo.UseModel(&model.StagedJob{})

	tableName := _stagedJob.stagedJobDo.TableName()
	_stagedJob.ALL = field.NewAsterisk(tableName)
	_stagedJob.ID = field.NewString(tableName, "id")
	_stagedJob.EventName = field.NewString(tableName, "event_name")
	_stagedJob.Data = field.NewString(tableName, "data")
	_stagedJob.Options = field.NewString(tableName, "options")

	_stagedJob.fillFieldMap()

	return _stagedJob
}

type stagedJob struct {
	stagedJobDo stagedJobDo

	ALL       field.Asterisk
	ID        field.String
	EventName field.String
	Data      field.String
	Options   field.String

	fieldMap map[string]field.Expr
}

func (s stagedJob) Table(newTableName string) *stagedJob {
	s.stagedJobDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s stagedJob) As(alias string) *stagedJob {
	s.stagedJobDo.DO = *(s.stagedJobDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *stagedJob) updateTableName(table string) *stagedJob {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.EventName = field.NewString(table, "event_name")
	s.Data = field.NewString(table, "data")
	s.Options = field.NewString(table, "options")

	s.fillFieldMap()

	return s
}

func (s *stagedJob) WithContext(ctx context.Context) *stagedJobDo {
	return s.stagedJobDo.WithContext(ctx)
}

func (s stagedJob) TableName() string { return s.stagedJobDo.TableName() }

func (s stagedJob) Alias() string { return s.stagedJobDo.Alias() }

func (s stagedJob) Columns(cols ...field.Expr) gen.Columns { return s.stagedJobDo.Columns(cols...) }

func (s *stagedJob) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *stagedJob) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 4)
	s.fieldMap["id"] = s.ID
	s.fieldMap["event_name"] = s.EventName
	s.fieldMap["data"] = s.Data
	s.fieldMap["options"] = s.Options
}

func (s stagedJob) clone(db *gorm.DB) stagedJob {
	s.stagedJobDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s stagedJob) replaceDB(db *gorm.DB) stagedJob {
	s.stagedJobDo.ReplaceDB(db)
	return s
}

type stagedJobDo struct{ gen.DO }

func (s stagedJobDo) Debug() *stagedJobDo {
	return s.withDO(s.DO.Debug())
}

func (s stagedJobDo) WithContext(ctx context.Context) *stagedJobDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s stagedJobDo) ReadDB() *stagedJobDo {
	return s.Clauses(dbresolver.Read)
}

func (s stagedJobDo) WriteDB() *stagedJobDo {
	return s.Clauses(dbresolver.Write)
}

func (s stagedJobDo) Session(config *gorm.Session) *stagedJobDo {
	return s.withDO(s.DO.Session(config))
}

func (s stagedJobDo) Clauses(conds ...clause.Expression) *stagedJobDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s stagedJobDo) Returning(value interface{}, columns ...string) *stagedJobDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s stagedJobDo) Not(conds ...gen.Condition) *stagedJobDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s stagedJobDo) Or(conds ...gen.Condition) *stagedJobDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s stagedJobDo) Select(conds ...field.Expr) *stagedJobDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s stagedJobDo) Where(conds ...gen.Condition) *stagedJobDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s stagedJobDo) Order(conds ...field.Expr) *stagedJobDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s stagedJobDo) Distinct(cols ...field.Expr) *stagedJobDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s stagedJobDo) Omit(cols ...field.Expr) *stagedJobDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s stagedJobDo) Join(table schema.Tabler, on ...field.Expr) *stagedJobDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s stagedJobDo) LeftJoin(table schema.Tabler, on ...field.Expr) *stagedJobDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s stagedJobDo) RightJoin(table schema.Tabler, on ...field.Expr) *stagedJobDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s stagedJobDo) Group(cols ...field.Expr) *stagedJobDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s stagedJobDo) Having(conds ...gen.Condition) *stagedJobDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s stagedJobDo) Limit(limit int) *stagedJobDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s stagedJobDo) Offset(offset int) *stagedJobDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s stagedJobDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *stagedJobDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s stagedJobDo) Unscoped() *stagedJobDo {
	return s.withDO(s.DO.Unscoped())
}

func (s stagedJobDo) Create(values ...*model.StagedJob) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s stagedJobDo) CreateInBatches(values []*model.StagedJob, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s stagedJobDo) Save(values ...*model.StagedJob) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s stagedJobDo) First() (*model.StagedJob, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.StagedJob), nil
	}
}

func (s stagedJobDo) Take() (*model.StagedJob, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.StagedJob), nil
	}
}

func (s stagedJobDo) Last() (*model.StagedJob, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.StagedJob), nil
	}
}

func (s stagedJobDo) Find() ([]*model.StagedJob, error) {
	result, err := s.DO.Find()
	return result.([]*model.StagedJob), err
}

func (s stagedJobDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StagedJob, err error) {
	buf := make([]*model.StagedJob, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s stagedJobDo) FindInBatches(result *[]*model.StagedJob, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s stagedJobDo) Attrs(attrs ...field.AssignExpr) *stagedJobDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s stagedJobDo) Assign(attrs ...field.AssignExpr) *stagedJobDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s stagedJobDo) Joins(fields ...field.RelationField) *stagedJobDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s stagedJobDo) Preload(fields ...field.RelationField) *stagedJobDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s stagedJobDo) FirstOrInit() (*model.StagedJob, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.StagedJob), nil
	}
}

func (s stagedJobDo) FirstOrCreate() (*model.StagedJob, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.StagedJob), nil
	}
}

func (s stagedJobDo) FindByPage(offset int, limit int) (result []*model.StagedJob, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s stagedJobDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s stagedJobDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s stagedJobDo) Delete(models ...*model.StagedJob) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *stagedJobDo) withDO(do gen.Dao) *stagedJobDo {
	s.DO = *do.(*gen.DO)
	return s
}
