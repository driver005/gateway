// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newIdempotencyKey(db *gorm.DB, opts ...gen.DOOption) idempotencyKey {
	_idempotencyKey := idempotencyKey{}

	_idempotencyKey.idempotencyKeyDo.UseDB(db, opts...)
	_idempotencyKey.idempotencyKeyDo.UseModel(&model.IdempotencyKey{})

	tableName := _idempotencyKey.idempotencyKeyDo.TableName()
	_idempotencyKey.ALL = field.NewAsterisk(tableName)
	_idempotencyKey.ID = field.NewString(tableName, "id")
	_idempotencyKey.IdempotencyKey = field.NewString(tableName, "idempotency_key")
	_idempotencyKey.CreatedAt = field.NewTime(tableName, "created_at")
	_idempotencyKey.LockedAt = field.NewTime(tableName, "locked_at")
	_idempotencyKey.RequestMethod = field.NewString(tableName, "request_method")
	_idempotencyKey.RequestParams = field.NewString(tableName, "request_params")
	_idempotencyKey.RequestPath = field.NewString(tableName, "request_path")
	_idempotencyKey.ResponseCode = field.NewInt32(tableName, "response_code")
	_idempotencyKey.ResponseBody = field.NewString(tableName, "response_body")
	_idempotencyKey.RecoveryPoint = field.NewString(tableName, "recovery_point")

	_idempotencyKey.fillFieldMap()

	return _idempotencyKey
}

type idempotencyKey struct {
	idempotencyKeyDo idempotencyKeyDo

	ALL            field.Asterisk
	ID             field.String
	IdempotencyKey field.String
	CreatedAt      field.Time
	LockedAt       field.Time
	RequestMethod  field.String
	RequestParams  field.String
	RequestPath    field.String
	ResponseCode   field.Int32
	ResponseBody   field.String
	RecoveryPoint  field.String

	fieldMap map[string]field.Expr
}

func (i idempotencyKey) Table(newTableName string) *idempotencyKey {
	i.idempotencyKeyDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i idempotencyKey) As(alias string) *idempotencyKey {
	i.idempotencyKeyDo.DO = *(i.idempotencyKeyDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *idempotencyKey) updateTableName(table string) *idempotencyKey {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewString(table, "id")
	i.IdempotencyKey = field.NewString(table, "idempotency_key")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.LockedAt = field.NewTime(table, "locked_at")
	i.RequestMethod = field.NewString(table, "request_method")
	i.RequestParams = field.NewString(table, "request_params")
	i.RequestPath = field.NewString(table, "request_path")
	i.ResponseCode = field.NewInt32(table, "response_code")
	i.ResponseBody = field.NewString(table, "response_body")
	i.RecoveryPoint = field.NewString(table, "recovery_point")

	i.fillFieldMap()

	return i
}

func (i *idempotencyKey) WithContext(ctx context.Context) *idempotencyKeyDo {
	return i.idempotencyKeyDo.WithContext(ctx)
}

func (i idempotencyKey) TableName() string { return i.idempotencyKeyDo.TableName() }

func (i idempotencyKey) Alias() string { return i.idempotencyKeyDo.Alias() }

func (i idempotencyKey) Columns(cols ...field.Expr) gen.Columns {
	return i.idempotencyKeyDo.Columns(cols...)
}

func (i *idempotencyKey) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *idempotencyKey) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 10)
	i.fieldMap["id"] = i.ID
	i.fieldMap["idempotency_key"] = i.IdempotencyKey
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["locked_at"] = i.LockedAt
	i.fieldMap["request_method"] = i.RequestMethod
	i.fieldMap["request_params"] = i.RequestParams
	i.fieldMap["request_path"] = i.RequestPath
	i.fieldMap["response_code"] = i.ResponseCode
	i.fieldMap["response_body"] = i.ResponseBody
	i.fieldMap["recovery_point"] = i.RecoveryPoint
}

func (i idempotencyKey) clone(db *gorm.DB) idempotencyKey {
	i.idempotencyKeyDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i idempotencyKey) replaceDB(db *gorm.DB) idempotencyKey {
	i.idempotencyKeyDo.ReplaceDB(db)
	return i
}

type idempotencyKeyDo struct{ gen.DO }

func (i idempotencyKeyDo) Debug() *idempotencyKeyDo {
	return i.withDO(i.DO.Debug())
}

func (i idempotencyKeyDo) WithContext(ctx context.Context) *idempotencyKeyDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i idempotencyKeyDo) ReadDB() *idempotencyKeyDo {
	return i.Clauses(dbresolver.Read)
}

func (i idempotencyKeyDo) WriteDB() *idempotencyKeyDo {
	return i.Clauses(dbresolver.Write)
}

func (i idempotencyKeyDo) Session(config *gorm.Session) *idempotencyKeyDo {
	return i.withDO(i.DO.Session(config))
}

func (i idempotencyKeyDo) Clauses(conds ...clause.Expression) *idempotencyKeyDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i idempotencyKeyDo) Returning(value interface{}, columns ...string) *idempotencyKeyDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i idempotencyKeyDo) Not(conds ...gen.Condition) *idempotencyKeyDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i idempotencyKeyDo) Or(conds ...gen.Condition) *idempotencyKeyDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i idempotencyKeyDo) Select(conds ...field.Expr) *idempotencyKeyDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i idempotencyKeyDo) Where(conds ...gen.Condition) *idempotencyKeyDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i idempotencyKeyDo) Order(conds ...field.Expr) *idempotencyKeyDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i idempotencyKeyDo) Distinct(cols ...field.Expr) *idempotencyKeyDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i idempotencyKeyDo) Omit(cols ...field.Expr) *idempotencyKeyDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i idempotencyKeyDo) Join(table schema.Tabler, on ...field.Expr) *idempotencyKeyDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i idempotencyKeyDo) LeftJoin(table schema.Tabler, on ...field.Expr) *idempotencyKeyDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i idempotencyKeyDo) RightJoin(table schema.Tabler, on ...field.Expr) *idempotencyKeyDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i idempotencyKeyDo) Group(cols ...field.Expr) *idempotencyKeyDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i idempotencyKeyDo) Having(conds ...gen.Condition) *idempotencyKeyDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i idempotencyKeyDo) Limit(limit int) *idempotencyKeyDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i idempotencyKeyDo) Offset(offset int) *idempotencyKeyDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i idempotencyKeyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *idempotencyKeyDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i idempotencyKeyDo) Unscoped() *idempotencyKeyDo {
	return i.withDO(i.DO.Unscoped())
}

func (i idempotencyKeyDo) Create(values ...*model.IdempotencyKey) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i idempotencyKeyDo) CreateInBatches(values []*model.IdempotencyKey, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i idempotencyKeyDo) Save(values ...*model.IdempotencyKey) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i idempotencyKeyDo) First() (*model.IdempotencyKey, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.IdempotencyKey), nil
	}
}

func (i idempotencyKeyDo) Take() (*model.IdempotencyKey, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.IdempotencyKey), nil
	}
}

func (i idempotencyKeyDo) Last() (*model.IdempotencyKey, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.IdempotencyKey), nil
	}
}

func (i idempotencyKeyDo) Find() ([]*model.IdempotencyKey, error) {
	result, err := i.DO.Find()
	return result.([]*model.IdempotencyKey), err
}

func (i idempotencyKeyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.IdempotencyKey, err error) {
	buf := make([]*model.IdempotencyKey, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i idempotencyKeyDo) FindInBatches(result *[]*model.IdempotencyKey, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i idempotencyKeyDo) Attrs(attrs ...field.AssignExpr) *idempotencyKeyDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i idempotencyKeyDo) Assign(attrs ...field.AssignExpr) *idempotencyKeyDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i idempotencyKeyDo) Joins(fields ...field.RelationField) *idempotencyKeyDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i idempotencyKeyDo) Preload(fields ...field.RelationField) *idempotencyKeyDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i idempotencyKeyDo) FirstOrInit() (*model.IdempotencyKey, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.IdempotencyKey), nil
	}
}

func (i idempotencyKeyDo) FirstOrCreate() (*model.IdempotencyKey, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.IdempotencyKey), nil
	}
}

func (i idempotencyKeyDo) FindByPage(offset int, limit int) (result []*model.IdempotencyKey, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i idempotencyKeyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i idempotencyKeyDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i idempotencyKeyDo) Delete(models ...*model.IdempotencyKey) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *idempotencyKeyDo) withDO(do gen.Dao) *idempotencyKeyDo {
	i.DO = *do.(*gen.DO)
	return i
}
