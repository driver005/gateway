// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newSalesChannelLocation(db *gorm.DB, opts ...gen.DOOption) salesChannelLocation {
	_salesChannelLocation := salesChannelLocation{}

	_salesChannelLocation.salesChannelLocationDo.UseDB(db, opts...)
	_salesChannelLocation.salesChannelLocationDo.UseModel(&model.SalesChannelLocation{})

	tableName := _salesChannelLocation.salesChannelLocationDo.TableName()
	_salesChannelLocation.ALL = field.NewAsterisk(tableName)
	_salesChannelLocation.ID = field.NewString(tableName, "id")
	_salesChannelLocation.CreatedAt = field.NewTime(tableName, "created_at")
	_salesChannelLocation.UpdatedAt = field.NewTime(tableName, "updated_at")
	_salesChannelLocation.SalesChannelID = field.NewString(tableName, "sales_channel_id")
	_salesChannelLocation.LocationID = field.NewString(tableName, "location_id")
	_salesChannelLocation.DeletedAt = field.NewField(tableName, "deleted_at")

	_salesChannelLocation.fillFieldMap()

	return _salesChannelLocation
}

type salesChannelLocation struct {
	salesChannelLocationDo salesChannelLocationDo

	ALL            field.Asterisk
	ID             field.String
	CreatedAt      field.Time
	UpdatedAt      field.Time
	SalesChannelID field.String
	LocationID     field.String
	DeletedAt      field.Field

	fieldMap map[string]field.Expr
}

func (s salesChannelLocation) Table(newTableName string) *salesChannelLocation {
	s.salesChannelLocationDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s salesChannelLocation) As(alias string) *salesChannelLocation {
	s.salesChannelLocationDo.DO = *(s.salesChannelLocationDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *salesChannelLocation) updateTableName(table string) *salesChannelLocation {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.SalesChannelID = field.NewString(table, "sales_channel_id")
	s.LocationID = field.NewString(table, "location_id")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *salesChannelLocation) WithContext(ctx context.Context) *salesChannelLocationDo {
	return s.salesChannelLocationDo.WithContext(ctx)
}

func (s salesChannelLocation) TableName() string { return s.salesChannelLocationDo.TableName() }

func (s salesChannelLocation) Alias() string { return s.salesChannelLocationDo.Alias() }

func (s salesChannelLocation) Columns(cols ...field.Expr) gen.Columns {
	return s.salesChannelLocationDo.Columns(cols...)
}

func (s *salesChannelLocation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *salesChannelLocation) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["sales_channel_id"] = s.SalesChannelID
	s.fieldMap["location_id"] = s.LocationID
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s salesChannelLocation) clone(db *gorm.DB) salesChannelLocation {
	s.salesChannelLocationDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s salesChannelLocation) replaceDB(db *gorm.DB) salesChannelLocation {
	s.salesChannelLocationDo.ReplaceDB(db)
	return s
}

type salesChannelLocationDo struct{ gen.DO }

func (s salesChannelLocationDo) Debug() *salesChannelLocationDo {
	return s.withDO(s.DO.Debug())
}

func (s salesChannelLocationDo) WithContext(ctx context.Context) *salesChannelLocationDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s salesChannelLocationDo) ReadDB() *salesChannelLocationDo {
	return s.Clauses(dbresolver.Read)
}

func (s salesChannelLocationDo) WriteDB() *salesChannelLocationDo {
	return s.Clauses(dbresolver.Write)
}

func (s salesChannelLocationDo) Session(config *gorm.Session) *salesChannelLocationDo {
	return s.withDO(s.DO.Session(config))
}

func (s salesChannelLocationDo) Clauses(conds ...clause.Expression) *salesChannelLocationDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s salesChannelLocationDo) Returning(value interface{}, columns ...string) *salesChannelLocationDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s salesChannelLocationDo) Not(conds ...gen.Condition) *salesChannelLocationDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s salesChannelLocationDo) Or(conds ...gen.Condition) *salesChannelLocationDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s salesChannelLocationDo) Select(conds ...field.Expr) *salesChannelLocationDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s salesChannelLocationDo) Where(conds ...gen.Condition) *salesChannelLocationDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s salesChannelLocationDo) Order(conds ...field.Expr) *salesChannelLocationDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s salesChannelLocationDo) Distinct(cols ...field.Expr) *salesChannelLocationDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s salesChannelLocationDo) Omit(cols ...field.Expr) *salesChannelLocationDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s salesChannelLocationDo) Join(table schema.Tabler, on ...field.Expr) *salesChannelLocationDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s salesChannelLocationDo) LeftJoin(table schema.Tabler, on ...field.Expr) *salesChannelLocationDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s salesChannelLocationDo) RightJoin(table schema.Tabler, on ...field.Expr) *salesChannelLocationDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s salesChannelLocationDo) Group(cols ...field.Expr) *salesChannelLocationDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s salesChannelLocationDo) Having(conds ...gen.Condition) *salesChannelLocationDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s salesChannelLocationDo) Limit(limit int) *salesChannelLocationDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s salesChannelLocationDo) Offset(offset int) *salesChannelLocationDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s salesChannelLocationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *salesChannelLocationDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s salesChannelLocationDo) Unscoped() *salesChannelLocationDo {
	return s.withDO(s.DO.Unscoped())
}

func (s salesChannelLocationDo) Create(values ...*model.SalesChannelLocation) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s salesChannelLocationDo) CreateInBatches(values []*model.SalesChannelLocation, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s salesChannelLocationDo) Save(values ...*model.SalesChannelLocation) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s salesChannelLocationDo) First() (*model.SalesChannelLocation, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SalesChannelLocation), nil
	}
}

func (s salesChannelLocationDo) Take() (*model.SalesChannelLocation, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SalesChannelLocation), nil
	}
}

func (s salesChannelLocationDo) Last() (*model.SalesChannelLocation, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SalesChannelLocation), nil
	}
}

func (s salesChannelLocationDo) Find() ([]*model.SalesChannelLocation, error) {
	result, err := s.DO.Find()
	return result.([]*model.SalesChannelLocation), err
}

func (s salesChannelLocationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SalesChannelLocation, err error) {
	buf := make([]*model.SalesChannelLocation, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s salesChannelLocationDo) FindInBatches(result *[]*model.SalesChannelLocation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s salesChannelLocationDo) Attrs(attrs ...field.AssignExpr) *salesChannelLocationDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s salesChannelLocationDo) Assign(attrs ...field.AssignExpr) *salesChannelLocationDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s salesChannelLocationDo) Joins(fields ...field.RelationField) *salesChannelLocationDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s salesChannelLocationDo) Preload(fields ...field.RelationField) *salesChannelLocationDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s salesChannelLocationDo) FirstOrInit() (*model.SalesChannelLocation, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SalesChannelLocation), nil
	}
}

func (s salesChannelLocationDo) FirstOrCreate() (*model.SalesChannelLocation, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SalesChannelLocation), nil
	}
}

func (s salesChannelLocationDo) FindByPage(offset int, limit int) (result []*model.SalesChannelLocation, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s salesChannelLocationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s salesChannelLocationDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s salesChannelLocationDo) Delete(models ...*model.SalesChannelLocation) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *salesChannelLocationDo) withDO(do gen.Dao) *salesChannelLocationDo {
	s.DO = *do.(*gen.DO)
	return s
}
