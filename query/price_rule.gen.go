// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newPriceRule(db *gorm.DB, opts ...gen.DOOption) priceRule {
	_priceRule := priceRule{}

	_priceRule.priceRuleDo.UseDB(db, opts...)
	_priceRule.priceRuleDo.UseModel(&model.PriceRule{})

	tableName := _priceRule.priceRuleDo.TableName()
	_priceRule.ALL = field.NewAsterisk(tableName)
	_priceRule.ID = field.NewString(tableName, "id")
	_priceRule.PriceSetID = field.NewString(tableName, "price_set_id")
	_priceRule.RuleTypeID = field.NewString(tableName, "rule_type_id")
	_priceRule.Value = field.NewString(tableName, "value")
	_priceRule.Priority = field.NewInt32(tableName, "priority")
	_priceRule.PriceSetMoneyAmountID = field.NewString(tableName, "price_set_money_amount_id")
	_priceRule.CreatedAt = field.NewTime(tableName, "created_at")
	_priceRule.UpdatedAt = field.NewTime(tableName, "updated_at")
	_priceRule.DeletedAt = field.NewField(tableName, "deleted_at")

	_priceRule.fillFieldMap()

	return _priceRule
}

type priceRule struct {
	priceRuleDo priceRuleDo

	ALL                   field.Asterisk
	ID                    field.String
	PriceSetID            field.String
	RuleTypeID            field.String
	Value                 field.String
	Priority              field.Int32
	PriceSetMoneyAmountID field.String
	CreatedAt             field.Time
	UpdatedAt             field.Time
	DeletedAt             field.Field

	fieldMap map[string]field.Expr
}

func (p priceRule) Table(newTableName string) *priceRule {
	p.priceRuleDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p priceRule) As(alias string) *priceRule {
	p.priceRuleDo.DO = *(p.priceRuleDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *priceRule) updateTableName(table string) *priceRule {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewString(table, "id")
	p.PriceSetID = field.NewString(table, "price_set_id")
	p.RuleTypeID = field.NewString(table, "rule_type_id")
	p.Value = field.NewString(table, "value")
	p.Priority = field.NewInt32(table, "priority")
	p.PriceSetMoneyAmountID = field.NewString(table, "price_set_money_amount_id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")

	p.fillFieldMap()

	return p
}

func (p *priceRule) WithContext(ctx context.Context) *priceRuleDo {
	return p.priceRuleDo.WithContext(ctx)
}

func (p priceRule) TableName() string { return p.priceRuleDo.TableName() }

func (p priceRule) Alias() string { return p.priceRuleDo.Alias() }

func (p priceRule) Columns(cols ...field.Expr) gen.Columns { return p.priceRuleDo.Columns(cols...) }

func (p *priceRule) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *priceRule) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 9)
	p.fieldMap["id"] = p.ID
	p.fieldMap["price_set_id"] = p.PriceSetID
	p.fieldMap["rule_type_id"] = p.RuleTypeID
	p.fieldMap["value"] = p.Value
	p.fieldMap["priority"] = p.Priority
	p.fieldMap["price_set_money_amount_id"] = p.PriceSetMoneyAmountID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
}

func (p priceRule) clone(db *gorm.DB) priceRule {
	p.priceRuleDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p priceRule) replaceDB(db *gorm.DB) priceRule {
	p.priceRuleDo.ReplaceDB(db)
	return p
}

type priceRuleDo struct{ gen.DO }

func (p priceRuleDo) Debug() *priceRuleDo {
	return p.withDO(p.DO.Debug())
}

func (p priceRuleDo) WithContext(ctx context.Context) *priceRuleDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p priceRuleDo) ReadDB() *priceRuleDo {
	return p.Clauses(dbresolver.Read)
}

func (p priceRuleDo) WriteDB() *priceRuleDo {
	return p.Clauses(dbresolver.Write)
}

func (p priceRuleDo) Session(config *gorm.Session) *priceRuleDo {
	return p.withDO(p.DO.Session(config))
}

func (p priceRuleDo) Clauses(conds ...clause.Expression) *priceRuleDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p priceRuleDo) Returning(value interface{}, columns ...string) *priceRuleDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p priceRuleDo) Not(conds ...gen.Condition) *priceRuleDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p priceRuleDo) Or(conds ...gen.Condition) *priceRuleDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p priceRuleDo) Select(conds ...field.Expr) *priceRuleDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p priceRuleDo) Where(conds ...gen.Condition) *priceRuleDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p priceRuleDo) Order(conds ...field.Expr) *priceRuleDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p priceRuleDo) Distinct(cols ...field.Expr) *priceRuleDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p priceRuleDo) Omit(cols ...field.Expr) *priceRuleDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p priceRuleDo) Join(table schema.Tabler, on ...field.Expr) *priceRuleDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p priceRuleDo) LeftJoin(table schema.Tabler, on ...field.Expr) *priceRuleDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p priceRuleDo) RightJoin(table schema.Tabler, on ...field.Expr) *priceRuleDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p priceRuleDo) Group(cols ...field.Expr) *priceRuleDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p priceRuleDo) Having(conds ...gen.Condition) *priceRuleDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p priceRuleDo) Limit(limit int) *priceRuleDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p priceRuleDo) Offset(offset int) *priceRuleDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p priceRuleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *priceRuleDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p priceRuleDo) Unscoped() *priceRuleDo {
	return p.withDO(p.DO.Unscoped())
}

func (p priceRuleDo) Create(values ...*model.PriceRule) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p priceRuleDo) CreateInBatches(values []*model.PriceRule, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p priceRuleDo) Save(values ...*model.PriceRule) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p priceRuleDo) First() (*model.PriceRule, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PriceRule), nil
	}
}

func (p priceRuleDo) Take() (*model.PriceRule, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PriceRule), nil
	}
}

func (p priceRuleDo) Last() (*model.PriceRule, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PriceRule), nil
	}
}

func (p priceRuleDo) Find() ([]*model.PriceRule, error) {
	result, err := p.DO.Find()
	return result.([]*model.PriceRule), err
}

func (p priceRuleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PriceRule, err error) {
	buf := make([]*model.PriceRule, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p priceRuleDo) FindInBatches(result *[]*model.PriceRule, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p priceRuleDo) Attrs(attrs ...field.AssignExpr) *priceRuleDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p priceRuleDo) Assign(attrs ...field.AssignExpr) *priceRuleDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p priceRuleDo) Joins(fields ...field.RelationField) *priceRuleDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p priceRuleDo) Preload(fields ...field.RelationField) *priceRuleDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p priceRuleDo) FirstOrInit() (*model.PriceRule, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PriceRule), nil
	}
}

func (p priceRuleDo) FirstOrCreate() (*model.PriceRule, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PriceRule), nil
	}
}

func (p priceRuleDo) FindByPage(offset int, limit int) (result []*model.PriceRule, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p priceRuleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p priceRuleDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p priceRuleDo) Delete(models ...*model.PriceRule) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *priceRuleDo) withDO(do gen.Dao) *priceRuleDo {
	p.DO = *do.(*gen.DO)
	return p
}
