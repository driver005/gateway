// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newCartLineItemAdjustment(db *gorm.DB, opts ...gen.DOOption) cartLineItemAdjustment {
	_cartLineItemAdjustment := cartLineItemAdjustment{}

	_cartLineItemAdjustment.cartLineItemAdjustmentDo.UseDB(db, opts...)
	_cartLineItemAdjustment.cartLineItemAdjustmentDo.UseModel(&model.CartLineItemAdjustment{})

	tableName := _cartLineItemAdjustment.cartLineItemAdjustmentDo.TableName()
	_cartLineItemAdjustment.ALL = field.NewAsterisk(tableName)
	_cartLineItemAdjustment.ID = field.NewString(tableName, "id")
	_cartLineItemAdjustment.Description = field.NewString(tableName, "description")
	_cartLineItemAdjustment.PromotionID = field.NewString(tableName, "promotion_id")
	_cartLineItemAdjustment.Code = field.NewString(tableName, "code")
	_cartLineItemAdjustment.Amount = field.NewFloat64(tableName, "amount")
	_cartLineItemAdjustment.ProviderID = field.NewString(tableName, "provider_id")
	_cartLineItemAdjustment.CreatedAt = field.NewTime(tableName, "created_at")
	_cartLineItemAdjustment.UpdatedAt = field.NewTime(tableName, "updated_at")
	_cartLineItemAdjustment.ItemID = field.NewString(tableName, "item_id")

	_cartLineItemAdjustment.fillFieldMap()

	return _cartLineItemAdjustment
}

type cartLineItemAdjustment struct {
	cartLineItemAdjustmentDo cartLineItemAdjustmentDo

	ALL         field.Asterisk
	ID          field.String
	Description field.String
	PromotionID field.String
	Code        field.String
	Amount      field.Float64
	ProviderID  field.String
	CreatedAt   field.Time
	UpdatedAt   field.Time
	ItemID      field.String

	fieldMap map[string]field.Expr
}

func (c cartLineItemAdjustment) Table(newTableName string) *cartLineItemAdjustment {
	c.cartLineItemAdjustmentDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cartLineItemAdjustment) As(alias string) *cartLineItemAdjustment {
	c.cartLineItemAdjustmentDo.DO = *(c.cartLineItemAdjustmentDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cartLineItemAdjustment) updateTableName(table string) *cartLineItemAdjustment {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewString(table, "id")
	c.Description = field.NewString(table, "description")
	c.PromotionID = field.NewString(table, "promotion_id")
	c.Code = field.NewString(table, "code")
	c.Amount = field.NewFloat64(table, "amount")
	c.ProviderID = field.NewString(table, "provider_id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.ItemID = field.NewString(table, "item_id")

	c.fillFieldMap()

	return c
}

func (c *cartLineItemAdjustment) WithContext(ctx context.Context) *cartLineItemAdjustmentDo {
	return c.cartLineItemAdjustmentDo.WithContext(ctx)
}

func (c cartLineItemAdjustment) TableName() string { return c.cartLineItemAdjustmentDo.TableName() }

func (c cartLineItemAdjustment) Alias() string { return c.cartLineItemAdjustmentDo.Alias() }

func (c cartLineItemAdjustment) Columns(cols ...field.Expr) gen.Columns {
	return c.cartLineItemAdjustmentDo.Columns(cols...)
}

func (c *cartLineItemAdjustment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cartLineItemAdjustment) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 9)
	c.fieldMap["id"] = c.ID
	c.fieldMap["description"] = c.Description
	c.fieldMap["promotion_id"] = c.PromotionID
	c.fieldMap["code"] = c.Code
	c.fieldMap["amount"] = c.Amount
	c.fieldMap["provider_id"] = c.ProviderID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["item_id"] = c.ItemID
}

func (c cartLineItemAdjustment) clone(db *gorm.DB) cartLineItemAdjustment {
	c.cartLineItemAdjustmentDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cartLineItemAdjustment) replaceDB(db *gorm.DB) cartLineItemAdjustment {
	c.cartLineItemAdjustmentDo.ReplaceDB(db)
	return c
}

type cartLineItemAdjustmentDo struct{ gen.DO }

func (c cartLineItemAdjustmentDo) Debug() *cartLineItemAdjustmentDo {
	return c.withDO(c.DO.Debug())
}

func (c cartLineItemAdjustmentDo) WithContext(ctx context.Context) *cartLineItemAdjustmentDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cartLineItemAdjustmentDo) ReadDB() *cartLineItemAdjustmentDo {
	return c.Clauses(dbresolver.Read)
}

func (c cartLineItemAdjustmentDo) WriteDB() *cartLineItemAdjustmentDo {
	return c.Clauses(dbresolver.Write)
}

func (c cartLineItemAdjustmentDo) Session(config *gorm.Session) *cartLineItemAdjustmentDo {
	return c.withDO(c.DO.Session(config))
}

func (c cartLineItemAdjustmentDo) Clauses(conds ...clause.Expression) *cartLineItemAdjustmentDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cartLineItemAdjustmentDo) Returning(value interface{}, columns ...string) *cartLineItemAdjustmentDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cartLineItemAdjustmentDo) Not(conds ...gen.Condition) *cartLineItemAdjustmentDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cartLineItemAdjustmentDo) Or(conds ...gen.Condition) *cartLineItemAdjustmentDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cartLineItemAdjustmentDo) Select(conds ...field.Expr) *cartLineItemAdjustmentDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cartLineItemAdjustmentDo) Where(conds ...gen.Condition) *cartLineItemAdjustmentDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cartLineItemAdjustmentDo) Order(conds ...field.Expr) *cartLineItemAdjustmentDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cartLineItemAdjustmentDo) Distinct(cols ...field.Expr) *cartLineItemAdjustmentDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cartLineItemAdjustmentDo) Omit(cols ...field.Expr) *cartLineItemAdjustmentDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cartLineItemAdjustmentDo) Join(table schema.Tabler, on ...field.Expr) *cartLineItemAdjustmentDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cartLineItemAdjustmentDo) LeftJoin(table schema.Tabler, on ...field.Expr) *cartLineItemAdjustmentDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cartLineItemAdjustmentDo) RightJoin(table schema.Tabler, on ...field.Expr) *cartLineItemAdjustmentDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cartLineItemAdjustmentDo) Group(cols ...field.Expr) *cartLineItemAdjustmentDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cartLineItemAdjustmentDo) Having(conds ...gen.Condition) *cartLineItemAdjustmentDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cartLineItemAdjustmentDo) Limit(limit int) *cartLineItemAdjustmentDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cartLineItemAdjustmentDo) Offset(offset int) *cartLineItemAdjustmentDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cartLineItemAdjustmentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *cartLineItemAdjustmentDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cartLineItemAdjustmentDo) Unscoped() *cartLineItemAdjustmentDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cartLineItemAdjustmentDo) Create(values ...*model.CartLineItemAdjustment) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cartLineItemAdjustmentDo) CreateInBatches(values []*model.CartLineItemAdjustment, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cartLineItemAdjustmentDo) Save(values ...*model.CartLineItemAdjustment) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cartLineItemAdjustmentDo) First() (*model.CartLineItemAdjustment, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CartLineItemAdjustment), nil
	}
}

func (c cartLineItemAdjustmentDo) Take() (*model.CartLineItemAdjustment, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CartLineItemAdjustment), nil
	}
}

func (c cartLineItemAdjustmentDo) Last() (*model.CartLineItemAdjustment, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CartLineItemAdjustment), nil
	}
}

func (c cartLineItemAdjustmentDo) Find() ([]*model.CartLineItemAdjustment, error) {
	result, err := c.DO.Find()
	return result.([]*model.CartLineItemAdjustment), err
}

func (c cartLineItemAdjustmentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CartLineItemAdjustment, err error) {
	buf := make([]*model.CartLineItemAdjustment, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cartLineItemAdjustmentDo) FindInBatches(result *[]*model.CartLineItemAdjustment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cartLineItemAdjustmentDo) Attrs(attrs ...field.AssignExpr) *cartLineItemAdjustmentDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cartLineItemAdjustmentDo) Assign(attrs ...field.AssignExpr) *cartLineItemAdjustmentDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cartLineItemAdjustmentDo) Joins(fields ...field.RelationField) *cartLineItemAdjustmentDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cartLineItemAdjustmentDo) Preload(fields ...field.RelationField) *cartLineItemAdjustmentDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cartLineItemAdjustmentDo) FirstOrInit() (*model.CartLineItemAdjustment, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CartLineItemAdjustment), nil
	}
}

func (c cartLineItemAdjustmentDo) FirstOrCreate() (*model.CartLineItemAdjustment, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CartLineItemAdjustment), nil
	}
}

func (c cartLineItemAdjustmentDo) FindByPage(offset int, limit int) (result []*model.CartLineItemAdjustment, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cartLineItemAdjustmentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cartLineItemAdjustmentDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cartLineItemAdjustmentDo) Delete(models ...*model.CartLineItemAdjustment) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cartLineItemAdjustmentDo) withDO(do gen.Dao) *cartLineItemAdjustmentDo {
	c.DO = *do.(*gen.DO)
	return c
}
