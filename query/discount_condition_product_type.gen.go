// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newDiscountConditionProductType(db *gorm.DB, opts ...gen.DOOption) discountConditionProductType {
	_discountConditionProductType := discountConditionProductType{}

	_discountConditionProductType.discountConditionProductTypeDo.UseDB(db, opts...)
	_discountConditionProductType.discountConditionProductTypeDo.UseModel(&model.DiscountConditionProductType{})

	tableName := _discountConditionProductType.discountConditionProductTypeDo.TableName()
	_discountConditionProductType.ALL = field.NewAsterisk(tableName)
	_discountConditionProductType.ProductTypeID = field.NewString(tableName, "product_type_id")
	_discountConditionProductType.ConditionID = field.NewString(tableName, "condition_id")
	_discountConditionProductType.CreatedAt = field.NewTime(tableName, "created_at")
	_discountConditionProductType.UpdatedAt = field.NewTime(tableName, "updated_at")
	_discountConditionProductType.Metadata = field.NewString(tableName, "metadata")

	_discountConditionProductType.fillFieldMap()

	return _discountConditionProductType
}

type discountConditionProductType struct {
	discountConditionProductTypeDo discountConditionProductTypeDo

	ALL           field.Asterisk
	ProductTypeID field.String
	ConditionID   field.String
	CreatedAt     field.Time
	UpdatedAt     field.Time
	Metadata      field.String

	fieldMap map[string]field.Expr
}

func (d discountConditionProductType) Table(newTableName string) *discountConditionProductType {
	d.discountConditionProductTypeDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d discountConditionProductType) As(alias string) *discountConditionProductType {
	d.discountConditionProductTypeDo.DO = *(d.discountConditionProductTypeDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *discountConditionProductType) updateTableName(table string) *discountConditionProductType {
	d.ALL = field.NewAsterisk(table)
	d.ProductTypeID = field.NewString(table, "product_type_id")
	d.ConditionID = field.NewString(table, "condition_id")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.Metadata = field.NewString(table, "metadata")

	d.fillFieldMap()

	return d
}

func (d *discountConditionProductType) WithContext(ctx context.Context) *discountConditionProductTypeDo {
	return d.discountConditionProductTypeDo.WithContext(ctx)
}

func (d discountConditionProductType) TableName() string {
	return d.discountConditionProductTypeDo.TableName()
}

func (d discountConditionProductType) Alias() string { return d.discountConditionProductTypeDo.Alias() }

func (d discountConditionProductType) Columns(cols ...field.Expr) gen.Columns {
	return d.discountConditionProductTypeDo.Columns(cols...)
}

func (d *discountConditionProductType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *discountConditionProductType) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 5)
	d.fieldMap["product_type_id"] = d.ProductTypeID
	d.fieldMap["condition_id"] = d.ConditionID
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["metadata"] = d.Metadata
}

func (d discountConditionProductType) clone(db *gorm.DB) discountConditionProductType {
	d.discountConditionProductTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d discountConditionProductType) replaceDB(db *gorm.DB) discountConditionProductType {
	d.discountConditionProductTypeDo.ReplaceDB(db)
	return d
}

type discountConditionProductTypeDo struct{ gen.DO }

func (d discountConditionProductTypeDo) Debug() *discountConditionProductTypeDo {
	return d.withDO(d.DO.Debug())
}

func (d discountConditionProductTypeDo) WithContext(ctx context.Context) *discountConditionProductTypeDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d discountConditionProductTypeDo) ReadDB() *discountConditionProductTypeDo {
	return d.Clauses(dbresolver.Read)
}

func (d discountConditionProductTypeDo) WriteDB() *discountConditionProductTypeDo {
	return d.Clauses(dbresolver.Write)
}

func (d discountConditionProductTypeDo) Session(config *gorm.Session) *discountConditionProductTypeDo {
	return d.withDO(d.DO.Session(config))
}

func (d discountConditionProductTypeDo) Clauses(conds ...clause.Expression) *discountConditionProductTypeDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d discountConditionProductTypeDo) Returning(value interface{}, columns ...string) *discountConditionProductTypeDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d discountConditionProductTypeDo) Not(conds ...gen.Condition) *discountConditionProductTypeDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d discountConditionProductTypeDo) Or(conds ...gen.Condition) *discountConditionProductTypeDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d discountConditionProductTypeDo) Select(conds ...field.Expr) *discountConditionProductTypeDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d discountConditionProductTypeDo) Where(conds ...gen.Condition) *discountConditionProductTypeDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d discountConditionProductTypeDo) Order(conds ...field.Expr) *discountConditionProductTypeDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d discountConditionProductTypeDo) Distinct(cols ...field.Expr) *discountConditionProductTypeDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d discountConditionProductTypeDo) Omit(cols ...field.Expr) *discountConditionProductTypeDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d discountConditionProductTypeDo) Join(table schema.Tabler, on ...field.Expr) *discountConditionProductTypeDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d discountConditionProductTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *discountConditionProductTypeDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d discountConditionProductTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) *discountConditionProductTypeDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d discountConditionProductTypeDo) Group(cols ...field.Expr) *discountConditionProductTypeDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d discountConditionProductTypeDo) Having(conds ...gen.Condition) *discountConditionProductTypeDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d discountConditionProductTypeDo) Limit(limit int) *discountConditionProductTypeDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d discountConditionProductTypeDo) Offset(offset int) *discountConditionProductTypeDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d discountConditionProductTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *discountConditionProductTypeDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d discountConditionProductTypeDo) Unscoped() *discountConditionProductTypeDo {
	return d.withDO(d.DO.Unscoped())
}

func (d discountConditionProductTypeDo) Create(values ...*model.DiscountConditionProductType) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d discountConditionProductTypeDo) CreateInBatches(values []*model.DiscountConditionProductType, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d discountConditionProductTypeDo) Save(values ...*model.DiscountConditionProductType) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d discountConditionProductTypeDo) First() (*model.DiscountConditionProductType, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiscountConditionProductType), nil
	}
}

func (d discountConditionProductTypeDo) Take() (*model.DiscountConditionProductType, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiscountConditionProductType), nil
	}
}

func (d discountConditionProductTypeDo) Last() (*model.DiscountConditionProductType, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiscountConditionProductType), nil
	}
}

func (d discountConditionProductTypeDo) Find() ([]*model.DiscountConditionProductType, error) {
	result, err := d.DO.Find()
	return result.([]*model.DiscountConditionProductType), err
}

func (d discountConditionProductTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DiscountConditionProductType, err error) {
	buf := make([]*model.DiscountConditionProductType, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d discountConditionProductTypeDo) FindInBatches(result *[]*model.DiscountConditionProductType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d discountConditionProductTypeDo) Attrs(attrs ...field.AssignExpr) *discountConditionProductTypeDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d discountConditionProductTypeDo) Assign(attrs ...field.AssignExpr) *discountConditionProductTypeDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d discountConditionProductTypeDo) Joins(fields ...field.RelationField) *discountConditionProductTypeDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d discountConditionProductTypeDo) Preload(fields ...field.RelationField) *discountConditionProductTypeDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d discountConditionProductTypeDo) FirstOrInit() (*model.DiscountConditionProductType, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiscountConditionProductType), nil
	}
}

func (d discountConditionProductTypeDo) FirstOrCreate() (*model.DiscountConditionProductType, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiscountConditionProductType), nil
	}
}

func (d discountConditionProductTypeDo) FindByPage(offset int, limit int) (result []*model.DiscountConditionProductType, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d discountConditionProductTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d discountConditionProductTypeDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d discountConditionProductTypeDo) Delete(models ...*model.DiscountConditionProductType) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *discountConditionProductTypeDo) withDO(do gen.Dao) *discountConditionProductTypeDo {
	d.DO = *do.(*gen.DO)
	return d
}
