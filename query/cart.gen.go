// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newCart(db *gorm.DB, opts ...gen.DOOption) cart {
	_cart := cart{}

	_cart.cartDo.UseDB(db, opts...)
	_cart.cartDo.UseModel(&model.Cart{})

	tableName := _cart.cartDo.TableName()
	_cart.ALL = field.NewAsterisk(tableName)
	_cart.ID = field.NewString(tableName, "id")
	_cart.RegionID = field.NewString(tableName, "region_id")
	_cart.CustomerID = field.NewString(tableName, "customer_id")
	_cart.SalesChannelID = field.NewString(tableName, "sales_channel_id")
	_cart.Email = field.NewString(tableName, "email")
	_cart.CurrencyCode = field.NewString(tableName, "currency_code")
	_cart.ShippingAddressID = field.NewString(tableName, "shipping_address_id")
	_cart.BillingAddressID = field.NewString(tableName, "billing_address_id")
	_cart.Metadata = field.NewString(tableName, "metadata")
	_cart.CreatedAt = field.NewTime(tableName, "created_at")
	_cart.UpdatedAt = field.NewTime(tableName, "updated_at")
	_cart.DeletedAt = field.NewField(tableName, "deleted_at")

	_cart.fillFieldMap()

	return _cart
}

type cart struct {
	cartDo cartDo

	ALL               field.Asterisk
	ID                field.String
	RegionID          field.String
	CustomerID        field.String
	SalesChannelID    field.String
	Email             field.String
	CurrencyCode      field.String
	ShippingAddressID field.String
	BillingAddressID  field.String
	Metadata          field.String
	CreatedAt         field.Time
	UpdatedAt         field.Time
	DeletedAt         field.Field

	fieldMap map[string]field.Expr
}

func (c cart) Table(newTableName string) *cart {
	c.cartDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cart) As(alias string) *cart {
	c.cartDo.DO = *(c.cartDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cart) updateTableName(table string) *cart {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewString(table, "id")
	c.RegionID = field.NewString(table, "region_id")
	c.CustomerID = field.NewString(table, "customer_id")
	c.SalesChannelID = field.NewString(table, "sales_channel_id")
	c.Email = field.NewString(table, "email")
	c.CurrencyCode = field.NewString(table, "currency_code")
	c.ShippingAddressID = field.NewString(table, "shipping_address_id")
	c.BillingAddressID = field.NewString(table, "billing_address_id")
	c.Metadata = field.NewString(table, "metadata")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")

	c.fillFieldMap()

	return c
}

func (c *cart) WithContext(ctx context.Context) *cartDo { return c.cartDo.WithContext(ctx) }

func (c cart) TableName() string { return c.cartDo.TableName() }

func (c cart) Alias() string { return c.cartDo.Alias() }

func (c cart) Columns(cols ...field.Expr) gen.Columns { return c.cartDo.Columns(cols...) }

func (c *cart) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cart) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 12)
	c.fieldMap["id"] = c.ID
	c.fieldMap["region_id"] = c.RegionID
	c.fieldMap["customer_id"] = c.CustomerID
	c.fieldMap["sales_channel_id"] = c.SalesChannelID
	c.fieldMap["email"] = c.Email
	c.fieldMap["currency_code"] = c.CurrencyCode
	c.fieldMap["shipping_address_id"] = c.ShippingAddressID
	c.fieldMap["billing_address_id"] = c.BillingAddressID
	c.fieldMap["metadata"] = c.Metadata
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
}

func (c cart) clone(db *gorm.DB) cart {
	c.cartDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cart) replaceDB(db *gorm.DB) cart {
	c.cartDo.ReplaceDB(db)
	return c
}

type cartDo struct{ gen.DO }

func (c cartDo) Debug() *cartDo {
	return c.withDO(c.DO.Debug())
}

func (c cartDo) WithContext(ctx context.Context) *cartDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cartDo) ReadDB() *cartDo {
	return c.Clauses(dbresolver.Read)
}

func (c cartDo) WriteDB() *cartDo {
	return c.Clauses(dbresolver.Write)
}

func (c cartDo) Session(config *gorm.Session) *cartDo {
	return c.withDO(c.DO.Session(config))
}

func (c cartDo) Clauses(conds ...clause.Expression) *cartDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cartDo) Returning(value interface{}, columns ...string) *cartDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cartDo) Not(conds ...gen.Condition) *cartDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cartDo) Or(conds ...gen.Condition) *cartDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cartDo) Select(conds ...field.Expr) *cartDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cartDo) Where(conds ...gen.Condition) *cartDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cartDo) Order(conds ...field.Expr) *cartDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cartDo) Distinct(cols ...field.Expr) *cartDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cartDo) Omit(cols ...field.Expr) *cartDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cartDo) Join(table schema.Tabler, on ...field.Expr) *cartDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cartDo) LeftJoin(table schema.Tabler, on ...field.Expr) *cartDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cartDo) RightJoin(table schema.Tabler, on ...field.Expr) *cartDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cartDo) Group(cols ...field.Expr) *cartDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cartDo) Having(conds ...gen.Condition) *cartDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cartDo) Limit(limit int) *cartDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cartDo) Offset(offset int) *cartDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cartDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *cartDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cartDo) Unscoped() *cartDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cartDo) Create(values ...*model.Cart) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cartDo) CreateInBatches(values []*model.Cart, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cartDo) Save(values ...*model.Cart) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cartDo) First() (*model.Cart, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Cart), nil
	}
}

func (c cartDo) Take() (*model.Cart, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Cart), nil
	}
}

func (c cartDo) Last() (*model.Cart, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Cart), nil
	}
}

func (c cartDo) Find() ([]*model.Cart, error) {
	result, err := c.DO.Find()
	return result.([]*model.Cart), err
}

func (c cartDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Cart, err error) {
	buf := make([]*model.Cart, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cartDo) FindInBatches(result *[]*model.Cart, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cartDo) Attrs(attrs ...field.AssignExpr) *cartDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cartDo) Assign(attrs ...field.AssignExpr) *cartDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cartDo) Joins(fields ...field.RelationField) *cartDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cartDo) Preload(fields ...field.RelationField) *cartDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cartDo) FirstOrInit() (*model.Cart, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Cart), nil
	}
}

func (c cartDo) FirstOrCreate() (*model.Cart, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Cart), nil
	}
}

func (c cartDo) FindByPage(offset int, limit int) (result []*model.Cart, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cartDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cartDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cartDo) Delete(models ...*model.Cart) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cartDo) withDO(do gen.Dao) *cartDo {
	c.DO = *do.(*gen.DO)
	return c
}
