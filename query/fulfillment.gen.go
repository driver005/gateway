// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newFulfillment(db *gorm.DB, opts ...gen.DOOption) fulfillment {
	_fulfillment := fulfillment{}

	_fulfillment.fulfillmentDo.UseDB(db, opts...)
	_fulfillment.fulfillmentDo.UseModel(&model.Fulfillment{})

	tableName := _fulfillment.fulfillmentDo.TableName()
	_fulfillment.ALL = field.NewAsterisk(tableName)
	_fulfillment.ID = field.NewString(tableName, "id")
	_fulfillment.LocationID = field.NewString(tableName, "location_id")
	_fulfillment.PackedAt = field.NewTime(tableName, "packed_at")
	_fulfillment.ShippedAt = field.NewTime(tableName, "shipped_at")
	_fulfillment.DeliveredAt = field.NewTime(tableName, "delivered_at")
	_fulfillment.CanceledAt = field.NewTime(tableName, "canceled_at")
	_fulfillment.Data = field.NewString(tableName, "data")
	_fulfillment.ProviderID = field.NewString(tableName, "provider_id")
	_fulfillment.ShippingOptionID = field.NewString(tableName, "shipping_option_id")
	_fulfillment.Metadata = field.NewString(tableName, "metadata")
	_fulfillment.DeliveryAddressID = field.NewString(tableName, "delivery_address_id")
	_fulfillment.ItemsID = field.NewString(tableName, "items_id")
	_fulfillment.CreatedAt = field.NewTime(tableName, "created_at")
	_fulfillment.UpdatedAt = field.NewTime(tableName, "updated_at")
	_fulfillment.DeletedAt = field.NewField(tableName, "deleted_at")

	_fulfillment.fillFieldMap()

	return _fulfillment
}

type fulfillment struct {
	fulfillmentDo fulfillmentDo

	ALL               field.Asterisk
	ID                field.String
	LocationID        field.String
	PackedAt          field.Time
	ShippedAt         field.Time
	DeliveredAt       field.Time
	CanceledAt        field.Time
	Data              field.String
	ProviderID        field.String
	ShippingOptionID  field.String
	Metadata          field.String
	DeliveryAddressID field.String
	ItemsID           field.String
	CreatedAt         field.Time
	UpdatedAt         field.Time
	DeletedAt         field.Field

	fieldMap map[string]field.Expr
}

func (f fulfillment) Table(newTableName string) *fulfillment {
	f.fulfillmentDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fulfillment) As(alias string) *fulfillment {
	f.fulfillmentDo.DO = *(f.fulfillmentDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fulfillment) updateTableName(table string) *fulfillment {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewString(table, "id")
	f.LocationID = field.NewString(table, "location_id")
	f.PackedAt = field.NewTime(table, "packed_at")
	f.ShippedAt = field.NewTime(table, "shipped_at")
	f.DeliveredAt = field.NewTime(table, "delivered_at")
	f.CanceledAt = field.NewTime(table, "canceled_at")
	f.Data = field.NewString(table, "data")
	f.ProviderID = field.NewString(table, "provider_id")
	f.ShippingOptionID = field.NewString(table, "shipping_option_id")
	f.Metadata = field.NewString(table, "metadata")
	f.DeliveryAddressID = field.NewString(table, "delivery_address_id")
	f.ItemsID = field.NewString(table, "items_id")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.UpdatedAt = field.NewTime(table, "updated_at")
	f.DeletedAt = field.NewField(table, "deleted_at")

	f.fillFieldMap()

	return f
}

func (f *fulfillment) WithContext(ctx context.Context) *fulfillmentDo {
	return f.fulfillmentDo.WithContext(ctx)
}

func (f fulfillment) TableName() string { return f.fulfillmentDo.TableName() }

func (f fulfillment) Alias() string { return f.fulfillmentDo.Alias() }

func (f fulfillment) Columns(cols ...field.Expr) gen.Columns { return f.fulfillmentDo.Columns(cols...) }

func (f *fulfillment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fulfillment) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 15)
	f.fieldMap["id"] = f.ID
	f.fieldMap["location_id"] = f.LocationID
	f.fieldMap["packed_at"] = f.PackedAt
	f.fieldMap["shipped_at"] = f.ShippedAt
	f.fieldMap["delivered_at"] = f.DeliveredAt
	f.fieldMap["canceled_at"] = f.CanceledAt
	f.fieldMap["data"] = f.Data
	f.fieldMap["provider_id"] = f.ProviderID
	f.fieldMap["shipping_option_id"] = f.ShippingOptionID
	f.fieldMap["metadata"] = f.Metadata
	f.fieldMap["delivery_address_id"] = f.DeliveryAddressID
	f.fieldMap["items_id"] = f.ItemsID
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["deleted_at"] = f.DeletedAt
}

func (f fulfillment) clone(db *gorm.DB) fulfillment {
	f.fulfillmentDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fulfillment) replaceDB(db *gorm.DB) fulfillment {
	f.fulfillmentDo.ReplaceDB(db)
	return f
}

type fulfillmentDo struct{ gen.DO }

func (f fulfillmentDo) Debug() *fulfillmentDo {
	return f.withDO(f.DO.Debug())
}

func (f fulfillmentDo) WithContext(ctx context.Context) *fulfillmentDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fulfillmentDo) ReadDB() *fulfillmentDo {
	return f.Clauses(dbresolver.Read)
}

func (f fulfillmentDo) WriteDB() *fulfillmentDo {
	return f.Clauses(dbresolver.Write)
}

func (f fulfillmentDo) Session(config *gorm.Session) *fulfillmentDo {
	return f.withDO(f.DO.Session(config))
}

func (f fulfillmentDo) Clauses(conds ...clause.Expression) *fulfillmentDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fulfillmentDo) Returning(value interface{}, columns ...string) *fulfillmentDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fulfillmentDo) Not(conds ...gen.Condition) *fulfillmentDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fulfillmentDo) Or(conds ...gen.Condition) *fulfillmentDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fulfillmentDo) Select(conds ...field.Expr) *fulfillmentDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fulfillmentDo) Where(conds ...gen.Condition) *fulfillmentDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fulfillmentDo) Order(conds ...field.Expr) *fulfillmentDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fulfillmentDo) Distinct(cols ...field.Expr) *fulfillmentDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fulfillmentDo) Omit(cols ...field.Expr) *fulfillmentDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fulfillmentDo) Join(table schema.Tabler, on ...field.Expr) *fulfillmentDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fulfillmentDo) LeftJoin(table schema.Tabler, on ...field.Expr) *fulfillmentDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fulfillmentDo) RightJoin(table schema.Tabler, on ...field.Expr) *fulfillmentDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fulfillmentDo) Group(cols ...field.Expr) *fulfillmentDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fulfillmentDo) Having(conds ...gen.Condition) *fulfillmentDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fulfillmentDo) Limit(limit int) *fulfillmentDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fulfillmentDo) Offset(offset int) *fulfillmentDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fulfillmentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *fulfillmentDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fulfillmentDo) Unscoped() *fulfillmentDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fulfillmentDo) Create(values ...*model.Fulfillment) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fulfillmentDo) CreateInBatches(values []*model.Fulfillment, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fulfillmentDo) Save(values ...*model.Fulfillment) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fulfillmentDo) First() (*model.Fulfillment, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Fulfillment), nil
	}
}

func (f fulfillmentDo) Take() (*model.Fulfillment, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Fulfillment), nil
	}
}

func (f fulfillmentDo) Last() (*model.Fulfillment, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Fulfillment), nil
	}
}

func (f fulfillmentDo) Find() ([]*model.Fulfillment, error) {
	result, err := f.DO.Find()
	return result.([]*model.Fulfillment), err
}

func (f fulfillmentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Fulfillment, err error) {
	buf := make([]*model.Fulfillment, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fulfillmentDo) FindInBatches(result *[]*model.Fulfillment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fulfillmentDo) Attrs(attrs ...field.AssignExpr) *fulfillmentDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fulfillmentDo) Assign(attrs ...field.AssignExpr) *fulfillmentDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fulfillmentDo) Joins(fields ...field.RelationField) *fulfillmentDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fulfillmentDo) Preload(fields ...field.RelationField) *fulfillmentDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fulfillmentDo) FirstOrInit() (*model.Fulfillment, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Fulfillment), nil
	}
}

func (f fulfillmentDo) FirstOrCreate() (*model.Fulfillment, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Fulfillment), nil
	}
}

func (f fulfillmentDo) FindByPage(offset int, limit int) (result []*model.Fulfillment, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fulfillmentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fulfillmentDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fulfillmentDo) Delete(models ...*model.Fulfillment) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fulfillmentDo) withDO(do gen.Dao) *fulfillmentDo {
	f.DO = *do.(*gen.DO)
	return f
}
