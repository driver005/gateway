// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newShippingMethod(db *gorm.DB, opts ...gen.DOOption) shippingMethod {
	_shippingMethod := shippingMethod{}

	_shippingMethod.shippingMethodDo.UseDB(db, opts...)
	_shippingMethod.shippingMethodDo.UseModel(&model.ShippingMethod{})

	tableName := _shippingMethod.shippingMethodDo.TableName()
	_shippingMethod.ALL = field.NewAsterisk(tableName)
	_shippingMethod.ID = field.NewString(tableName, "id")
	_shippingMethod.ShippingOptionID = field.NewString(tableName, "shipping_option_id")
	_shippingMethod.OrderID = field.NewString(tableName, "order_id")
	_shippingMethod.CartID = field.NewString(tableName, "cart_id")
	_shippingMethod.SwapID = field.NewString(tableName, "swap_id")
	_shippingMethod.ReturnID = field.NewString(tableName, "return_id")
	_shippingMethod.Price = field.NewInt32(tableName, "price")
	_shippingMethod.Data = field.NewString(tableName, "data")
	_shippingMethod.ClaimOrderID = field.NewString(tableName, "claim_order_id")
	_shippingMethod.IncludesTax = field.NewBool(tableName, "includes_tax")

	_shippingMethod.fillFieldMap()

	return _shippingMethod
}

type shippingMethod struct {
	shippingMethodDo shippingMethodDo

	ALL              field.Asterisk
	ID               field.String
	ShippingOptionID field.String
	OrderID          field.String
	CartID           field.String
	SwapID           field.String
	ReturnID         field.String
	Price            field.Int32
	Data             field.String
	ClaimOrderID     field.String
	IncludesTax      field.Bool

	fieldMap map[string]field.Expr
}

func (s shippingMethod) Table(newTableName string) *shippingMethod {
	s.shippingMethodDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s shippingMethod) As(alias string) *shippingMethod {
	s.shippingMethodDo.DO = *(s.shippingMethodDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *shippingMethod) updateTableName(table string) *shippingMethod {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.ShippingOptionID = field.NewString(table, "shipping_option_id")
	s.OrderID = field.NewString(table, "order_id")
	s.CartID = field.NewString(table, "cart_id")
	s.SwapID = field.NewString(table, "swap_id")
	s.ReturnID = field.NewString(table, "return_id")
	s.Price = field.NewInt32(table, "price")
	s.Data = field.NewString(table, "data")
	s.ClaimOrderID = field.NewString(table, "claim_order_id")
	s.IncludesTax = field.NewBool(table, "includes_tax")

	s.fillFieldMap()

	return s
}

func (s *shippingMethod) WithContext(ctx context.Context) *shippingMethodDo {
	return s.shippingMethodDo.WithContext(ctx)
}

func (s shippingMethod) TableName() string { return s.shippingMethodDo.TableName() }

func (s shippingMethod) Alias() string { return s.shippingMethodDo.Alias() }

func (s shippingMethod) Columns(cols ...field.Expr) gen.Columns {
	return s.shippingMethodDo.Columns(cols...)
}

func (s *shippingMethod) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *shippingMethod) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["id"] = s.ID
	s.fieldMap["shipping_option_id"] = s.ShippingOptionID
	s.fieldMap["order_id"] = s.OrderID
	s.fieldMap["cart_id"] = s.CartID
	s.fieldMap["swap_id"] = s.SwapID
	s.fieldMap["return_id"] = s.ReturnID
	s.fieldMap["price"] = s.Price
	s.fieldMap["data"] = s.Data
	s.fieldMap["claim_order_id"] = s.ClaimOrderID
	s.fieldMap["includes_tax"] = s.IncludesTax
}

func (s shippingMethod) clone(db *gorm.DB) shippingMethod {
	s.shippingMethodDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s shippingMethod) replaceDB(db *gorm.DB) shippingMethod {
	s.shippingMethodDo.ReplaceDB(db)
	return s
}

type shippingMethodDo struct{ gen.DO }

func (s shippingMethodDo) Debug() *shippingMethodDo {
	return s.withDO(s.DO.Debug())
}

func (s shippingMethodDo) WithContext(ctx context.Context) *shippingMethodDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s shippingMethodDo) ReadDB() *shippingMethodDo {
	return s.Clauses(dbresolver.Read)
}

func (s shippingMethodDo) WriteDB() *shippingMethodDo {
	return s.Clauses(dbresolver.Write)
}

func (s shippingMethodDo) Session(config *gorm.Session) *shippingMethodDo {
	return s.withDO(s.DO.Session(config))
}

func (s shippingMethodDo) Clauses(conds ...clause.Expression) *shippingMethodDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s shippingMethodDo) Returning(value interface{}, columns ...string) *shippingMethodDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s shippingMethodDo) Not(conds ...gen.Condition) *shippingMethodDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s shippingMethodDo) Or(conds ...gen.Condition) *shippingMethodDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s shippingMethodDo) Select(conds ...field.Expr) *shippingMethodDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s shippingMethodDo) Where(conds ...gen.Condition) *shippingMethodDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s shippingMethodDo) Order(conds ...field.Expr) *shippingMethodDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s shippingMethodDo) Distinct(cols ...field.Expr) *shippingMethodDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s shippingMethodDo) Omit(cols ...field.Expr) *shippingMethodDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s shippingMethodDo) Join(table schema.Tabler, on ...field.Expr) *shippingMethodDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s shippingMethodDo) LeftJoin(table schema.Tabler, on ...field.Expr) *shippingMethodDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s shippingMethodDo) RightJoin(table schema.Tabler, on ...field.Expr) *shippingMethodDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s shippingMethodDo) Group(cols ...field.Expr) *shippingMethodDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s shippingMethodDo) Having(conds ...gen.Condition) *shippingMethodDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s shippingMethodDo) Limit(limit int) *shippingMethodDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s shippingMethodDo) Offset(offset int) *shippingMethodDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s shippingMethodDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *shippingMethodDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s shippingMethodDo) Unscoped() *shippingMethodDo {
	return s.withDO(s.DO.Unscoped())
}

func (s shippingMethodDo) Create(values ...*model.ShippingMethod) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s shippingMethodDo) CreateInBatches(values []*model.ShippingMethod, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s shippingMethodDo) Save(values ...*model.ShippingMethod) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s shippingMethodDo) First() (*model.ShippingMethod, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShippingMethod), nil
	}
}

func (s shippingMethodDo) Take() (*model.ShippingMethod, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShippingMethod), nil
	}
}

func (s shippingMethodDo) Last() (*model.ShippingMethod, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShippingMethod), nil
	}
}

func (s shippingMethodDo) Find() ([]*model.ShippingMethod, error) {
	result, err := s.DO.Find()
	return result.([]*model.ShippingMethod), err
}

func (s shippingMethodDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ShippingMethod, err error) {
	buf := make([]*model.ShippingMethod, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s shippingMethodDo) FindInBatches(result *[]*model.ShippingMethod, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s shippingMethodDo) Attrs(attrs ...field.AssignExpr) *shippingMethodDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s shippingMethodDo) Assign(attrs ...field.AssignExpr) *shippingMethodDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s shippingMethodDo) Joins(fields ...field.RelationField) *shippingMethodDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s shippingMethodDo) Preload(fields ...field.RelationField) *shippingMethodDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s shippingMethodDo) FirstOrInit() (*model.ShippingMethod, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShippingMethod), nil
	}
}

func (s shippingMethodDo) FirstOrCreate() (*model.ShippingMethod, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShippingMethod), nil
	}
}

func (s shippingMethodDo) FindByPage(offset int, limit int) (result []*model.ShippingMethod, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s shippingMethodDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s shippingMethodDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s shippingMethodDo) Delete(models ...*model.ShippingMethod) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *shippingMethodDo) withDO(do gen.Dao) *shippingMethodDo {
	s.DO = *do.(*gen.DO)
	return s
}
