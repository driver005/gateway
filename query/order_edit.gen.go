// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newOrderEdit(db *gorm.DB, opts ...gen.DOOption) orderEdit {
	_orderEdit := orderEdit{}

	_orderEdit.orderEditDo.UseDB(db, opts...)
	_orderEdit.orderEditDo.UseModel(&model.OrderEdit{})

	tableName := _orderEdit.orderEditDo.TableName()
	_orderEdit.ALL = field.NewAsterisk(tableName)
	_orderEdit.ID = field.NewString(tableName, "id")
	_orderEdit.CreatedAt = field.NewTime(tableName, "created_at")
	_orderEdit.UpdatedAt = field.NewTime(tableName, "updated_at")
	_orderEdit.OrderID = field.NewString(tableName, "order_id")
	_orderEdit.InternalNote = field.NewString(tableName, "internal_note")
	_orderEdit.CreatedBy = field.NewString(tableName, "created_by")
	_orderEdit.RequestedBy = field.NewString(tableName, "requested_by")
	_orderEdit.RequestedAt = field.NewTime(tableName, "requested_at")
	_orderEdit.ConfirmedBy = field.NewString(tableName, "confirmed_by")
	_orderEdit.ConfirmedAt = field.NewTime(tableName, "confirmed_at")
	_orderEdit.DeclinedBy = field.NewString(tableName, "declined_by")
	_orderEdit.DeclinedReason = field.NewString(tableName, "declined_reason")
	_orderEdit.DeclinedAt = field.NewTime(tableName, "declined_at")
	_orderEdit.CanceledBy = field.NewString(tableName, "canceled_by")
	_orderEdit.CanceledAt = field.NewTime(tableName, "canceled_at")
	_orderEdit.PaymentCollectionID = field.NewString(tableName, "payment_collection_id")

	_orderEdit.fillFieldMap()

	return _orderEdit
}

type orderEdit struct {
	orderEditDo orderEditDo

	ALL                 field.Asterisk
	ID                  field.String
	CreatedAt           field.Time
	UpdatedAt           field.Time
	OrderID             field.String
	InternalNote        field.String
	CreatedBy           field.String
	RequestedBy         field.String
	RequestedAt         field.Time
	ConfirmedBy         field.String
	ConfirmedAt         field.Time
	DeclinedBy          field.String
	DeclinedReason      field.String
	DeclinedAt          field.Time
	CanceledBy          field.String
	CanceledAt          field.Time
	PaymentCollectionID field.String

	fieldMap map[string]field.Expr
}

func (o orderEdit) Table(newTableName string) *orderEdit {
	o.orderEditDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o orderEdit) As(alias string) *orderEdit {
	o.orderEditDo.DO = *(o.orderEditDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *orderEdit) updateTableName(table string) *orderEdit {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewString(table, "id")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.UpdatedAt = field.NewTime(table, "updated_at")
	o.OrderID = field.NewString(table, "order_id")
	o.InternalNote = field.NewString(table, "internal_note")
	o.CreatedBy = field.NewString(table, "created_by")
	o.RequestedBy = field.NewString(table, "requested_by")
	o.RequestedAt = field.NewTime(table, "requested_at")
	o.ConfirmedBy = field.NewString(table, "confirmed_by")
	o.ConfirmedAt = field.NewTime(table, "confirmed_at")
	o.DeclinedBy = field.NewString(table, "declined_by")
	o.DeclinedReason = field.NewString(table, "declined_reason")
	o.DeclinedAt = field.NewTime(table, "declined_at")
	o.CanceledBy = field.NewString(table, "canceled_by")
	o.CanceledAt = field.NewTime(table, "canceled_at")
	o.PaymentCollectionID = field.NewString(table, "payment_collection_id")

	o.fillFieldMap()

	return o
}

func (o *orderEdit) WithContext(ctx context.Context) *orderEditDo {
	return o.orderEditDo.WithContext(ctx)
}

func (o orderEdit) TableName() string { return o.orderEditDo.TableName() }

func (o orderEdit) Alias() string { return o.orderEditDo.Alias() }

func (o orderEdit) Columns(cols ...field.Expr) gen.Columns { return o.orderEditDo.Columns(cols...) }

func (o *orderEdit) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *orderEdit) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 16)
	o.fieldMap["id"] = o.ID
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
	o.fieldMap["order_id"] = o.OrderID
	o.fieldMap["internal_note"] = o.InternalNote
	o.fieldMap["created_by"] = o.CreatedBy
	o.fieldMap["requested_by"] = o.RequestedBy
	o.fieldMap["requested_at"] = o.RequestedAt
	o.fieldMap["confirmed_by"] = o.ConfirmedBy
	o.fieldMap["confirmed_at"] = o.ConfirmedAt
	o.fieldMap["declined_by"] = o.DeclinedBy
	o.fieldMap["declined_reason"] = o.DeclinedReason
	o.fieldMap["declined_at"] = o.DeclinedAt
	o.fieldMap["canceled_by"] = o.CanceledBy
	o.fieldMap["canceled_at"] = o.CanceledAt
	o.fieldMap["payment_collection_id"] = o.PaymentCollectionID
}

func (o orderEdit) clone(db *gorm.DB) orderEdit {
	o.orderEditDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o orderEdit) replaceDB(db *gorm.DB) orderEdit {
	o.orderEditDo.ReplaceDB(db)
	return o
}

type orderEditDo struct{ gen.DO }

func (o orderEditDo) Debug() *orderEditDo {
	return o.withDO(o.DO.Debug())
}

func (o orderEditDo) WithContext(ctx context.Context) *orderEditDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o orderEditDo) ReadDB() *orderEditDo {
	return o.Clauses(dbresolver.Read)
}

func (o orderEditDo) WriteDB() *orderEditDo {
	return o.Clauses(dbresolver.Write)
}

func (o orderEditDo) Session(config *gorm.Session) *orderEditDo {
	return o.withDO(o.DO.Session(config))
}

func (o orderEditDo) Clauses(conds ...clause.Expression) *orderEditDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o orderEditDo) Returning(value interface{}, columns ...string) *orderEditDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o orderEditDo) Not(conds ...gen.Condition) *orderEditDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o orderEditDo) Or(conds ...gen.Condition) *orderEditDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o orderEditDo) Select(conds ...field.Expr) *orderEditDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o orderEditDo) Where(conds ...gen.Condition) *orderEditDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o orderEditDo) Order(conds ...field.Expr) *orderEditDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o orderEditDo) Distinct(cols ...field.Expr) *orderEditDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o orderEditDo) Omit(cols ...field.Expr) *orderEditDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o orderEditDo) Join(table schema.Tabler, on ...field.Expr) *orderEditDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o orderEditDo) LeftJoin(table schema.Tabler, on ...field.Expr) *orderEditDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o orderEditDo) RightJoin(table schema.Tabler, on ...field.Expr) *orderEditDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o orderEditDo) Group(cols ...field.Expr) *orderEditDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o orderEditDo) Having(conds ...gen.Condition) *orderEditDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o orderEditDo) Limit(limit int) *orderEditDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o orderEditDo) Offset(offset int) *orderEditDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o orderEditDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *orderEditDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o orderEditDo) Unscoped() *orderEditDo {
	return o.withDO(o.DO.Unscoped())
}

func (o orderEditDo) Create(values ...*model.OrderEdit) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o orderEditDo) CreateInBatches(values []*model.OrderEdit, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o orderEditDo) Save(values ...*model.OrderEdit) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o orderEditDo) First() (*model.OrderEdit, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderEdit), nil
	}
}

func (o orderEditDo) Take() (*model.OrderEdit, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderEdit), nil
	}
}

func (o orderEditDo) Last() (*model.OrderEdit, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderEdit), nil
	}
}

func (o orderEditDo) Find() ([]*model.OrderEdit, error) {
	result, err := o.DO.Find()
	return result.([]*model.OrderEdit), err
}

func (o orderEditDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrderEdit, err error) {
	buf := make([]*model.OrderEdit, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o orderEditDo) FindInBatches(result *[]*model.OrderEdit, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o orderEditDo) Attrs(attrs ...field.AssignExpr) *orderEditDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o orderEditDo) Assign(attrs ...field.AssignExpr) *orderEditDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o orderEditDo) Joins(fields ...field.RelationField) *orderEditDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o orderEditDo) Preload(fields ...field.RelationField) *orderEditDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o orderEditDo) FirstOrInit() (*model.OrderEdit, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderEdit), nil
	}
}

func (o orderEditDo) FirstOrCreate() (*model.OrderEdit, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderEdit), nil
	}
}

func (o orderEditDo) FindByPage(offset int, limit int) (result []*model.OrderEdit, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o orderEditDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o orderEditDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o orderEditDo) Delete(models ...*model.OrderEdit) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *orderEditDo) withDO(do gen.Dao) *orderEditDo {
	o.DO = *do.(*gen.DO)
	return o
}
