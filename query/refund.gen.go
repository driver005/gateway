// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newRefund(db *gorm.DB, opts ...gen.DOOption) refund {
	_refund := refund{}

	_refund.refundDo.UseDB(db, opts...)
	_refund.refundDo.UseModel(&model.Refund{})

	tableName := _refund.refundDo.TableName()
	_refund.ALL = field.NewAsterisk(tableName)
	_refund.ID = field.NewString(tableName, "id")
	_refund.OrderID = field.NewString(tableName, "order_id")
	_refund.Amount = field.NewInt32(tableName, "amount")
	_refund.Note = field.NewString(tableName, "note")
	_refund.Reason = field.NewString(tableName, "reason")
	_refund.CreatedAt = field.NewTime(tableName, "created_at")
	_refund.UpdatedAt = field.NewTime(tableName, "updated_at")
	_refund.Metadata = field.NewString(tableName, "metadata")
	_refund.IdempotencyKey = field.NewString(tableName, "idempotency_key")
	_refund.PaymentID = field.NewString(tableName, "payment_id")

	_refund.fillFieldMap()

	return _refund
}

type refund struct {
	refundDo refundDo

	ALL            field.Asterisk
	ID             field.String
	OrderID        field.String
	Amount         field.Int32
	Note           field.String
	Reason         field.String
	CreatedAt      field.Time
	UpdatedAt      field.Time
	Metadata       field.String
	IdempotencyKey field.String
	PaymentID      field.String

	fieldMap map[string]field.Expr
}

func (r refund) Table(newTableName string) *refund {
	r.refundDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r refund) As(alias string) *refund {
	r.refundDo.DO = *(r.refundDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *refund) updateTableName(table string) *refund {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewString(table, "id")
	r.OrderID = field.NewString(table, "order_id")
	r.Amount = field.NewInt32(table, "amount")
	r.Note = field.NewString(table, "note")
	r.Reason = field.NewString(table, "reason")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")
	r.Metadata = field.NewString(table, "metadata")
	r.IdempotencyKey = field.NewString(table, "idempotency_key")
	r.PaymentID = field.NewString(table, "payment_id")

	r.fillFieldMap()

	return r
}

func (r *refund) WithContext(ctx context.Context) *refundDo { return r.refundDo.WithContext(ctx) }

func (r refund) TableName() string { return r.refundDo.TableName() }

func (r refund) Alias() string { return r.refundDo.Alias() }

func (r refund) Columns(cols ...field.Expr) gen.Columns { return r.refundDo.Columns(cols...) }

func (r *refund) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *refund) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 10)
	r.fieldMap["id"] = r.ID
	r.fieldMap["order_id"] = r.OrderID
	r.fieldMap["amount"] = r.Amount
	r.fieldMap["note"] = r.Note
	r.fieldMap["reason"] = r.Reason
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["metadata"] = r.Metadata
	r.fieldMap["idempotency_key"] = r.IdempotencyKey
	r.fieldMap["payment_id"] = r.PaymentID
}

func (r refund) clone(db *gorm.DB) refund {
	r.refundDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r refund) replaceDB(db *gorm.DB) refund {
	r.refundDo.ReplaceDB(db)
	return r
}

type refundDo struct{ gen.DO }

func (r refundDo) Debug() *refundDo {
	return r.withDO(r.DO.Debug())
}

func (r refundDo) WithContext(ctx context.Context) *refundDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r refundDo) ReadDB() *refundDo {
	return r.Clauses(dbresolver.Read)
}

func (r refundDo) WriteDB() *refundDo {
	return r.Clauses(dbresolver.Write)
}

func (r refundDo) Session(config *gorm.Session) *refundDo {
	return r.withDO(r.DO.Session(config))
}

func (r refundDo) Clauses(conds ...clause.Expression) *refundDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r refundDo) Returning(value interface{}, columns ...string) *refundDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r refundDo) Not(conds ...gen.Condition) *refundDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r refundDo) Or(conds ...gen.Condition) *refundDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r refundDo) Select(conds ...field.Expr) *refundDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r refundDo) Where(conds ...gen.Condition) *refundDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r refundDo) Order(conds ...field.Expr) *refundDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r refundDo) Distinct(cols ...field.Expr) *refundDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r refundDo) Omit(cols ...field.Expr) *refundDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r refundDo) Join(table schema.Tabler, on ...field.Expr) *refundDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r refundDo) LeftJoin(table schema.Tabler, on ...field.Expr) *refundDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r refundDo) RightJoin(table schema.Tabler, on ...field.Expr) *refundDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r refundDo) Group(cols ...field.Expr) *refundDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r refundDo) Having(conds ...gen.Condition) *refundDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r refundDo) Limit(limit int) *refundDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r refundDo) Offset(offset int) *refundDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r refundDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *refundDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r refundDo) Unscoped() *refundDo {
	return r.withDO(r.DO.Unscoped())
}

func (r refundDo) Create(values ...*model.Refund) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r refundDo) CreateInBatches(values []*model.Refund, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r refundDo) Save(values ...*model.Refund) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r refundDo) First() (*model.Refund, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Refund), nil
	}
}

func (r refundDo) Take() (*model.Refund, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Refund), nil
	}
}

func (r refundDo) Last() (*model.Refund, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Refund), nil
	}
}

func (r refundDo) Find() ([]*model.Refund, error) {
	result, err := r.DO.Find()
	return result.([]*model.Refund), err
}

func (r refundDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Refund, err error) {
	buf := make([]*model.Refund, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r refundDo) FindInBatches(result *[]*model.Refund, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r refundDo) Attrs(attrs ...field.AssignExpr) *refundDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r refundDo) Assign(attrs ...field.AssignExpr) *refundDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r refundDo) Joins(fields ...field.RelationField) *refundDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r refundDo) Preload(fields ...field.RelationField) *refundDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r refundDo) FirstOrInit() (*model.Refund, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Refund), nil
	}
}

func (r refundDo) FirstOrCreate() (*model.Refund, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Refund), nil
	}
}

func (r refundDo) FindByPage(offset int, limit int) (result []*model.Refund, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r refundDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r refundDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r refundDo) Delete(models ...*model.Refund) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *refundDo) withDO(do gen.Dao) *refundDo {
	r.DO = *do.(*gen.DO)
	return r
}
