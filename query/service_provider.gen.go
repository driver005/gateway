// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newServiceProvider(db *gorm.DB, opts ...gen.DOOption) serviceProvider {
	_serviceProvider := serviceProvider{}

	_serviceProvider.serviceProviderDo.UseDB(db, opts...)
	_serviceProvider.serviceProviderDo.UseModel(&model.ServiceProvider{})

	tableName := _serviceProvider.serviceProviderDo.TableName()
	_serviceProvider.ALL = field.NewAsterisk(tableName)
	_serviceProvider.ID = field.NewString(tableName, "id")
	_serviceProvider.Metadata = field.NewString(tableName, "metadata")
	_serviceProvider.CreatedAt = field.NewTime(tableName, "created_at")
	_serviceProvider.UpdatedAt = field.NewTime(tableName, "updated_at")
	_serviceProvider.DeletedAt = field.NewField(tableName, "deleted_at")

	_serviceProvider.fillFieldMap()

	return _serviceProvider
}

type serviceProvider struct {
	serviceProviderDo serviceProviderDo

	ALL       field.Asterisk
	ID        field.String
	Metadata  field.String
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (s serviceProvider) Table(newTableName string) *serviceProvider {
	s.serviceProviderDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s serviceProvider) As(alias string) *serviceProvider {
	s.serviceProviderDo.DO = *(s.serviceProviderDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *serviceProvider) updateTableName(table string) *serviceProvider {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.Metadata = field.NewString(table, "metadata")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *serviceProvider) WithContext(ctx context.Context) *serviceProviderDo {
	return s.serviceProviderDo.WithContext(ctx)
}

func (s serviceProvider) TableName() string { return s.serviceProviderDo.TableName() }

func (s serviceProvider) Alias() string { return s.serviceProviderDo.Alias() }

func (s serviceProvider) Columns(cols ...field.Expr) gen.Columns {
	return s.serviceProviderDo.Columns(cols...)
}

func (s *serviceProvider) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *serviceProvider) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.ID
	s.fieldMap["metadata"] = s.Metadata
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s serviceProvider) clone(db *gorm.DB) serviceProvider {
	s.serviceProviderDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s serviceProvider) replaceDB(db *gorm.DB) serviceProvider {
	s.serviceProviderDo.ReplaceDB(db)
	return s
}

type serviceProviderDo struct{ gen.DO }

func (s serviceProviderDo) Debug() *serviceProviderDo {
	return s.withDO(s.DO.Debug())
}

func (s serviceProviderDo) WithContext(ctx context.Context) *serviceProviderDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s serviceProviderDo) ReadDB() *serviceProviderDo {
	return s.Clauses(dbresolver.Read)
}

func (s serviceProviderDo) WriteDB() *serviceProviderDo {
	return s.Clauses(dbresolver.Write)
}

func (s serviceProviderDo) Session(config *gorm.Session) *serviceProviderDo {
	return s.withDO(s.DO.Session(config))
}

func (s serviceProviderDo) Clauses(conds ...clause.Expression) *serviceProviderDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s serviceProviderDo) Returning(value interface{}, columns ...string) *serviceProviderDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s serviceProviderDo) Not(conds ...gen.Condition) *serviceProviderDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s serviceProviderDo) Or(conds ...gen.Condition) *serviceProviderDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s serviceProviderDo) Select(conds ...field.Expr) *serviceProviderDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s serviceProviderDo) Where(conds ...gen.Condition) *serviceProviderDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s serviceProviderDo) Order(conds ...field.Expr) *serviceProviderDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s serviceProviderDo) Distinct(cols ...field.Expr) *serviceProviderDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s serviceProviderDo) Omit(cols ...field.Expr) *serviceProviderDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s serviceProviderDo) Join(table schema.Tabler, on ...field.Expr) *serviceProviderDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s serviceProviderDo) LeftJoin(table schema.Tabler, on ...field.Expr) *serviceProviderDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s serviceProviderDo) RightJoin(table schema.Tabler, on ...field.Expr) *serviceProviderDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s serviceProviderDo) Group(cols ...field.Expr) *serviceProviderDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s serviceProviderDo) Having(conds ...gen.Condition) *serviceProviderDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s serviceProviderDo) Limit(limit int) *serviceProviderDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s serviceProviderDo) Offset(offset int) *serviceProviderDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s serviceProviderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *serviceProviderDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s serviceProviderDo) Unscoped() *serviceProviderDo {
	return s.withDO(s.DO.Unscoped())
}

func (s serviceProviderDo) Create(values ...*model.ServiceProvider) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s serviceProviderDo) CreateInBatches(values []*model.ServiceProvider, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s serviceProviderDo) Save(values ...*model.ServiceProvider) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s serviceProviderDo) First() (*model.ServiceProvider, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServiceProvider), nil
	}
}

func (s serviceProviderDo) Take() (*model.ServiceProvider, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServiceProvider), nil
	}
}

func (s serviceProviderDo) Last() (*model.ServiceProvider, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServiceProvider), nil
	}
}

func (s serviceProviderDo) Find() ([]*model.ServiceProvider, error) {
	result, err := s.DO.Find()
	return result.([]*model.ServiceProvider), err
}

func (s serviceProviderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServiceProvider, err error) {
	buf := make([]*model.ServiceProvider, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s serviceProviderDo) FindInBatches(result *[]*model.ServiceProvider, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s serviceProviderDo) Attrs(attrs ...field.AssignExpr) *serviceProviderDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s serviceProviderDo) Assign(attrs ...field.AssignExpr) *serviceProviderDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s serviceProviderDo) Joins(fields ...field.RelationField) *serviceProviderDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s serviceProviderDo) Preload(fields ...field.RelationField) *serviceProviderDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s serviceProviderDo) FirstOrInit() (*model.ServiceProvider, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServiceProvider), nil
	}
}

func (s serviceProviderDo) FirstOrCreate() (*model.ServiceProvider, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServiceProvider), nil
	}
}

func (s serviceProviderDo) FindByPage(offset int, limit int) (result []*model.ServiceProvider, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s serviceProviderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s serviceProviderDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s serviceProviderDo) Delete(models ...*model.ServiceProvider) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *serviceProviderDo) withDO(do gen.Dao) *serviceProviderDo {
	s.DO = *do.(*gen.DO)
	return s
}
