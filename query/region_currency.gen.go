// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newRegionCurrency(db *gorm.DB, opts ...gen.DOOption) regionCurrency {
	_regionCurrency := regionCurrency{}

	_regionCurrency.regionCurrencyDo.UseDB(db, opts...)
	_regionCurrency.regionCurrencyDo.UseModel(&model.RegionCurrency{})

	tableName := _regionCurrency.regionCurrencyDo.TableName()
	_regionCurrency.ALL = field.NewAsterisk(tableName)
	_regionCurrency.Code = field.NewString(tableName, "code")
	_regionCurrency.Symbol = field.NewString(tableName, "symbol")
	_regionCurrency.SymbolNative = field.NewString(tableName, "symbol_native")
	_regionCurrency.Name = field.NewString(tableName, "name")

	_regionCurrency.fillFieldMap()

	return _regionCurrency
}

type regionCurrency struct {
	regionCurrencyDo regionCurrencyDo

	ALL          field.Asterisk
	Code         field.String
	Symbol       field.String
	SymbolNative field.String
	Name         field.String

	fieldMap map[string]field.Expr
}

func (r regionCurrency) Table(newTableName string) *regionCurrency {
	r.regionCurrencyDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r regionCurrency) As(alias string) *regionCurrency {
	r.regionCurrencyDo.DO = *(r.regionCurrencyDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *regionCurrency) updateTableName(table string) *regionCurrency {
	r.ALL = field.NewAsterisk(table)
	r.Code = field.NewString(table, "code")
	r.Symbol = field.NewString(table, "symbol")
	r.SymbolNative = field.NewString(table, "symbol_native")
	r.Name = field.NewString(table, "name")

	r.fillFieldMap()

	return r
}

func (r *regionCurrency) WithContext(ctx context.Context) *regionCurrencyDo {
	return r.regionCurrencyDo.WithContext(ctx)
}

func (r regionCurrency) TableName() string { return r.regionCurrencyDo.TableName() }

func (r regionCurrency) Alias() string { return r.regionCurrencyDo.Alias() }

func (r regionCurrency) Columns(cols ...field.Expr) gen.Columns {
	return r.regionCurrencyDo.Columns(cols...)
}

func (r *regionCurrency) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *regionCurrency) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 4)
	r.fieldMap["code"] = r.Code
	r.fieldMap["symbol"] = r.Symbol
	r.fieldMap["symbol_native"] = r.SymbolNative
	r.fieldMap["name"] = r.Name
}

func (r regionCurrency) clone(db *gorm.DB) regionCurrency {
	r.regionCurrencyDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r regionCurrency) replaceDB(db *gorm.DB) regionCurrency {
	r.regionCurrencyDo.ReplaceDB(db)
	return r
}

type regionCurrencyDo struct{ gen.DO }

func (r regionCurrencyDo) Debug() *regionCurrencyDo {
	return r.withDO(r.DO.Debug())
}

func (r regionCurrencyDo) WithContext(ctx context.Context) *regionCurrencyDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r regionCurrencyDo) ReadDB() *regionCurrencyDo {
	return r.Clauses(dbresolver.Read)
}

func (r regionCurrencyDo) WriteDB() *regionCurrencyDo {
	return r.Clauses(dbresolver.Write)
}

func (r regionCurrencyDo) Session(config *gorm.Session) *regionCurrencyDo {
	return r.withDO(r.DO.Session(config))
}

func (r regionCurrencyDo) Clauses(conds ...clause.Expression) *regionCurrencyDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r regionCurrencyDo) Returning(value interface{}, columns ...string) *regionCurrencyDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r regionCurrencyDo) Not(conds ...gen.Condition) *regionCurrencyDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r regionCurrencyDo) Or(conds ...gen.Condition) *regionCurrencyDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r regionCurrencyDo) Select(conds ...field.Expr) *regionCurrencyDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r regionCurrencyDo) Where(conds ...gen.Condition) *regionCurrencyDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r regionCurrencyDo) Order(conds ...field.Expr) *regionCurrencyDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r regionCurrencyDo) Distinct(cols ...field.Expr) *regionCurrencyDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r regionCurrencyDo) Omit(cols ...field.Expr) *regionCurrencyDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r regionCurrencyDo) Join(table schema.Tabler, on ...field.Expr) *regionCurrencyDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r regionCurrencyDo) LeftJoin(table schema.Tabler, on ...field.Expr) *regionCurrencyDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r regionCurrencyDo) RightJoin(table schema.Tabler, on ...field.Expr) *regionCurrencyDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r regionCurrencyDo) Group(cols ...field.Expr) *regionCurrencyDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r regionCurrencyDo) Having(conds ...gen.Condition) *regionCurrencyDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r regionCurrencyDo) Limit(limit int) *regionCurrencyDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r regionCurrencyDo) Offset(offset int) *regionCurrencyDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r regionCurrencyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *regionCurrencyDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r regionCurrencyDo) Unscoped() *regionCurrencyDo {
	return r.withDO(r.DO.Unscoped())
}

func (r regionCurrencyDo) Create(values ...*model.RegionCurrency) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r regionCurrencyDo) CreateInBatches(values []*model.RegionCurrency, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r regionCurrencyDo) Save(values ...*model.RegionCurrency) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r regionCurrencyDo) First() (*model.RegionCurrency, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RegionCurrency), nil
	}
}

func (r regionCurrencyDo) Take() (*model.RegionCurrency, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RegionCurrency), nil
	}
}

func (r regionCurrencyDo) Last() (*model.RegionCurrency, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RegionCurrency), nil
	}
}

func (r regionCurrencyDo) Find() ([]*model.RegionCurrency, error) {
	result, err := r.DO.Find()
	return result.([]*model.RegionCurrency), err
}

func (r regionCurrencyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RegionCurrency, err error) {
	buf := make([]*model.RegionCurrency, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r regionCurrencyDo) FindInBatches(result *[]*model.RegionCurrency, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r regionCurrencyDo) Attrs(attrs ...field.AssignExpr) *regionCurrencyDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r regionCurrencyDo) Assign(attrs ...field.AssignExpr) *regionCurrencyDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r regionCurrencyDo) Joins(fields ...field.RelationField) *regionCurrencyDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r regionCurrencyDo) Preload(fields ...field.RelationField) *regionCurrencyDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r regionCurrencyDo) FirstOrInit() (*model.RegionCurrency, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RegionCurrency), nil
	}
}

func (r regionCurrencyDo) FirstOrCreate() (*model.RegionCurrency, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RegionCurrency), nil
	}
}

func (r regionCurrencyDo) FindByPage(offset int, limit int) (result []*model.RegionCurrency, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r regionCurrencyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r regionCurrencyDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r regionCurrencyDo) Delete(models ...*model.RegionCurrency) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *regionCurrencyDo) withDO(do gen.Dao) *regionCurrencyDo {
	r.DO = *do.(*gen.DO)
	return r
}
