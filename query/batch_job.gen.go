// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newBatchJob(db *gorm.DB, opts ...gen.DOOption) batchJob {
	_batchJob := batchJob{}

	_batchJob.batchJobDo.UseDB(db, opts...)
	_batchJob.batchJobDo.UseModel(&model.BatchJob{})

	tableName := _batchJob.batchJobDo.TableName()
	_batchJob.ALL = field.NewAsterisk(tableName)
	_batchJob.ID = field.NewString(tableName, "id")
	_batchJob.Type = field.NewString(tableName, "type")
	_batchJob.CreatedBy = field.NewString(tableName, "created_by")
	_batchJob.Context = field.NewString(tableName, "context")
	_batchJob.Result = field.NewString(tableName, "result")
	_batchJob.DryRun = field.NewBool(tableName, "dry_run")
	_batchJob.CreatedAt = field.NewTime(tableName, "created_at")
	_batchJob.PreProcessedAt = field.NewTime(tableName, "pre_processed_at")
	_batchJob.ConfirmedAt = field.NewTime(tableName, "confirmed_at")
	_batchJob.ProcessingAt = field.NewTime(tableName, "processing_at")
	_batchJob.CompletedAt = field.NewTime(tableName, "completed_at")
	_batchJob.FailedAt = field.NewTime(tableName, "failed_at")
	_batchJob.CanceledAt = field.NewTime(tableName, "canceled_at")
	_batchJob.UpdatedAt = field.NewTime(tableName, "updated_at")
	_batchJob.DeletedAt = field.NewField(tableName, "deleted_at")

	_batchJob.fillFieldMap()

	return _batchJob
}

type batchJob struct {
	batchJobDo batchJobDo

	ALL            field.Asterisk
	ID             field.String
	Type           field.String
	CreatedBy      field.String
	Context        field.String
	Result         field.String
	DryRun         field.Bool
	CreatedAt      field.Time
	PreProcessedAt field.Time
	ConfirmedAt    field.Time
	ProcessingAt   field.Time
	CompletedAt    field.Time
	FailedAt       field.Time
	CanceledAt     field.Time
	UpdatedAt      field.Time
	DeletedAt      field.Field

	fieldMap map[string]field.Expr
}

func (b batchJob) Table(newTableName string) *batchJob {
	b.batchJobDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b batchJob) As(alias string) *batchJob {
	b.batchJobDo.DO = *(b.batchJobDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *batchJob) updateTableName(table string) *batchJob {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewString(table, "id")
	b.Type = field.NewString(table, "type")
	b.CreatedBy = field.NewString(table, "created_by")
	b.Context = field.NewString(table, "context")
	b.Result = field.NewString(table, "result")
	b.DryRun = field.NewBool(table, "dry_run")
	b.CreatedAt = field.NewTime(table, "created_at")
	b.PreProcessedAt = field.NewTime(table, "pre_processed_at")
	b.ConfirmedAt = field.NewTime(table, "confirmed_at")
	b.ProcessingAt = field.NewTime(table, "processing_at")
	b.CompletedAt = field.NewTime(table, "completed_at")
	b.FailedAt = field.NewTime(table, "failed_at")
	b.CanceledAt = field.NewTime(table, "canceled_at")
	b.UpdatedAt = field.NewTime(table, "updated_at")
	b.DeletedAt = field.NewField(table, "deleted_at")

	b.fillFieldMap()

	return b
}

func (b *batchJob) WithContext(ctx context.Context) *batchJobDo { return b.batchJobDo.WithContext(ctx) }

func (b batchJob) TableName() string { return b.batchJobDo.TableName() }

func (b batchJob) Alias() string { return b.batchJobDo.Alias() }

func (b batchJob) Columns(cols ...field.Expr) gen.Columns { return b.batchJobDo.Columns(cols...) }

func (b *batchJob) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *batchJob) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 15)
	b.fieldMap["id"] = b.ID
	b.fieldMap["type"] = b.Type
	b.fieldMap["created_by"] = b.CreatedBy
	b.fieldMap["context"] = b.Context
	b.fieldMap["result"] = b.Result
	b.fieldMap["dry_run"] = b.DryRun
	b.fieldMap["created_at"] = b.CreatedAt
	b.fieldMap["pre_processed_at"] = b.PreProcessedAt
	b.fieldMap["confirmed_at"] = b.ConfirmedAt
	b.fieldMap["processing_at"] = b.ProcessingAt
	b.fieldMap["completed_at"] = b.CompletedAt
	b.fieldMap["failed_at"] = b.FailedAt
	b.fieldMap["canceled_at"] = b.CanceledAt
	b.fieldMap["updated_at"] = b.UpdatedAt
	b.fieldMap["deleted_at"] = b.DeletedAt
}

func (b batchJob) clone(db *gorm.DB) batchJob {
	b.batchJobDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b batchJob) replaceDB(db *gorm.DB) batchJob {
	b.batchJobDo.ReplaceDB(db)
	return b
}

type batchJobDo struct{ gen.DO }

func (b batchJobDo) Debug() *batchJobDo {
	return b.withDO(b.DO.Debug())
}

func (b batchJobDo) WithContext(ctx context.Context) *batchJobDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b batchJobDo) ReadDB() *batchJobDo {
	return b.Clauses(dbresolver.Read)
}

func (b batchJobDo) WriteDB() *batchJobDo {
	return b.Clauses(dbresolver.Write)
}

func (b batchJobDo) Session(config *gorm.Session) *batchJobDo {
	return b.withDO(b.DO.Session(config))
}

func (b batchJobDo) Clauses(conds ...clause.Expression) *batchJobDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b batchJobDo) Returning(value interface{}, columns ...string) *batchJobDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b batchJobDo) Not(conds ...gen.Condition) *batchJobDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b batchJobDo) Or(conds ...gen.Condition) *batchJobDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b batchJobDo) Select(conds ...field.Expr) *batchJobDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b batchJobDo) Where(conds ...gen.Condition) *batchJobDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b batchJobDo) Order(conds ...field.Expr) *batchJobDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b batchJobDo) Distinct(cols ...field.Expr) *batchJobDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b batchJobDo) Omit(cols ...field.Expr) *batchJobDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b batchJobDo) Join(table schema.Tabler, on ...field.Expr) *batchJobDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b batchJobDo) LeftJoin(table schema.Tabler, on ...field.Expr) *batchJobDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b batchJobDo) RightJoin(table schema.Tabler, on ...field.Expr) *batchJobDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b batchJobDo) Group(cols ...field.Expr) *batchJobDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b batchJobDo) Having(conds ...gen.Condition) *batchJobDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b batchJobDo) Limit(limit int) *batchJobDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b batchJobDo) Offset(offset int) *batchJobDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b batchJobDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *batchJobDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b batchJobDo) Unscoped() *batchJobDo {
	return b.withDO(b.DO.Unscoped())
}

func (b batchJobDo) Create(values ...*model.BatchJob) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b batchJobDo) CreateInBatches(values []*model.BatchJob, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b batchJobDo) Save(values ...*model.BatchJob) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b batchJobDo) First() (*model.BatchJob, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BatchJob), nil
	}
}

func (b batchJobDo) Take() (*model.BatchJob, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BatchJob), nil
	}
}

func (b batchJobDo) Last() (*model.BatchJob, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BatchJob), nil
	}
}

func (b batchJobDo) Find() ([]*model.BatchJob, error) {
	result, err := b.DO.Find()
	return result.([]*model.BatchJob), err
}

func (b batchJobDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BatchJob, err error) {
	buf := make([]*model.BatchJob, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b batchJobDo) FindInBatches(result *[]*model.BatchJob, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b batchJobDo) Attrs(attrs ...field.AssignExpr) *batchJobDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b batchJobDo) Assign(attrs ...field.AssignExpr) *batchJobDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b batchJobDo) Joins(fields ...field.RelationField) *batchJobDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b batchJobDo) Preload(fields ...field.RelationField) *batchJobDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b batchJobDo) FirstOrInit() (*model.BatchJob, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BatchJob), nil
	}
}

func (b batchJobDo) FirstOrCreate() (*model.BatchJob, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BatchJob), nil
	}
}

func (b batchJobDo) FindByPage(offset int, limit int) (result []*model.BatchJob, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b batchJobDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b batchJobDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b batchJobDo) Delete(models ...*model.BatchJob) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *batchJobDo) withDO(do gen.Dao) *batchJobDo {
	b.DO = *do.(*gen.DO)
	return b
}
