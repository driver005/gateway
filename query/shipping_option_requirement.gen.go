// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newShippingOptionRequirement(db *gorm.DB, opts ...gen.DOOption) shippingOptionRequirement {
	_shippingOptionRequirement := shippingOptionRequirement{}

	_shippingOptionRequirement.shippingOptionRequirementDo.UseDB(db, opts...)
	_shippingOptionRequirement.shippingOptionRequirementDo.UseModel(&model.ShippingOptionRequirement{})

	tableName := _shippingOptionRequirement.shippingOptionRequirementDo.TableName()
	_shippingOptionRequirement.ALL = field.NewAsterisk(tableName)
	_shippingOptionRequirement.ID = field.NewString(tableName, "id")
	_shippingOptionRequirement.ShippingOptionID = field.NewString(tableName, "shipping_option_id")
	_shippingOptionRequirement.Type = field.NewString(tableName, "type")
	_shippingOptionRequirement.Amount = field.NewInt32(tableName, "amount")
	_shippingOptionRequirement.DeletedAt = field.NewField(tableName, "deleted_at")

	_shippingOptionRequirement.fillFieldMap()

	return _shippingOptionRequirement
}

type shippingOptionRequirement struct {
	shippingOptionRequirementDo shippingOptionRequirementDo

	ALL              field.Asterisk
	ID               field.String
	ShippingOptionID field.String
	Type             field.String
	Amount           field.Int32
	DeletedAt        field.Field

	fieldMap map[string]field.Expr
}

func (s shippingOptionRequirement) Table(newTableName string) *shippingOptionRequirement {
	s.shippingOptionRequirementDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s shippingOptionRequirement) As(alias string) *shippingOptionRequirement {
	s.shippingOptionRequirementDo.DO = *(s.shippingOptionRequirementDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *shippingOptionRequirement) updateTableName(table string) *shippingOptionRequirement {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.ShippingOptionID = field.NewString(table, "shipping_option_id")
	s.Type = field.NewString(table, "type")
	s.Amount = field.NewInt32(table, "amount")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *shippingOptionRequirement) WithContext(ctx context.Context) *shippingOptionRequirementDo {
	return s.shippingOptionRequirementDo.WithContext(ctx)
}

func (s shippingOptionRequirement) TableName() string {
	return s.shippingOptionRequirementDo.TableName()
}

func (s shippingOptionRequirement) Alias() string { return s.shippingOptionRequirementDo.Alias() }

func (s shippingOptionRequirement) Columns(cols ...field.Expr) gen.Columns {
	return s.shippingOptionRequirementDo.Columns(cols...)
}

func (s *shippingOptionRequirement) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *shippingOptionRequirement) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.ID
	s.fieldMap["shipping_option_id"] = s.ShippingOptionID
	s.fieldMap["type"] = s.Type
	s.fieldMap["amount"] = s.Amount
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s shippingOptionRequirement) clone(db *gorm.DB) shippingOptionRequirement {
	s.shippingOptionRequirementDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s shippingOptionRequirement) replaceDB(db *gorm.DB) shippingOptionRequirement {
	s.shippingOptionRequirementDo.ReplaceDB(db)
	return s
}

type shippingOptionRequirementDo struct{ gen.DO }

func (s shippingOptionRequirementDo) Debug() *shippingOptionRequirementDo {
	return s.withDO(s.DO.Debug())
}

func (s shippingOptionRequirementDo) WithContext(ctx context.Context) *shippingOptionRequirementDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s shippingOptionRequirementDo) ReadDB() *shippingOptionRequirementDo {
	return s.Clauses(dbresolver.Read)
}

func (s shippingOptionRequirementDo) WriteDB() *shippingOptionRequirementDo {
	return s.Clauses(dbresolver.Write)
}

func (s shippingOptionRequirementDo) Session(config *gorm.Session) *shippingOptionRequirementDo {
	return s.withDO(s.DO.Session(config))
}

func (s shippingOptionRequirementDo) Clauses(conds ...clause.Expression) *shippingOptionRequirementDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s shippingOptionRequirementDo) Returning(value interface{}, columns ...string) *shippingOptionRequirementDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s shippingOptionRequirementDo) Not(conds ...gen.Condition) *shippingOptionRequirementDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s shippingOptionRequirementDo) Or(conds ...gen.Condition) *shippingOptionRequirementDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s shippingOptionRequirementDo) Select(conds ...field.Expr) *shippingOptionRequirementDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s shippingOptionRequirementDo) Where(conds ...gen.Condition) *shippingOptionRequirementDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s shippingOptionRequirementDo) Order(conds ...field.Expr) *shippingOptionRequirementDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s shippingOptionRequirementDo) Distinct(cols ...field.Expr) *shippingOptionRequirementDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s shippingOptionRequirementDo) Omit(cols ...field.Expr) *shippingOptionRequirementDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s shippingOptionRequirementDo) Join(table schema.Tabler, on ...field.Expr) *shippingOptionRequirementDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s shippingOptionRequirementDo) LeftJoin(table schema.Tabler, on ...field.Expr) *shippingOptionRequirementDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s shippingOptionRequirementDo) RightJoin(table schema.Tabler, on ...field.Expr) *shippingOptionRequirementDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s shippingOptionRequirementDo) Group(cols ...field.Expr) *shippingOptionRequirementDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s shippingOptionRequirementDo) Having(conds ...gen.Condition) *shippingOptionRequirementDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s shippingOptionRequirementDo) Limit(limit int) *shippingOptionRequirementDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s shippingOptionRequirementDo) Offset(offset int) *shippingOptionRequirementDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s shippingOptionRequirementDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *shippingOptionRequirementDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s shippingOptionRequirementDo) Unscoped() *shippingOptionRequirementDo {
	return s.withDO(s.DO.Unscoped())
}

func (s shippingOptionRequirementDo) Create(values ...*model.ShippingOptionRequirement) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s shippingOptionRequirementDo) CreateInBatches(values []*model.ShippingOptionRequirement, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s shippingOptionRequirementDo) Save(values ...*model.ShippingOptionRequirement) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s shippingOptionRequirementDo) First() (*model.ShippingOptionRequirement, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShippingOptionRequirement), nil
	}
}

func (s shippingOptionRequirementDo) Take() (*model.ShippingOptionRequirement, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShippingOptionRequirement), nil
	}
}

func (s shippingOptionRequirementDo) Last() (*model.ShippingOptionRequirement, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShippingOptionRequirement), nil
	}
}

func (s shippingOptionRequirementDo) Find() ([]*model.ShippingOptionRequirement, error) {
	result, err := s.DO.Find()
	return result.([]*model.ShippingOptionRequirement), err
}

func (s shippingOptionRequirementDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ShippingOptionRequirement, err error) {
	buf := make([]*model.ShippingOptionRequirement, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s shippingOptionRequirementDo) FindInBatches(result *[]*model.ShippingOptionRequirement, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s shippingOptionRequirementDo) Attrs(attrs ...field.AssignExpr) *shippingOptionRequirementDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s shippingOptionRequirementDo) Assign(attrs ...field.AssignExpr) *shippingOptionRequirementDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s shippingOptionRequirementDo) Joins(fields ...field.RelationField) *shippingOptionRequirementDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s shippingOptionRequirementDo) Preload(fields ...field.RelationField) *shippingOptionRequirementDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s shippingOptionRequirementDo) FirstOrInit() (*model.ShippingOptionRequirement, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShippingOptionRequirement), nil
	}
}

func (s shippingOptionRequirementDo) FirstOrCreate() (*model.ShippingOptionRequirement, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShippingOptionRequirement), nil
	}
}

func (s shippingOptionRequirementDo) FindByPage(offset int, limit int) (result []*model.ShippingOptionRequirement, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s shippingOptionRequirementDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s shippingOptionRequirementDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s shippingOptionRequirementDo) Delete(models ...*model.ShippingOptionRequirement) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *shippingOptionRequirementDo) withDO(do gen.Dao) *shippingOptionRequirementDo {
	s.DO = *do.(*gen.DO)
	return s
}
