// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newDiscountRule(db *gorm.DB, opts ...gen.DOOption) discountRule {
	_discountRule := discountRule{}

	_discountRule.discountRuleDo.UseDB(db, opts...)
	_discountRule.discountRuleDo.UseModel(&model.DiscountRule{})

	tableName := _discountRule.discountRuleDo.TableName()
	_discountRule.ALL = field.NewAsterisk(tableName)
	_discountRule.ID = field.NewString(tableName, "id")
	_discountRule.Description = field.NewString(tableName, "description")
	_discountRule.Type = field.NewString(tableName, "type")
	_discountRule.Value = field.NewInt32(tableName, "value")
	_discountRule.Allocation = field.NewString(tableName, "allocation")
	_discountRule.CreatedAt = field.NewTime(tableName, "created_at")
	_discountRule.UpdatedAt = field.NewTime(tableName, "updated_at")
	_discountRule.DeletedAt = field.NewField(tableName, "deleted_at")
	_discountRule.Metadata = field.NewString(tableName, "metadata")

	_discountRule.fillFieldMap()

	return _discountRule
}

type discountRule struct {
	discountRuleDo discountRuleDo

	ALL         field.Asterisk
	ID          field.String
	Description field.String
	Type        field.String
	Value       field.Int32
	Allocation  field.String
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	Metadata    field.String

	fieldMap map[string]field.Expr
}

func (d discountRule) Table(newTableName string) *discountRule {
	d.discountRuleDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d discountRule) As(alias string) *discountRule {
	d.discountRuleDo.DO = *(d.discountRuleDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *discountRule) updateTableName(table string) *discountRule {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewString(table, "id")
	d.Description = field.NewString(table, "description")
	d.Type = field.NewString(table, "type")
	d.Value = field.NewInt32(table, "value")
	d.Allocation = field.NewString(table, "allocation")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.DeletedAt = field.NewField(table, "deleted_at")
	d.Metadata = field.NewString(table, "metadata")

	d.fillFieldMap()

	return d
}

func (d *discountRule) WithContext(ctx context.Context) *discountRuleDo {
	return d.discountRuleDo.WithContext(ctx)
}

func (d discountRule) TableName() string { return d.discountRuleDo.TableName() }

func (d discountRule) Alias() string { return d.discountRuleDo.Alias() }

func (d discountRule) Columns(cols ...field.Expr) gen.Columns {
	return d.discountRuleDo.Columns(cols...)
}

func (d *discountRule) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *discountRule) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 9)
	d.fieldMap["id"] = d.ID
	d.fieldMap["description"] = d.Description
	d.fieldMap["type"] = d.Type
	d.fieldMap["value"] = d.Value
	d.fieldMap["allocation"] = d.Allocation
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["deleted_at"] = d.DeletedAt
	d.fieldMap["metadata"] = d.Metadata
}

func (d discountRule) clone(db *gorm.DB) discountRule {
	d.discountRuleDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d discountRule) replaceDB(db *gorm.DB) discountRule {
	d.discountRuleDo.ReplaceDB(db)
	return d
}

type discountRuleDo struct{ gen.DO }

func (d discountRuleDo) Debug() *discountRuleDo {
	return d.withDO(d.DO.Debug())
}

func (d discountRuleDo) WithContext(ctx context.Context) *discountRuleDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d discountRuleDo) ReadDB() *discountRuleDo {
	return d.Clauses(dbresolver.Read)
}

func (d discountRuleDo) WriteDB() *discountRuleDo {
	return d.Clauses(dbresolver.Write)
}

func (d discountRuleDo) Session(config *gorm.Session) *discountRuleDo {
	return d.withDO(d.DO.Session(config))
}

func (d discountRuleDo) Clauses(conds ...clause.Expression) *discountRuleDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d discountRuleDo) Returning(value interface{}, columns ...string) *discountRuleDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d discountRuleDo) Not(conds ...gen.Condition) *discountRuleDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d discountRuleDo) Or(conds ...gen.Condition) *discountRuleDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d discountRuleDo) Select(conds ...field.Expr) *discountRuleDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d discountRuleDo) Where(conds ...gen.Condition) *discountRuleDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d discountRuleDo) Order(conds ...field.Expr) *discountRuleDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d discountRuleDo) Distinct(cols ...field.Expr) *discountRuleDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d discountRuleDo) Omit(cols ...field.Expr) *discountRuleDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d discountRuleDo) Join(table schema.Tabler, on ...field.Expr) *discountRuleDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d discountRuleDo) LeftJoin(table schema.Tabler, on ...field.Expr) *discountRuleDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d discountRuleDo) RightJoin(table schema.Tabler, on ...field.Expr) *discountRuleDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d discountRuleDo) Group(cols ...field.Expr) *discountRuleDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d discountRuleDo) Having(conds ...gen.Condition) *discountRuleDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d discountRuleDo) Limit(limit int) *discountRuleDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d discountRuleDo) Offset(offset int) *discountRuleDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d discountRuleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *discountRuleDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d discountRuleDo) Unscoped() *discountRuleDo {
	return d.withDO(d.DO.Unscoped())
}

func (d discountRuleDo) Create(values ...*model.DiscountRule) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d discountRuleDo) CreateInBatches(values []*model.DiscountRule, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d discountRuleDo) Save(values ...*model.DiscountRule) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d discountRuleDo) First() (*model.DiscountRule, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiscountRule), nil
	}
}

func (d discountRuleDo) Take() (*model.DiscountRule, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiscountRule), nil
	}
}

func (d discountRuleDo) Last() (*model.DiscountRule, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiscountRule), nil
	}
}

func (d discountRuleDo) Find() ([]*model.DiscountRule, error) {
	result, err := d.DO.Find()
	return result.([]*model.DiscountRule), err
}

func (d discountRuleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DiscountRule, err error) {
	buf := make([]*model.DiscountRule, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d discountRuleDo) FindInBatches(result *[]*model.DiscountRule, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d discountRuleDo) Attrs(attrs ...field.AssignExpr) *discountRuleDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d discountRuleDo) Assign(attrs ...field.AssignExpr) *discountRuleDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d discountRuleDo) Joins(fields ...field.RelationField) *discountRuleDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d discountRuleDo) Preload(fields ...field.RelationField) *discountRuleDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d discountRuleDo) FirstOrInit() (*model.DiscountRule, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiscountRule), nil
	}
}

func (d discountRuleDo) FirstOrCreate() (*model.DiscountRule, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiscountRule), nil
	}
}

func (d discountRuleDo) FindByPage(offset int, limit int) (result []*model.DiscountRule, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d discountRuleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d discountRuleDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d discountRuleDo) Delete(models ...*model.DiscountRule) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *discountRuleDo) withDO(do gen.Dao) *discountRuleDo {
	d.DO = *do.(*gen.DO)
	return d
}
