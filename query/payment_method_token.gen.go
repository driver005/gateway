// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newPaymentMethodToken(db *gorm.DB, opts ...gen.DOOption) paymentMethodToken {
	_paymentMethodToken := paymentMethodToken{}

	_paymentMethodToken.paymentMethodTokenDo.UseDB(db, opts...)
	_paymentMethodToken.paymentMethodTokenDo.UseModel(&model.PaymentMethodToken{})

	tableName := _paymentMethodToken.paymentMethodTokenDo.TableName()
	_paymentMethodToken.ALL = field.NewAsterisk(tableName)
	_paymentMethodToken.ID = field.NewString(tableName, "id")
	_paymentMethodToken.ProviderID = field.NewString(tableName, "provider_id")
	_paymentMethodToken.Data = field.NewString(tableName, "data")
	_paymentMethodToken.Name = field.NewString(tableName, "name")
	_paymentMethodToken.TypeDetail = field.NewString(tableName, "type_detail")
	_paymentMethodToken.DescriptionDetail = field.NewString(tableName, "description_detail")
	_paymentMethodToken.Metadata = field.NewString(tableName, "metadata")

	_paymentMethodToken.fillFieldMap()

	return _paymentMethodToken
}

type paymentMethodToken struct {
	paymentMethodTokenDo paymentMethodTokenDo

	ALL               field.Asterisk
	ID                field.String
	ProviderID        field.String
	Data              field.String
	Name              field.String
	TypeDetail        field.String
	DescriptionDetail field.String
	Metadata          field.String

	fieldMap map[string]field.Expr
}

func (p paymentMethodToken) Table(newTableName string) *paymentMethodToken {
	p.paymentMethodTokenDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p paymentMethodToken) As(alias string) *paymentMethodToken {
	p.paymentMethodTokenDo.DO = *(p.paymentMethodTokenDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *paymentMethodToken) updateTableName(table string) *paymentMethodToken {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewString(table, "id")
	p.ProviderID = field.NewString(table, "provider_id")
	p.Data = field.NewString(table, "data")
	p.Name = field.NewString(table, "name")
	p.TypeDetail = field.NewString(table, "type_detail")
	p.DescriptionDetail = field.NewString(table, "description_detail")
	p.Metadata = field.NewString(table, "metadata")

	p.fillFieldMap()

	return p
}

func (p *paymentMethodToken) WithContext(ctx context.Context) *paymentMethodTokenDo {
	return p.paymentMethodTokenDo.WithContext(ctx)
}

func (p paymentMethodToken) TableName() string { return p.paymentMethodTokenDo.TableName() }

func (p paymentMethodToken) Alias() string { return p.paymentMethodTokenDo.Alias() }

func (p paymentMethodToken) Columns(cols ...field.Expr) gen.Columns {
	return p.paymentMethodTokenDo.Columns(cols...)
}

func (p *paymentMethodToken) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *paymentMethodToken) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 7)
	p.fieldMap["id"] = p.ID
	p.fieldMap["provider_id"] = p.ProviderID
	p.fieldMap["data"] = p.Data
	p.fieldMap["name"] = p.Name
	p.fieldMap["type_detail"] = p.TypeDetail
	p.fieldMap["description_detail"] = p.DescriptionDetail
	p.fieldMap["metadata"] = p.Metadata
}

func (p paymentMethodToken) clone(db *gorm.DB) paymentMethodToken {
	p.paymentMethodTokenDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p paymentMethodToken) replaceDB(db *gorm.DB) paymentMethodToken {
	p.paymentMethodTokenDo.ReplaceDB(db)
	return p
}

type paymentMethodTokenDo struct{ gen.DO }

func (p paymentMethodTokenDo) Debug() *paymentMethodTokenDo {
	return p.withDO(p.DO.Debug())
}

func (p paymentMethodTokenDo) WithContext(ctx context.Context) *paymentMethodTokenDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p paymentMethodTokenDo) ReadDB() *paymentMethodTokenDo {
	return p.Clauses(dbresolver.Read)
}

func (p paymentMethodTokenDo) WriteDB() *paymentMethodTokenDo {
	return p.Clauses(dbresolver.Write)
}

func (p paymentMethodTokenDo) Session(config *gorm.Session) *paymentMethodTokenDo {
	return p.withDO(p.DO.Session(config))
}

func (p paymentMethodTokenDo) Clauses(conds ...clause.Expression) *paymentMethodTokenDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p paymentMethodTokenDo) Returning(value interface{}, columns ...string) *paymentMethodTokenDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p paymentMethodTokenDo) Not(conds ...gen.Condition) *paymentMethodTokenDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p paymentMethodTokenDo) Or(conds ...gen.Condition) *paymentMethodTokenDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p paymentMethodTokenDo) Select(conds ...field.Expr) *paymentMethodTokenDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p paymentMethodTokenDo) Where(conds ...gen.Condition) *paymentMethodTokenDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p paymentMethodTokenDo) Order(conds ...field.Expr) *paymentMethodTokenDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p paymentMethodTokenDo) Distinct(cols ...field.Expr) *paymentMethodTokenDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p paymentMethodTokenDo) Omit(cols ...field.Expr) *paymentMethodTokenDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p paymentMethodTokenDo) Join(table schema.Tabler, on ...field.Expr) *paymentMethodTokenDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p paymentMethodTokenDo) LeftJoin(table schema.Tabler, on ...field.Expr) *paymentMethodTokenDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p paymentMethodTokenDo) RightJoin(table schema.Tabler, on ...field.Expr) *paymentMethodTokenDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p paymentMethodTokenDo) Group(cols ...field.Expr) *paymentMethodTokenDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p paymentMethodTokenDo) Having(conds ...gen.Condition) *paymentMethodTokenDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p paymentMethodTokenDo) Limit(limit int) *paymentMethodTokenDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p paymentMethodTokenDo) Offset(offset int) *paymentMethodTokenDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p paymentMethodTokenDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *paymentMethodTokenDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p paymentMethodTokenDo) Unscoped() *paymentMethodTokenDo {
	return p.withDO(p.DO.Unscoped())
}

func (p paymentMethodTokenDo) Create(values ...*model.PaymentMethodToken) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p paymentMethodTokenDo) CreateInBatches(values []*model.PaymentMethodToken, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p paymentMethodTokenDo) Save(values ...*model.PaymentMethodToken) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p paymentMethodTokenDo) First() (*model.PaymentMethodToken, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentMethodToken), nil
	}
}

func (p paymentMethodTokenDo) Take() (*model.PaymentMethodToken, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentMethodToken), nil
	}
}

func (p paymentMethodTokenDo) Last() (*model.PaymentMethodToken, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentMethodToken), nil
	}
}

func (p paymentMethodTokenDo) Find() ([]*model.PaymentMethodToken, error) {
	result, err := p.DO.Find()
	return result.([]*model.PaymentMethodToken), err
}

func (p paymentMethodTokenDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PaymentMethodToken, err error) {
	buf := make([]*model.PaymentMethodToken, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p paymentMethodTokenDo) FindInBatches(result *[]*model.PaymentMethodToken, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p paymentMethodTokenDo) Attrs(attrs ...field.AssignExpr) *paymentMethodTokenDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p paymentMethodTokenDo) Assign(attrs ...field.AssignExpr) *paymentMethodTokenDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p paymentMethodTokenDo) Joins(fields ...field.RelationField) *paymentMethodTokenDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p paymentMethodTokenDo) Preload(fields ...field.RelationField) *paymentMethodTokenDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p paymentMethodTokenDo) FirstOrInit() (*model.PaymentMethodToken, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentMethodToken), nil
	}
}

func (p paymentMethodTokenDo) FirstOrCreate() (*model.PaymentMethodToken, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentMethodToken), nil
	}
}

func (p paymentMethodTokenDo) FindByPage(offset int, limit int) (result []*model.PaymentMethodToken, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p paymentMethodTokenDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p paymentMethodTokenDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p paymentMethodTokenDo) Delete(models ...*model.PaymentMethodToken) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *paymentMethodTokenDo) withDO(do gen.Dao) *paymentMethodTokenDo {
	p.DO = *do.(*gen.DO)
	return p
}
