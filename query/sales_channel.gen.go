// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newSalesChannel(db *gorm.DB, opts ...gen.DOOption) salesChannel {
	_salesChannel := salesChannel{}

	_salesChannel.salesChannelDo.UseDB(db, opts...)
	_salesChannel.salesChannelDo.UseModel(&model.SalesChannel{})

	tableName := _salesChannel.salesChannelDo.TableName()
	_salesChannel.ALL = field.NewAsterisk(tableName)
	_salesChannel.ID = field.NewString(tableName, "id")
	_salesChannel.Name = field.NewString(tableName, "name")
	_salesChannel.Description = field.NewString(tableName, "description")
	_salesChannel.IsDisabled = field.NewBool(tableName, "is_disabled")
	_salesChannel.CreatedAt = field.NewTime(tableName, "created_at")
	_salesChannel.UpdatedAt = field.NewTime(tableName, "updated_at")
	_salesChannel.DeletedAt = field.NewField(tableName, "deleted_at")

	_salesChannel.fillFieldMap()

	return _salesChannel
}

type salesChannel struct {
	salesChannelDo salesChannelDo

	ALL         field.Asterisk
	ID          field.String
	Name        field.String
	Description field.String
	IsDisabled  field.Bool
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field

	fieldMap map[string]field.Expr
}

func (s salesChannel) Table(newTableName string) *salesChannel {
	s.salesChannelDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s salesChannel) As(alias string) *salesChannel {
	s.salesChannelDo.DO = *(s.salesChannelDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *salesChannel) updateTableName(table string) *salesChannel {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.Name = field.NewString(table, "name")
	s.Description = field.NewString(table, "description")
	s.IsDisabled = field.NewBool(table, "is_disabled")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *salesChannel) WithContext(ctx context.Context) *salesChannelDo {
	return s.salesChannelDo.WithContext(ctx)
}

func (s salesChannel) TableName() string { return s.salesChannelDo.TableName() }

func (s salesChannel) Alias() string { return s.salesChannelDo.Alias() }

func (s salesChannel) Columns(cols ...field.Expr) gen.Columns {
	return s.salesChannelDo.Columns(cols...)
}

func (s *salesChannel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *salesChannel) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["description"] = s.Description
	s.fieldMap["is_disabled"] = s.IsDisabled
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s salesChannel) clone(db *gorm.DB) salesChannel {
	s.salesChannelDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s salesChannel) replaceDB(db *gorm.DB) salesChannel {
	s.salesChannelDo.ReplaceDB(db)
	return s
}

type salesChannelDo struct{ gen.DO }

func (s salesChannelDo) Debug() *salesChannelDo {
	return s.withDO(s.DO.Debug())
}

func (s salesChannelDo) WithContext(ctx context.Context) *salesChannelDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s salesChannelDo) ReadDB() *salesChannelDo {
	return s.Clauses(dbresolver.Read)
}

func (s salesChannelDo) WriteDB() *salesChannelDo {
	return s.Clauses(dbresolver.Write)
}

func (s salesChannelDo) Session(config *gorm.Session) *salesChannelDo {
	return s.withDO(s.DO.Session(config))
}

func (s salesChannelDo) Clauses(conds ...clause.Expression) *salesChannelDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s salesChannelDo) Returning(value interface{}, columns ...string) *salesChannelDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s salesChannelDo) Not(conds ...gen.Condition) *salesChannelDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s salesChannelDo) Or(conds ...gen.Condition) *salesChannelDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s salesChannelDo) Select(conds ...field.Expr) *salesChannelDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s salesChannelDo) Where(conds ...gen.Condition) *salesChannelDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s salesChannelDo) Order(conds ...field.Expr) *salesChannelDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s salesChannelDo) Distinct(cols ...field.Expr) *salesChannelDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s salesChannelDo) Omit(cols ...field.Expr) *salesChannelDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s salesChannelDo) Join(table schema.Tabler, on ...field.Expr) *salesChannelDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s salesChannelDo) LeftJoin(table schema.Tabler, on ...field.Expr) *salesChannelDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s salesChannelDo) RightJoin(table schema.Tabler, on ...field.Expr) *salesChannelDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s salesChannelDo) Group(cols ...field.Expr) *salesChannelDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s salesChannelDo) Having(conds ...gen.Condition) *salesChannelDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s salesChannelDo) Limit(limit int) *salesChannelDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s salesChannelDo) Offset(offset int) *salesChannelDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s salesChannelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *salesChannelDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s salesChannelDo) Unscoped() *salesChannelDo {
	return s.withDO(s.DO.Unscoped())
}

func (s salesChannelDo) Create(values ...*model.SalesChannel) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s salesChannelDo) CreateInBatches(values []*model.SalesChannel, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s salesChannelDo) Save(values ...*model.SalesChannel) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s salesChannelDo) First() (*model.SalesChannel, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SalesChannel), nil
	}
}

func (s salesChannelDo) Take() (*model.SalesChannel, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SalesChannel), nil
	}
}

func (s salesChannelDo) Last() (*model.SalesChannel, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SalesChannel), nil
	}
}

func (s salesChannelDo) Find() ([]*model.SalesChannel, error) {
	result, err := s.DO.Find()
	return result.([]*model.SalesChannel), err
}

func (s salesChannelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SalesChannel, err error) {
	buf := make([]*model.SalesChannel, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s salesChannelDo) FindInBatches(result *[]*model.SalesChannel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s salesChannelDo) Attrs(attrs ...field.AssignExpr) *salesChannelDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s salesChannelDo) Assign(attrs ...field.AssignExpr) *salesChannelDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s salesChannelDo) Joins(fields ...field.RelationField) *salesChannelDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s salesChannelDo) Preload(fields ...field.RelationField) *salesChannelDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s salesChannelDo) FirstOrInit() (*model.SalesChannel, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SalesChannel), nil
	}
}

func (s salesChannelDo) FirstOrCreate() (*model.SalesChannel, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SalesChannel), nil
	}
}

func (s salesChannelDo) FindByPage(offset int, limit int) (result []*model.SalesChannel, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s salesChannelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s salesChannelDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s salesChannelDo) Delete(models ...*model.SalesChannel) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *salesChannelDo) withDO(do gen.Dao) *salesChannelDo {
	s.DO = *do.(*gen.DO)
	return s
}
