// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newMikroOrmMigration(db *gorm.DB, opts ...gen.DOOption) mikroOrmMigration {
	_mikroOrmMigration := mikroOrmMigration{}

	_mikroOrmMigration.mikroOrmMigrationDo.UseDB(db, opts...)
	_mikroOrmMigration.mikroOrmMigrationDo.UseModel(&model.MikroOrmMigration{})

	tableName := _mikroOrmMigration.mikroOrmMigrationDo.TableName()
	_mikroOrmMigration.ALL = field.NewAsterisk(tableName)
	_mikroOrmMigration.ID = field.NewInt32(tableName, "id")
	_mikroOrmMigration.Name = field.NewString(tableName, "name")
	_mikroOrmMigration.ExecutedAt = field.NewTime(tableName, "executed_at")

	_mikroOrmMigration.fillFieldMap()

	return _mikroOrmMigration
}

type mikroOrmMigration struct {
	mikroOrmMigrationDo mikroOrmMigrationDo

	ALL        field.Asterisk
	ID         field.Int32
	Name       field.String
	ExecutedAt field.Time

	fieldMap map[string]field.Expr
}

func (m mikroOrmMigration) Table(newTableName string) *mikroOrmMigration {
	m.mikroOrmMigrationDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m mikroOrmMigration) As(alias string) *mikroOrmMigration {
	m.mikroOrmMigrationDo.DO = *(m.mikroOrmMigrationDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *mikroOrmMigration) updateTableName(table string) *mikroOrmMigration {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt32(table, "id")
	m.Name = field.NewString(table, "name")
	m.ExecutedAt = field.NewTime(table, "executed_at")

	m.fillFieldMap()

	return m
}

func (m *mikroOrmMigration) WithContext(ctx context.Context) *mikroOrmMigrationDo {
	return m.mikroOrmMigrationDo.WithContext(ctx)
}

func (m mikroOrmMigration) TableName() string { return m.mikroOrmMigrationDo.TableName() }

func (m mikroOrmMigration) Alias() string { return m.mikroOrmMigrationDo.Alias() }

func (m mikroOrmMigration) Columns(cols ...field.Expr) gen.Columns {
	return m.mikroOrmMigrationDo.Columns(cols...)
}

func (m *mikroOrmMigration) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *mikroOrmMigration) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 3)
	m.fieldMap["id"] = m.ID
	m.fieldMap["name"] = m.Name
	m.fieldMap["executed_at"] = m.ExecutedAt
}

func (m mikroOrmMigration) clone(db *gorm.DB) mikroOrmMigration {
	m.mikroOrmMigrationDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m mikroOrmMigration) replaceDB(db *gorm.DB) mikroOrmMigration {
	m.mikroOrmMigrationDo.ReplaceDB(db)
	return m
}

type mikroOrmMigrationDo struct{ gen.DO }

func (m mikroOrmMigrationDo) Debug() *mikroOrmMigrationDo {
	return m.withDO(m.DO.Debug())
}

func (m mikroOrmMigrationDo) WithContext(ctx context.Context) *mikroOrmMigrationDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m mikroOrmMigrationDo) ReadDB() *mikroOrmMigrationDo {
	return m.Clauses(dbresolver.Read)
}

func (m mikroOrmMigrationDo) WriteDB() *mikroOrmMigrationDo {
	return m.Clauses(dbresolver.Write)
}

func (m mikroOrmMigrationDo) Session(config *gorm.Session) *mikroOrmMigrationDo {
	return m.withDO(m.DO.Session(config))
}

func (m mikroOrmMigrationDo) Clauses(conds ...clause.Expression) *mikroOrmMigrationDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m mikroOrmMigrationDo) Returning(value interface{}, columns ...string) *mikroOrmMigrationDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m mikroOrmMigrationDo) Not(conds ...gen.Condition) *mikroOrmMigrationDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m mikroOrmMigrationDo) Or(conds ...gen.Condition) *mikroOrmMigrationDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m mikroOrmMigrationDo) Select(conds ...field.Expr) *mikroOrmMigrationDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m mikroOrmMigrationDo) Where(conds ...gen.Condition) *mikroOrmMigrationDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m mikroOrmMigrationDo) Order(conds ...field.Expr) *mikroOrmMigrationDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m mikroOrmMigrationDo) Distinct(cols ...field.Expr) *mikroOrmMigrationDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m mikroOrmMigrationDo) Omit(cols ...field.Expr) *mikroOrmMigrationDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m mikroOrmMigrationDo) Join(table schema.Tabler, on ...field.Expr) *mikroOrmMigrationDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m mikroOrmMigrationDo) LeftJoin(table schema.Tabler, on ...field.Expr) *mikroOrmMigrationDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m mikroOrmMigrationDo) RightJoin(table schema.Tabler, on ...field.Expr) *mikroOrmMigrationDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m mikroOrmMigrationDo) Group(cols ...field.Expr) *mikroOrmMigrationDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m mikroOrmMigrationDo) Having(conds ...gen.Condition) *mikroOrmMigrationDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m mikroOrmMigrationDo) Limit(limit int) *mikroOrmMigrationDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m mikroOrmMigrationDo) Offset(offset int) *mikroOrmMigrationDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m mikroOrmMigrationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *mikroOrmMigrationDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m mikroOrmMigrationDo) Unscoped() *mikroOrmMigrationDo {
	return m.withDO(m.DO.Unscoped())
}

func (m mikroOrmMigrationDo) Create(values ...*model.MikroOrmMigration) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m mikroOrmMigrationDo) CreateInBatches(values []*model.MikroOrmMigration, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m mikroOrmMigrationDo) Save(values ...*model.MikroOrmMigration) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m mikroOrmMigrationDo) First() (*model.MikroOrmMigration, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MikroOrmMigration), nil
	}
}

func (m mikroOrmMigrationDo) Take() (*model.MikroOrmMigration, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MikroOrmMigration), nil
	}
}

func (m mikroOrmMigrationDo) Last() (*model.MikroOrmMigration, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MikroOrmMigration), nil
	}
}

func (m mikroOrmMigrationDo) Find() ([]*model.MikroOrmMigration, error) {
	result, err := m.DO.Find()
	return result.([]*model.MikroOrmMigration), err
}

func (m mikroOrmMigrationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MikroOrmMigration, err error) {
	buf := make([]*model.MikroOrmMigration, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m mikroOrmMigrationDo) FindInBatches(result *[]*model.MikroOrmMigration, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m mikroOrmMigrationDo) Attrs(attrs ...field.AssignExpr) *mikroOrmMigrationDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m mikroOrmMigrationDo) Assign(attrs ...field.AssignExpr) *mikroOrmMigrationDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m mikroOrmMigrationDo) Joins(fields ...field.RelationField) *mikroOrmMigrationDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m mikroOrmMigrationDo) Preload(fields ...field.RelationField) *mikroOrmMigrationDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m mikroOrmMigrationDo) FirstOrInit() (*model.MikroOrmMigration, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MikroOrmMigration), nil
	}
}

func (m mikroOrmMigrationDo) FirstOrCreate() (*model.MikroOrmMigration, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MikroOrmMigration), nil
	}
}

func (m mikroOrmMigrationDo) FindByPage(offset int, limit int) (result []*model.MikroOrmMigration, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m mikroOrmMigrationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m mikroOrmMigrationDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m mikroOrmMigrationDo) Delete(models ...*model.MikroOrmMigration) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *mikroOrmMigrationDo) withDO(do gen.Dao) *mikroOrmMigrationDo {
	m.DO = *do.(*gen.DO)
	return m
}
