// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newPaymentCollectionPayment(db *gorm.DB, opts ...gen.DOOption) paymentCollectionPayment {
	_paymentCollectionPayment := paymentCollectionPayment{}

	_paymentCollectionPayment.paymentCollectionPaymentDo.UseDB(db, opts...)
	_paymentCollectionPayment.paymentCollectionPaymentDo.UseModel(&model.PaymentCollectionPayment{})

	tableName := _paymentCollectionPayment.paymentCollectionPaymentDo.TableName()
	_paymentCollectionPayment.ALL = field.NewAsterisk(tableName)
	_paymentCollectionPayment.PaymentCollectionID = field.NewString(tableName, "payment_collection_id")
	_paymentCollectionPayment.PaymentID = field.NewString(tableName, "payment_id")

	_paymentCollectionPayment.fillFieldMap()

	return _paymentCollectionPayment
}

type paymentCollectionPayment struct {
	paymentCollectionPaymentDo paymentCollectionPaymentDo

	ALL                 field.Asterisk
	PaymentCollectionID field.String
	PaymentID           field.String

	fieldMap map[string]field.Expr
}

func (p paymentCollectionPayment) Table(newTableName string) *paymentCollectionPayment {
	p.paymentCollectionPaymentDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p paymentCollectionPayment) As(alias string) *paymentCollectionPayment {
	p.paymentCollectionPaymentDo.DO = *(p.paymentCollectionPaymentDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *paymentCollectionPayment) updateTableName(table string) *paymentCollectionPayment {
	p.ALL = field.NewAsterisk(table)
	p.PaymentCollectionID = field.NewString(table, "payment_collection_id")
	p.PaymentID = field.NewString(table, "payment_id")

	p.fillFieldMap()

	return p
}

func (p *paymentCollectionPayment) WithContext(ctx context.Context) *paymentCollectionPaymentDo {
	return p.paymentCollectionPaymentDo.WithContext(ctx)
}

func (p paymentCollectionPayment) TableName() string { return p.paymentCollectionPaymentDo.TableName() }

func (p paymentCollectionPayment) Alias() string { return p.paymentCollectionPaymentDo.Alias() }

func (p paymentCollectionPayment) Columns(cols ...field.Expr) gen.Columns {
	return p.paymentCollectionPaymentDo.Columns(cols...)
}

func (p *paymentCollectionPayment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *paymentCollectionPayment) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 2)
	p.fieldMap["payment_collection_id"] = p.PaymentCollectionID
	p.fieldMap["payment_id"] = p.PaymentID
}

func (p paymentCollectionPayment) clone(db *gorm.DB) paymentCollectionPayment {
	p.paymentCollectionPaymentDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p paymentCollectionPayment) replaceDB(db *gorm.DB) paymentCollectionPayment {
	p.paymentCollectionPaymentDo.ReplaceDB(db)
	return p
}

type paymentCollectionPaymentDo struct{ gen.DO }

func (p paymentCollectionPaymentDo) Debug() *paymentCollectionPaymentDo {
	return p.withDO(p.DO.Debug())
}

func (p paymentCollectionPaymentDo) WithContext(ctx context.Context) *paymentCollectionPaymentDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p paymentCollectionPaymentDo) ReadDB() *paymentCollectionPaymentDo {
	return p.Clauses(dbresolver.Read)
}

func (p paymentCollectionPaymentDo) WriteDB() *paymentCollectionPaymentDo {
	return p.Clauses(dbresolver.Write)
}

func (p paymentCollectionPaymentDo) Session(config *gorm.Session) *paymentCollectionPaymentDo {
	return p.withDO(p.DO.Session(config))
}

func (p paymentCollectionPaymentDo) Clauses(conds ...clause.Expression) *paymentCollectionPaymentDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p paymentCollectionPaymentDo) Returning(value interface{}, columns ...string) *paymentCollectionPaymentDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p paymentCollectionPaymentDo) Not(conds ...gen.Condition) *paymentCollectionPaymentDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p paymentCollectionPaymentDo) Or(conds ...gen.Condition) *paymentCollectionPaymentDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p paymentCollectionPaymentDo) Select(conds ...field.Expr) *paymentCollectionPaymentDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p paymentCollectionPaymentDo) Where(conds ...gen.Condition) *paymentCollectionPaymentDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p paymentCollectionPaymentDo) Order(conds ...field.Expr) *paymentCollectionPaymentDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p paymentCollectionPaymentDo) Distinct(cols ...field.Expr) *paymentCollectionPaymentDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p paymentCollectionPaymentDo) Omit(cols ...field.Expr) *paymentCollectionPaymentDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p paymentCollectionPaymentDo) Join(table schema.Tabler, on ...field.Expr) *paymentCollectionPaymentDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p paymentCollectionPaymentDo) LeftJoin(table schema.Tabler, on ...field.Expr) *paymentCollectionPaymentDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p paymentCollectionPaymentDo) RightJoin(table schema.Tabler, on ...field.Expr) *paymentCollectionPaymentDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p paymentCollectionPaymentDo) Group(cols ...field.Expr) *paymentCollectionPaymentDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p paymentCollectionPaymentDo) Having(conds ...gen.Condition) *paymentCollectionPaymentDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p paymentCollectionPaymentDo) Limit(limit int) *paymentCollectionPaymentDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p paymentCollectionPaymentDo) Offset(offset int) *paymentCollectionPaymentDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p paymentCollectionPaymentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *paymentCollectionPaymentDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p paymentCollectionPaymentDo) Unscoped() *paymentCollectionPaymentDo {
	return p.withDO(p.DO.Unscoped())
}

func (p paymentCollectionPaymentDo) Create(values ...*model.PaymentCollectionPayment) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p paymentCollectionPaymentDo) CreateInBatches(values []*model.PaymentCollectionPayment, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p paymentCollectionPaymentDo) Save(values ...*model.PaymentCollectionPayment) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p paymentCollectionPaymentDo) First() (*model.PaymentCollectionPayment, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentCollectionPayment), nil
	}
}

func (p paymentCollectionPaymentDo) Take() (*model.PaymentCollectionPayment, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentCollectionPayment), nil
	}
}

func (p paymentCollectionPaymentDo) Last() (*model.PaymentCollectionPayment, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentCollectionPayment), nil
	}
}

func (p paymentCollectionPaymentDo) Find() ([]*model.PaymentCollectionPayment, error) {
	result, err := p.DO.Find()
	return result.([]*model.PaymentCollectionPayment), err
}

func (p paymentCollectionPaymentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PaymentCollectionPayment, err error) {
	buf := make([]*model.PaymentCollectionPayment, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p paymentCollectionPaymentDo) FindInBatches(result *[]*model.PaymentCollectionPayment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p paymentCollectionPaymentDo) Attrs(attrs ...field.AssignExpr) *paymentCollectionPaymentDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p paymentCollectionPaymentDo) Assign(attrs ...field.AssignExpr) *paymentCollectionPaymentDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p paymentCollectionPaymentDo) Joins(fields ...field.RelationField) *paymentCollectionPaymentDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p paymentCollectionPaymentDo) Preload(fields ...field.RelationField) *paymentCollectionPaymentDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p paymentCollectionPaymentDo) FirstOrInit() (*model.PaymentCollectionPayment, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentCollectionPayment), nil
	}
}

func (p paymentCollectionPaymentDo) FirstOrCreate() (*model.PaymentCollectionPayment, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentCollectionPayment), nil
	}
}

func (p paymentCollectionPaymentDo) FindByPage(offset int, limit int) (result []*model.PaymentCollectionPayment, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p paymentCollectionPaymentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p paymentCollectionPaymentDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p paymentCollectionPaymentDo) Delete(models ...*model.PaymentCollectionPayment) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *paymentCollectionPaymentDo) withDO(do gen.Dao) *paymentCollectionPaymentDo {
	p.DO = *do.(*gen.DO)
	return p
}
