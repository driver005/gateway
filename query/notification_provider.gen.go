// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newNotificationProvider(db *gorm.DB, opts ...gen.DOOption) notificationProvider {
	_notificationProvider := notificationProvider{}

	_notificationProvider.notificationProviderDo.UseDB(db, opts...)
	_notificationProvider.notificationProviderDo.UseModel(&model.NotificationProvider{})

	tableName := _notificationProvider.notificationProviderDo.TableName()
	_notificationProvider.ALL = field.NewAsterisk(tableName)
	_notificationProvider.ID = field.NewString(tableName, "id")
	_notificationProvider.IsInstalled = field.NewBool(tableName, "is_installed")

	_notificationProvider.fillFieldMap()

	return _notificationProvider
}

type notificationProvider struct {
	notificationProviderDo notificationProviderDo

	ALL         field.Asterisk
	ID          field.String
	IsInstalled field.Bool

	fieldMap map[string]field.Expr
}

func (n notificationProvider) Table(newTableName string) *notificationProvider {
	n.notificationProviderDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n notificationProvider) As(alias string) *notificationProvider {
	n.notificationProviderDo.DO = *(n.notificationProviderDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *notificationProvider) updateTableName(table string) *notificationProvider {
	n.ALL = field.NewAsterisk(table)
	n.ID = field.NewString(table, "id")
	n.IsInstalled = field.NewBool(table, "is_installed")

	n.fillFieldMap()

	return n
}

func (n *notificationProvider) WithContext(ctx context.Context) *notificationProviderDo {
	return n.notificationProviderDo.WithContext(ctx)
}

func (n notificationProvider) TableName() string { return n.notificationProviderDo.TableName() }

func (n notificationProvider) Alias() string { return n.notificationProviderDo.Alias() }

func (n notificationProvider) Columns(cols ...field.Expr) gen.Columns {
	return n.notificationProviderDo.Columns(cols...)
}

func (n *notificationProvider) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *notificationProvider) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 2)
	n.fieldMap["id"] = n.ID
	n.fieldMap["is_installed"] = n.IsInstalled
}

func (n notificationProvider) clone(db *gorm.DB) notificationProvider {
	n.notificationProviderDo.ReplaceConnPool(db.Statement.ConnPool)
	return n
}

func (n notificationProvider) replaceDB(db *gorm.DB) notificationProvider {
	n.notificationProviderDo.ReplaceDB(db)
	return n
}

type notificationProviderDo struct{ gen.DO }

func (n notificationProviderDo) Debug() *notificationProviderDo {
	return n.withDO(n.DO.Debug())
}

func (n notificationProviderDo) WithContext(ctx context.Context) *notificationProviderDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n notificationProviderDo) ReadDB() *notificationProviderDo {
	return n.Clauses(dbresolver.Read)
}

func (n notificationProviderDo) WriteDB() *notificationProviderDo {
	return n.Clauses(dbresolver.Write)
}

func (n notificationProviderDo) Session(config *gorm.Session) *notificationProviderDo {
	return n.withDO(n.DO.Session(config))
}

func (n notificationProviderDo) Clauses(conds ...clause.Expression) *notificationProviderDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n notificationProviderDo) Returning(value interface{}, columns ...string) *notificationProviderDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n notificationProviderDo) Not(conds ...gen.Condition) *notificationProviderDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n notificationProviderDo) Or(conds ...gen.Condition) *notificationProviderDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n notificationProviderDo) Select(conds ...field.Expr) *notificationProviderDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n notificationProviderDo) Where(conds ...gen.Condition) *notificationProviderDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n notificationProviderDo) Order(conds ...field.Expr) *notificationProviderDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n notificationProviderDo) Distinct(cols ...field.Expr) *notificationProviderDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n notificationProviderDo) Omit(cols ...field.Expr) *notificationProviderDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n notificationProviderDo) Join(table schema.Tabler, on ...field.Expr) *notificationProviderDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n notificationProviderDo) LeftJoin(table schema.Tabler, on ...field.Expr) *notificationProviderDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n notificationProviderDo) RightJoin(table schema.Tabler, on ...field.Expr) *notificationProviderDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n notificationProviderDo) Group(cols ...field.Expr) *notificationProviderDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n notificationProviderDo) Having(conds ...gen.Condition) *notificationProviderDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n notificationProviderDo) Limit(limit int) *notificationProviderDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n notificationProviderDo) Offset(offset int) *notificationProviderDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n notificationProviderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *notificationProviderDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n notificationProviderDo) Unscoped() *notificationProviderDo {
	return n.withDO(n.DO.Unscoped())
}

func (n notificationProviderDo) Create(values ...*model.NotificationProvider) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n notificationProviderDo) CreateInBatches(values []*model.NotificationProvider, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n notificationProviderDo) Save(values ...*model.NotificationProvider) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n notificationProviderDo) First() (*model.NotificationProvider, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotificationProvider), nil
	}
}

func (n notificationProviderDo) Take() (*model.NotificationProvider, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotificationProvider), nil
	}
}

func (n notificationProviderDo) Last() (*model.NotificationProvider, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotificationProvider), nil
	}
}

func (n notificationProviderDo) Find() ([]*model.NotificationProvider, error) {
	result, err := n.DO.Find()
	return result.([]*model.NotificationProvider), err
}

func (n notificationProviderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NotificationProvider, err error) {
	buf := make([]*model.NotificationProvider, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n notificationProviderDo) FindInBatches(result *[]*model.NotificationProvider, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n notificationProviderDo) Attrs(attrs ...field.AssignExpr) *notificationProviderDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n notificationProviderDo) Assign(attrs ...field.AssignExpr) *notificationProviderDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n notificationProviderDo) Joins(fields ...field.RelationField) *notificationProviderDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n notificationProviderDo) Preload(fields ...field.RelationField) *notificationProviderDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n notificationProviderDo) FirstOrInit() (*model.NotificationProvider, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotificationProvider), nil
	}
}

func (n notificationProviderDo) FirstOrCreate() (*model.NotificationProvider, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotificationProvider), nil
	}
}

func (n notificationProviderDo) FindByPage(offset int, limit int) (result []*model.NotificationProvider, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n notificationProviderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n notificationProviderDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n notificationProviderDo) Delete(models ...*model.NotificationProvider) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *notificationProviderDo) withDO(do gen.Dao) *notificationProviderDo {
	n.DO = *do.(*gen.DO)
	return n
}
