// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newDiscountConditionCustomerGroup(db *gorm.DB, opts ...gen.DOOption) discountConditionCustomerGroup {
	_discountConditionCustomerGroup := discountConditionCustomerGroup{}

	_discountConditionCustomerGroup.discountConditionCustomerGroupDo.UseDB(db, opts...)
	_discountConditionCustomerGroup.discountConditionCustomerGroupDo.UseModel(&model.DiscountConditionCustomerGroup{})

	tableName := _discountConditionCustomerGroup.discountConditionCustomerGroupDo.TableName()
	_discountConditionCustomerGroup.ALL = field.NewAsterisk(tableName)
	_discountConditionCustomerGroup.CustomerGroupID = field.NewString(tableName, "customer_group_id")
	_discountConditionCustomerGroup.ConditionID = field.NewString(tableName, "condition_id")
	_discountConditionCustomerGroup.CreatedAt = field.NewTime(tableName, "created_at")
	_discountConditionCustomerGroup.UpdatedAt = field.NewTime(tableName, "updated_at")
	_discountConditionCustomerGroup.Metadata = field.NewString(tableName, "metadata")

	_discountConditionCustomerGroup.fillFieldMap()

	return _discountConditionCustomerGroup
}

type discountConditionCustomerGroup struct {
	discountConditionCustomerGroupDo discountConditionCustomerGroupDo

	ALL             field.Asterisk
	CustomerGroupID field.String
	ConditionID     field.String
	CreatedAt       field.Time
	UpdatedAt       field.Time
	Metadata        field.String

	fieldMap map[string]field.Expr
}

func (d discountConditionCustomerGroup) Table(newTableName string) *discountConditionCustomerGroup {
	d.discountConditionCustomerGroupDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d discountConditionCustomerGroup) As(alias string) *discountConditionCustomerGroup {
	d.discountConditionCustomerGroupDo.DO = *(d.discountConditionCustomerGroupDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *discountConditionCustomerGroup) updateTableName(table string) *discountConditionCustomerGroup {
	d.ALL = field.NewAsterisk(table)
	d.CustomerGroupID = field.NewString(table, "customer_group_id")
	d.ConditionID = field.NewString(table, "condition_id")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.Metadata = field.NewString(table, "metadata")

	d.fillFieldMap()

	return d
}

func (d *discountConditionCustomerGroup) WithContext(ctx context.Context) *discountConditionCustomerGroupDo {
	return d.discountConditionCustomerGroupDo.WithContext(ctx)
}

func (d discountConditionCustomerGroup) TableName() string {
	return d.discountConditionCustomerGroupDo.TableName()
}

func (d discountConditionCustomerGroup) Alias() string {
	return d.discountConditionCustomerGroupDo.Alias()
}

func (d discountConditionCustomerGroup) Columns(cols ...field.Expr) gen.Columns {
	return d.discountConditionCustomerGroupDo.Columns(cols...)
}

func (d *discountConditionCustomerGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *discountConditionCustomerGroup) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 5)
	d.fieldMap["customer_group_id"] = d.CustomerGroupID
	d.fieldMap["condition_id"] = d.ConditionID
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["metadata"] = d.Metadata
}

func (d discountConditionCustomerGroup) clone(db *gorm.DB) discountConditionCustomerGroup {
	d.discountConditionCustomerGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d discountConditionCustomerGroup) replaceDB(db *gorm.DB) discountConditionCustomerGroup {
	d.discountConditionCustomerGroupDo.ReplaceDB(db)
	return d
}

type discountConditionCustomerGroupDo struct{ gen.DO }

func (d discountConditionCustomerGroupDo) Debug() *discountConditionCustomerGroupDo {
	return d.withDO(d.DO.Debug())
}

func (d discountConditionCustomerGroupDo) WithContext(ctx context.Context) *discountConditionCustomerGroupDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d discountConditionCustomerGroupDo) ReadDB() *discountConditionCustomerGroupDo {
	return d.Clauses(dbresolver.Read)
}

func (d discountConditionCustomerGroupDo) WriteDB() *discountConditionCustomerGroupDo {
	return d.Clauses(dbresolver.Write)
}

func (d discountConditionCustomerGroupDo) Session(config *gorm.Session) *discountConditionCustomerGroupDo {
	return d.withDO(d.DO.Session(config))
}

func (d discountConditionCustomerGroupDo) Clauses(conds ...clause.Expression) *discountConditionCustomerGroupDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d discountConditionCustomerGroupDo) Returning(value interface{}, columns ...string) *discountConditionCustomerGroupDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d discountConditionCustomerGroupDo) Not(conds ...gen.Condition) *discountConditionCustomerGroupDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d discountConditionCustomerGroupDo) Or(conds ...gen.Condition) *discountConditionCustomerGroupDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d discountConditionCustomerGroupDo) Select(conds ...field.Expr) *discountConditionCustomerGroupDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d discountConditionCustomerGroupDo) Where(conds ...gen.Condition) *discountConditionCustomerGroupDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d discountConditionCustomerGroupDo) Order(conds ...field.Expr) *discountConditionCustomerGroupDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d discountConditionCustomerGroupDo) Distinct(cols ...field.Expr) *discountConditionCustomerGroupDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d discountConditionCustomerGroupDo) Omit(cols ...field.Expr) *discountConditionCustomerGroupDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d discountConditionCustomerGroupDo) Join(table schema.Tabler, on ...field.Expr) *discountConditionCustomerGroupDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d discountConditionCustomerGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) *discountConditionCustomerGroupDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d discountConditionCustomerGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) *discountConditionCustomerGroupDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d discountConditionCustomerGroupDo) Group(cols ...field.Expr) *discountConditionCustomerGroupDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d discountConditionCustomerGroupDo) Having(conds ...gen.Condition) *discountConditionCustomerGroupDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d discountConditionCustomerGroupDo) Limit(limit int) *discountConditionCustomerGroupDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d discountConditionCustomerGroupDo) Offset(offset int) *discountConditionCustomerGroupDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d discountConditionCustomerGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *discountConditionCustomerGroupDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d discountConditionCustomerGroupDo) Unscoped() *discountConditionCustomerGroupDo {
	return d.withDO(d.DO.Unscoped())
}

func (d discountConditionCustomerGroupDo) Create(values ...*model.DiscountConditionCustomerGroup) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d discountConditionCustomerGroupDo) CreateInBatches(values []*model.DiscountConditionCustomerGroup, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d discountConditionCustomerGroupDo) Save(values ...*model.DiscountConditionCustomerGroup) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d discountConditionCustomerGroupDo) First() (*model.DiscountConditionCustomerGroup, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiscountConditionCustomerGroup), nil
	}
}

func (d discountConditionCustomerGroupDo) Take() (*model.DiscountConditionCustomerGroup, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiscountConditionCustomerGroup), nil
	}
}

func (d discountConditionCustomerGroupDo) Last() (*model.DiscountConditionCustomerGroup, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiscountConditionCustomerGroup), nil
	}
}

func (d discountConditionCustomerGroupDo) Find() ([]*model.DiscountConditionCustomerGroup, error) {
	result, err := d.DO.Find()
	return result.([]*model.DiscountConditionCustomerGroup), err
}

func (d discountConditionCustomerGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DiscountConditionCustomerGroup, err error) {
	buf := make([]*model.DiscountConditionCustomerGroup, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d discountConditionCustomerGroupDo) FindInBatches(result *[]*model.DiscountConditionCustomerGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d discountConditionCustomerGroupDo) Attrs(attrs ...field.AssignExpr) *discountConditionCustomerGroupDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d discountConditionCustomerGroupDo) Assign(attrs ...field.AssignExpr) *discountConditionCustomerGroupDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d discountConditionCustomerGroupDo) Joins(fields ...field.RelationField) *discountConditionCustomerGroupDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d discountConditionCustomerGroupDo) Preload(fields ...field.RelationField) *discountConditionCustomerGroupDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d discountConditionCustomerGroupDo) FirstOrInit() (*model.DiscountConditionCustomerGroup, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiscountConditionCustomerGroup), nil
	}
}

func (d discountConditionCustomerGroupDo) FirstOrCreate() (*model.DiscountConditionCustomerGroup, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DiscountConditionCustomerGroup), nil
	}
}

func (d discountConditionCustomerGroupDo) FindByPage(offset int, limit int) (result []*model.DiscountConditionCustomerGroup, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d discountConditionCustomerGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d discountConditionCustomerGroupDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d discountConditionCustomerGroupDo) Delete(models ...*model.DiscountConditionCustomerGroup) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *discountConditionCustomerGroupDo) withDO(do gen.Dao) *discountConditionCustomerGroupDo {
	d.DO = *do.(*gen.DO)
	return d
}
