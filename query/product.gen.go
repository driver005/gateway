// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newProduct(db *gorm.DB, opts ...gen.DOOption) product {
	_product := product{}

	_product.productDo.UseDB(db, opts...)
	_product.productDo.UseModel(&model.Product{})

	tableName := _product.productDo.TableName()
	_product.ALL = field.NewAsterisk(tableName)
	_product.ID = field.NewString(tableName, "id")
	_product.Title = field.NewString(tableName, "title")
	_product.Subtitle = field.NewString(tableName, "subtitle")
	_product.Description = field.NewString(tableName, "description")
	_product.Handle = field.NewString(tableName, "handle")
	_product.IsGiftcard = field.NewBool(tableName, "is_giftcard")
	_product.Thumbnail = field.NewString(tableName, "thumbnail")
	_product.Weight = field.NewInt32(tableName, "weight")
	_product.Length = field.NewInt32(tableName, "length")
	_product.Height = field.NewInt32(tableName, "height")
	_product.Width = field.NewInt32(tableName, "width")
	_product.HsCode = field.NewString(tableName, "hs_code")
	_product.OriginCountry = field.NewString(tableName, "origin_country")
	_product.MidCode = field.NewString(tableName, "mid_code")
	_product.Material = field.NewString(tableName, "material")
	_product.CreatedAt = field.NewTime(tableName, "created_at")
	_product.UpdatedAt = field.NewTime(tableName, "updated_at")
	_product.DeletedAt = field.NewField(tableName, "deleted_at")
	_product.Metadata = field.NewString(tableName, "metadata")
	_product.CollectionID = field.NewString(tableName, "collection_id")
	_product.TypeID = field.NewString(tableName, "type_id")
	_product.Discountable = field.NewBool(tableName, "discountable")
	_product.Status = field.NewString(tableName, "status")
	_product.ExternalID = field.NewString(tableName, "external_id")

	_product.fillFieldMap()

	return _product
}

type product struct {
	productDo productDo

	ALL           field.Asterisk
	ID            field.String
	Title         field.String
	Subtitle      field.String
	Description   field.String
	Handle        field.String
	IsGiftcard    field.Bool
	Thumbnail     field.String
	Weight        field.Int32
	Length        field.Int32
	Height        field.Int32
	Width         field.Int32
	HsCode        field.String
	OriginCountry field.String
	MidCode       field.String
	Material      field.String
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	Metadata      field.String
	CollectionID  field.String
	TypeID        field.String
	Discountable  field.Bool
	Status        field.String
	ExternalID    field.String

	fieldMap map[string]field.Expr
}

func (p product) Table(newTableName string) *product {
	p.productDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p product) As(alias string) *product {
	p.productDo.DO = *(p.productDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *product) updateTableName(table string) *product {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewString(table, "id")
	p.Title = field.NewString(table, "title")
	p.Subtitle = field.NewString(table, "subtitle")
	p.Description = field.NewString(table, "description")
	p.Handle = field.NewString(table, "handle")
	p.IsGiftcard = field.NewBool(table, "is_giftcard")
	p.Thumbnail = field.NewString(table, "thumbnail")
	p.Weight = field.NewInt32(table, "weight")
	p.Length = field.NewInt32(table, "length")
	p.Height = field.NewInt32(table, "height")
	p.Width = field.NewInt32(table, "width")
	p.HsCode = field.NewString(table, "hs_code")
	p.OriginCountry = field.NewString(table, "origin_country")
	p.MidCode = field.NewString(table, "mid_code")
	p.Material = field.NewString(table, "material")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.Metadata = field.NewString(table, "metadata")
	p.CollectionID = field.NewString(table, "collection_id")
	p.TypeID = field.NewString(table, "type_id")
	p.Discountable = field.NewBool(table, "discountable")
	p.Status = field.NewString(table, "status")
	p.ExternalID = field.NewString(table, "external_id")

	p.fillFieldMap()

	return p
}

func (p *product) WithContext(ctx context.Context) *productDo { return p.productDo.WithContext(ctx) }

func (p product) TableName() string { return p.productDo.TableName() }

func (p product) Alias() string { return p.productDo.Alias() }

func (p product) Columns(cols ...field.Expr) gen.Columns { return p.productDo.Columns(cols...) }

func (p *product) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *product) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 24)
	p.fieldMap["id"] = p.ID
	p.fieldMap["title"] = p.Title
	p.fieldMap["subtitle"] = p.Subtitle
	p.fieldMap["description"] = p.Description
	p.fieldMap["handle"] = p.Handle
	p.fieldMap["is_giftcard"] = p.IsGiftcard
	p.fieldMap["thumbnail"] = p.Thumbnail
	p.fieldMap["weight"] = p.Weight
	p.fieldMap["length"] = p.Length
	p.fieldMap["height"] = p.Height
	p.fieldMap["width"] = p.Width
	p.fieldMap["hs_code"] = p.HsCode
	p.fieldMap["origin_country"] = p.OriginCountry
	p.fieldMap["mid_code"] = p.MidCode
	p.fieldMap["material"] = p.Material
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["metadata"] = p.Metadata
	p.fieldMap["collection_id"] = p.CollectionID
	p.fieldMap["type_id"] = p.TypeID
	p.fieldMap["discountable"] = p.Discountable
	p.fieldMap["status"] = p.Status
	p.fieldMap["external_id"] = p.ExternalID
}

func (p product) clone(db *gorm.DB) product {
	p.productDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p product) replaceDB(db *gorm.DB) product {
	p.productDo.ReplaceDB(db)
	return p
}

type productDo struct{ gen.DO }

func (p productDo) Debug() *productDo {
	return p.withDO(p.DO.Debug())
}

func (p productDo) WithContext(ctx context.Context) *productDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p productDo) ReadDB() *productDo {
	return p.Clauses(dbresolver.Read)
}

func (p productDo) WriteDB() *productDo {
	return p.Clauses(dbresolver.Write)
}

func (p productDo) Session(config *gorm.Session) *productDo {
	return p.withDO(p.DO.Session(config))
}

func (p productDo) Clauses(conds ...clause.Expression) *productDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p productDo) Returning(value interface{}, columns ...string) *productDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p productDo) Not(conds ...gen.Condition) *productDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p productDo) Or(conds ...gen.Condition) *productDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p productDo) Select(conds ...field.Expr) *productDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p productDo) Where(conds ...gen.Condition) *productDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p productDo) Order(conds ...field.Expr) *productDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p productDo) Distinct(cols ...field.Expr) *productDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p productDo) Omit(cols ...field.Expr) *productDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p productDo) Join(table schema.Tabler, on ...field.Expr) *productDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p productDo) LeftJoin(table schema.Tabler, on ...field.Expr) *productDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p productDo) RightJoin(table schema.Tabler, on ...field.Expr) *productDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p productDo) Group(cols ...field.Expr) *productDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p productDo) Having(conds ...gen.Condition) *productDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p productDo) Limit(limit int) *productDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p productDo) Offset(offset int) *productDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p productDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *productDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p productDo) Unscoped() *productDo {
	return p.withDO(p.DO.Unscoped())
}

func (p productDo) Create(values ...*model.Product) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p productDo) CreateInBatches(values []*model.Product, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p productDo) Save(values ...*model.Product) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p productDo) First() (*model.Product, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Product), nil
	}
}

func (p productDo) Take() (*model.Product, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Product), nil
	}
}

func (p productDo) Last() (*model.Product, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Product), nil
	}
}

func (p productDo) Find() ([]*model.Product, error) {
	result, err := p.DO.Find()
	return result.([]*model.Product), err
}

func (p productDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Product, err error) {
	buf := make([]*model.Product, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p productDo) FindInBatches(result *[]*model.Product, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p productDo) Attrs(attrs ...field.AssignExpr) *productDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p productDo) Assign(attrs ...field.AssignExpr) *productDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p productDo) Joins(fields ...field.RelationField) *productDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p productDo) Preload(fields ...field.RelationField) *productDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p productDo) FirstOrInit() (*model.Product, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Product), nil
	}
}

func (p productDo) FirstOrCreate() (*model.Product, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Product), nil
	}
}

func (p productDo) FindByPage(offset int, limit int) (result []*model.Product, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p productDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p productDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p productDo) Delete(models ...*model.Product) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *productDo) withDO(do gen.Dao) *productDo {
	p.DO = *do.(*gen.DO)
	return p
}
