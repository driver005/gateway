// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newCartLineItem(db *gorm.DB, opts ...gen.DOOption) cartLineItem {
	_cartLineItem := cartLineItem{}

	_cartLineItem.cartLineItemDo.UseDB(db, opts...)
	_cartLineItem.cartLineItemDo.UseModel(&model.CartLineItem{})

	tableName := _cartLineItem.cartLineItemDo.TableName()
	_cartLineItem.ALL = field.NewAsterisk(tableName)
	_cartLineItem.ID = field.NewString(tableName, "id")
	_cartLineItem.CartID = field.NewString(tableName, "cart_id")
	_cartLineItem.Title = field.NewString(tableName, "title")
	_cartLineItem.Subtitle = field.NewString(tableName, "subtitle")
	_cartLineItem.Thumbnail = field.NewString(tableName, "thumbnail")
	_cartLineItem.Quantity = field.NewInt32(tableName, "quantity")
	_cartLineItem.VariantID = field.NewString(tableName, "variant_id")
	_cartLineItem.ProductID = field.NewString(tableName, "product_id")
	_cartLineItem.ProductTitle = field.NewString(tableName, "product_title")
	_cartLineItem.ProductDescription = field.NewString(tableName, "product_description")
	_cartLineItem.ProductSubtitle = field.NewString(tableName, "product_subtitle")
	_cartLineItem.ProductType = field.NewString(tableName, "product_type")
	_cartLineItem.ProductCollection = field.NewString(tableName, "product_collection")
	_cartLineItem.ProductHandle = field.NewString(tableName, "product_handle")
	_cartLineItem.VariantSku = field.NewString(tableName, "variant_sku")
	_cartLineItem.VariantBarcode = field.NewString(tableName, "variant_barcode")
	_cartLineItem.VariantTitle = field.NewString(tableName, "variant_title")
	_cartLineItem.VariantOptionValues = field.NewString(tableName, "variant_option_values")
	_cartLineItem.RequiresShipping = field.NewBool(tableName, "requires_shipping")
	_cartLineItem.IsDiscountable = field.NewBool(tableName, "is_discountable")
	_cartLineItem.IsTaxInclusive = field.NewBool(tableName, "is_tax_inclusive")
	_cartLineItem.CompareAtUnitPrice = field.NewFloat64(tableName, "compare_at_unit_price")
	_cartLineItem.RawCompareAtUnitPrice = field.NewString(tableName, "raw_compare_at_unit_price")
	_cartLineItem.UnitPrice = field.NewFloat64(tableName, "unit_price")
	_cartLineItem.RawUnitPrice = field.NewString(tableName, "raw_unit_price")
	_cartLineItem.CreatedAt = field.NewTime(tableName, "created_at")
	_cartLineItem.UpdatedAt = field.NewTime(tableName, "updated_at")

	_cartLineItem.fillFieldMap()

	return _cartLineItem
}

type cartLineItem struct {
	cartLineItemDo cartLineItemDo

	ALL                   field.Asterisk
	ID                    field.String
	CartID                field.String
	Title                 field.String
	Subtitle              field.String
	Thumbnail             field.String
	Quantity              field.Int32
	VariantID             field.String
	ProductID             field.String
	ProductTitle          field.String
	ProductDescription    field.String
	ProductSubtitle       field.String
	ProductType           field.String
	ProductCollection     field.String
	ProductHandle         field.String
	VariantSku            field.String
	VariantBarcode        field.String
	VariantTitle          field.String
	VariantOptionValues   field.String
	RequiresShipping      field.Bool
	IsDiscountable        field.Bool
	IsTaxInclusive        field.Bool
	CompareAtUnitPrice    field.Float64
	RawCompareAtUnitPrice field.String
	UnitPrice             field.Float64
	RawUnitPrice          field.String
	CreatedAt             field.Time
	UpdatedAt             field.Time

	fieldMap map[string]field.Expr
}

func (c cartLineItem) Table(newTableName string) *cartLineItem {
	c.cartLineItemDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cartLineItem) As(alias string) *cartLineItem {
	c.cartLineItemDo.DO = *(c.cartLineItemDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cartLineItem) updateTableName(table string) *cartLineItem {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewString(table, "id")
	c.CartID = field.NewString(table, "cart_id")
	c.Title = field.NewString(table, "title")
	c.Subtitle = field.NewString(table, "subtitle")
	c.Thumbnail = field.NewString(table, "thumbnail")
	c.Quantity = field.NewInt32(table, "quantity")
	c.VariantID = field.NewString(table, "variant_id")
	c.ProductID = field.NewString(table, "product_id")
	c.ProductTitle = field.NewString(table, "product_title")
	c.ProductDescription = field.NewString(table, "product_description")
	c.ProductSubtitle = field.NewString(table, "product_subtitle")
	c.ProductType = field.NewString(table, "product_type")
	c.ProductCollection = field.NewString(table, "product_collection")
	c.ProductHandle = field.NewString(table, "product_handle")
	c.VariantSku = field.NewString(table, "variant_sku")
	c.VariantBarcode = field.NewString(table, "variant_barcode")
	c.VariantTitle = field.NewString(table, "variant_title")
	c.VariantOptionValues = field.NewString(table, "variant_option_values")
	c.RequiresShipping = field.NewBool(table, "requires_shipping")
	c.IsDiscountable = field.NewBool(table, "is_discountable")
	c.IsTaxInclusive = field.NewBool(table, "is_tax_inclusive")
	c.CompareAtUnitPrice = field.NewFloat64(table, "compare_at_unit_price")
	c.RawCompareAtUnitPrice = field.NewString(table, "raw_compare_at_unit_price")
	c.UnitPrice = field.NewFloat64(table, "unit_price")
	c.RawUnitPrice = field.NewString(table, "raw_unit_price")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *cartLineItem) WithContext(ctx context.Context) *cartLineItemDo {
	return c.cartLineItemDo.WithContext(ctx)
}

func (c cartLineItem) TableName() string { return c.cartLineItemDo.TableName() }

func (c cartLineItem) Alias() string { return c.cartLineItemDo.Alias() }

func (c cartLineItem) Columns(cols ...field.Expr) gen.Columns {
	return c.cartLineItemDo.Columns(cols...)
}

func (c *cartLineItem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cartLineItem) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 27)
	c.fieldMap["id"] = c.ID
	c.fieldMap["cart_id"] = c.CartID
	c.fieldMap["title"] = c.Title
	c.fieldMap["subtitle"] = c.Subtitle
	c.fieldMap["thumbnail"] = c.Thumbnail
	c.fieldMap["quantity"] = c.Quantity
	c.fieldMap["variant_id"] = c.VariantID
	c.fieldMap["product_id"] = c.ProductID
	c.fieldMap["product_title"] = c.ProductTitle
	c.fieldMap["product_description"] = c.ProductDescription
	c.fieldMap["product_subtitle"] = c.ProductSubtitle
	c.fieldMap["product_type"] = c.ProductType
	c.fieldMap["product_collection"] = c.ProductCollection
	c.fieldMap["product_handle"] = c.ProductHandle
	c.fieldMap["variant_sku"] = c.VariantSku
	c.fieldMap["variant_barcode"] = c.VariantBarcode
	c.fieldMap["variant_title"] = c.VariantTitle
	c.fieldMap["variant_option_values"] = c.VariantOptionValues
	c.fieldMap["requires_shipping"] = c.RequiresShipping
	c.fieldMap["is_discountable"] = c.IsDiscountable
	c.fieldMap["is_tax_inclusive"] = c.IsTaxInclusive
	c.fieldMap["compare_at_unit_price"] = c.CompareAtUnitPrice
	c.fieldMap["raw_compare_at_unit_price"] = c.RawCompareAtUnitPrice
	c.fieldMap["unit_price"] = c.UnitPrice
	c.fieldMap["raw_unit_price"] = c.RawUnitPrice
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
}

func (c cartLineItem) clone(db *gorm.DB) cartLineItem {
	c.cartLineItemDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cartLineItem) replaceDB(db *gorm.DB) cartLineItem {
	c.cartLineItemDo.ReplaceDB(db)
	return c
}

type cartLineItemDo struct{ gen.DO }

func (c cartLineItemDo) Debug() *cartLineItemDo {
	return c.withDO(c.DO.Debug())
}

func (c cartLineItemDo) WithContext(ctx context.Context) *cartLineItemDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cartLineItemDo) ReadDB() *cartLineItemDo {
	return c.Clauses(dbresolver.Read)
}

func (c cartLineItemDo) WriteDB() *cartLineItemDo {
	return c.Clauses(dbresolver.Write)
}

func (c cartLineItemDo) Session(config *gorm.Session) *cartLineItemDo {
	return c.withDO(c.DO.Session(config))
}

func (c cartLineItemDo) Clauses(conds ...clause.Expression) *cartLineItemDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cartLineItemDo) Returning(value interface{}, columns ...string) *cartLineItemDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cartLineItemDo) Not(conds ...gen.Condition) *cartLineItemDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cartLineItemDo) Or(conds ...gen.Condition) *cartLineItemDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cartLineItemDo) Select(conds ...field.Expr) *cartLineItemDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cartLineItemDo) Where(conds ...gen.Condition) *cartLineItemDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cartLineItemDo) Order(conds ...field.Expr) *cartLineItemDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cartLineItemDo) Distinct(cols ...field.Expr) *cartLineItemDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cartLineItemDo) Omit(cols ...field.Expr) *cartLineItemDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cartLineItemDo) Join(table schema.Tabler, on ...field.Expr) *cartLineItemDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cartLineItemDo) LeftJoin(table schema.Tabler, on ...field.Expr) *cartLineItemDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cartLineItemDo) RightJoin(table schema.Tabler, on ...field.Expr) *cartLineItemDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cartLineItemDo) Group(cols ...field.Expr) *cartLineItemDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cartLineItemDo) Having(conds ...gen.Condition) *cartLineItemDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cartLineItemDo) Limit(limit int) *cartLineItemDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cartLineItemDo) Offset(offset int) *cartLineItemDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cartLineItemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *cartLineItemDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cartLineItemDo) Unscoped() *cartLineItemDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cartLineItemDo) Create(values ...*model.CartLineItem) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cartLineItemDo) CreateInBatches(values []*model.CartLineItem, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cartLineItemDo) Save(values ...*model.CartLineItem) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cartLineItemDo) First() (*model.CartLineItem, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CartLineItem), nil
	}
}

func (c cartLineItemDo) Take() (*model.CartLineItem, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CartLineItem), nil
	}
}

func (c cartLineItemDo) Last() (*model.CartLineItem, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CartLineItem), nil
	}
}

func (c cartLineItemDo) Find() ([]*model.CartLineItem, error) {
	result, err := c.DO.Find()
	return result.([]*model.CartLineItem), err
}

func (c cartLineItemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CartLineItem, err error) {
	buf := make([]*model.CartLineItem, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cartLineItemDo) FindInBatches(result *[]*model.CartLineItem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cartLineItemDo) Attrs(attrs ...field.AssignExpr) *cartLineItemDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cartLineItemDo) Assign(attrs ...field.AssignExpr) *cartLineItemDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cartLineItemDo) Joins(fields ...field.RelationField) *cartLineItemDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cartLineItemDo) Preload(fields ...field.RelationField) *cartLineItemDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cartLineItemDo) FirstOrInit() (*model.CartLineItem, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CartLineItem), nil
	}
}

func (c cartLineItemDo) FirstOrCreate() (*model.CartLineItem, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CartLineItem), nil
	}
}

func (c cartLineItemDo) FindByPage(offset int, limit int) (result []*model.CartLineItem, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cartLineItemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cartLineItemDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cartLineItemDo) Delete(models ...*model.CartLineItem) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cartLineItemDo) withDO(do gen.Dao) *cartLineItemDo {
	c.DO = *do.(*gen.DO)
	return c
}
