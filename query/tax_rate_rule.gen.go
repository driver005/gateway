// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/driver005/gateway/model"
)

func newTaxRateRule(db *gorm.DB, opts ...gen.DOOption) taxRateRule {
	_taxRateRule := taxRateRule{}

	_taxRateRule.taxRateRuleDo.UseDB(db, opts...)
	_taxRateRule.taxRateRuleDo.UseModel(&model.TaxRateRule{})

	tableName := _taxRateRule.taxRateRuleDo.TableName()
	_taxRateRule.ALL = field.NewAsterisk(tableName)
	_taxRateRule.TaxRateID = field.NewString(tableName, "tax_rate_id")
	_taxRateRule.ReferenceID = field.NewString(tableName, "reference_id")
	_taxRateRule.Reference = field.NewString(tableName, "reference")
	_taxRateRule.Metadata = field.NewString(tableName, "metadata")
	_taxRateRule.CreatedAt = field.NewTime(tableName, "created_at")
	_taxRateRule.UpdatedAt = field.NewTime(tableName, "updated_at")
	_taxRateRule.CreatedBy = field.NewString(tableName, "created_by")

	_taxRateRule.fillFieldMap()

	return _taxRateRule
}

type taxRateRule struct {
	taxRateRuleDo taxRateRuleDo

	ALL         field.Asterisk
	TaxRateID   field.String
	ReferenceID field.String
	Reference   field.String
	Metadata    field.String
	CreatedAt   field.Time
	UpdatedAt   field.Time
	CreatedBy   field.String

	fieldMap map[string]field.Expr
}

func (t taxRateRule) Table(newTableName string) *taxRateRule {
	t.taxRateRuleDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t taxRateRule) As(alias string) *taxRateRule {
	t.taxRateRuleDo.DO = *(t.taxRateRuleDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *taxRateRule) updateTableName(table string) *taxRateRule {
	t.ALL = field.NewAsterisk(table)
	t.TaxRateID = field.NewString(table, "tax_rate_id")
	t.ReferenceID = field.NewString(table, "reference_id")
	t.Reference = field.NewString(table, "reference")
	t.Metadata = field.NewString(table, "metadata")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.CreatedBy = field.NewString(table, "created_by")

	t.fillFieldMap()

	return t
}

func (t *taxRateRule) WithContext(ctx context.Context) *taxRateRuleDo {
	return t.taxRateRuleDo.WithContext(ctx)
}

func (t taxRateRule) TableName() string { return t.taxRateRuleDo.TableName() }

func (t taxRateRule) Alias() string { return t.taxRateRuleDo.Alias() }

func (t taxRateRule) Columns(cols ...field.Expr) gen.Columns { return t.taxRateRuleDo.Columns(cols...) }

func (t *taxRateRule) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *taxRateRule) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 7)
	t.fieldMap["tax_rate_id"] = t.TaxRateID
	t.fieldMap["reference_id"] = t.ReferenceID
	t.fieldMap["reference"] = t.Reference
	t.fieldMap["metadata"] = t.Metadata
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["created_by"] = t.CreatedBy
}

func (t taxRateRule) clone(db *gorm.DB) taxRateRule {
	t.taxRateRuleDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t taxRateRule) replaceDB(db *gorm.DB) taxRateRule {
	t.taxRateRuleDo.ReplaceDB(db)
	return t
}

type taxRateRuleDo struct{ gen.DO }

func (t taxRateRuleDo) Debug() *taxRateRuleDo {
	return t.withDO(t.DO.Debug())
}

func (t taxRateRuleDo) WithContext(ctx context.Context) *taxRateRuleDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t taxRateRuleDo) ReadDB() *taxRateRuleDo {
	return t.Clauses(dbresolver.Read)
}

func (t taxRateRuleDo) WriteDB() *taxRateRuleDo {
	return t.Clauses(dbresolver.Write)
}

func (t taxRateRuleDo) Session(config *gorm.Session) *taxRateRuleDo {
	return t.withDO(t.DO.Session(config))
}

func (t taxRateRuleDo) Clauses(conds ...clause.Expression) *taxRateRuleDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t taxRateRuleDo) Returning(value interface{}, columns ...string) *taxRateRuleDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t taxRateRuleDo) Not(conds ...gen.Condition) *taxRateRuleDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t taxRateRuleDo) Or(conds ...gen.Condition) *taxRateRuleDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t taxRateRuleDo) Select(conds ...field.Expr) *taxRateRuleDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t taxRateRuleDo) Where(conds ...gen.Condition) *taxRateRuleDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t taxRateRuleDo) Order(conds ...field.Expr) *taxRateRuleDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t taxRateRuleDo) Distinct(cols ...field.Expr) *taxRateRuleDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t taxRateRuleDo) Omit(cols ...field.Expr) *taxRateRuleDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t taxRateRuleDo) Join(table schema.Tabler, on ...field.Expr) *taxRateRuleDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t taxRateRuleDo) LeftJoin(table schema.Tabler, on ...field.Expr) *taxRateRuleDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t taxRateRuleDo) RightJoin(table schema.Tabler, on ...field.Expr) *taxRateRuleDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t taxRateRuleDo) Group(cols ...field.Expr) *taxRateRuleDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t taxRateRuleDo) Having(conds ...gen.Condition) *taxRateRuleDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t taxRateRuleDo) Limit(limit int) *taxRateRuleDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t taxRateRuleDo) Offset(offset int) *taxRateRuleDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t taxRateRuleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *taxRateRuleDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t taxRateRuleDo) Unscoped() *taxRateRuleDo {
	return t.withDO(t.DO.Unscoped())
}

func (t taxRateRuleDo) Create(values ...*model.TaxRateRule) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t taxRateRuleDo) CreateInBatches(values []*model.TaxRateRule, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t taxRateRuleDo) Save(values ...*model.TaxRateRule) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t taxRateRuleDo) First() (*model.TaxRateRule, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaxRateRule), nil
	}
}

func (t taxRateRuleDo) Take() (*model.TaxRateRule, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaxRateRule), nil
	}
}

func (t taxRateRuleDo) Last() (*model.TaxRateRule, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaxRateRule), nil
	}
}

func (t taxRateRuleDo) Find() ([]*model.TaxRateRule, error) {
	result, err := t.DO.Find()
	return result.([]*model.TaxRateRule), err
}

func (t taxRateRuleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TaxRateRule, err error) {
	buf := make([]*model.TaxRateRule, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t taxRateRuleDo) FindInBatches(result *[]*model.TaxRateRule, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t taxRateRuleDo) Attrs(attrs ...field.AssignExpr) *taxRateRuleDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t taxRateRuleDo) Assign(attrs ...field.AssignExpr) *taxRateRuleDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t taxRateRuleDo) Joins(fields ...field.RelationField) *taxRateRuleDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t taxRateRuleDo) Preload(fields ...field.RelationField) *taxRateRuleDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t taxRateRuleDo) FirstOrInit() (*model.TaxRateRule, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaxRateRule), nil
	}
}

func (t taxRateRuleDo) FirstOrCreate() (*model.TaxRateRule, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaxRateRule), nil
	}
}

func (t taxRateRuleDo) FindByPage(offset int, limit int) (result []*model.TaxRateRule, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t taxRateRuleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t taxRateRuleDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t taxRateRuleDo) Delete(models ...*model.TaxRateRule) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *taxRateRuleDo) withDO(do gen.Dao) *taxRateRuleDo {
	t.DO = *do.(*gen.DO)
	return t
}
