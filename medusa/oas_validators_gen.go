// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/validate"
)

func (s *AdminGetPricingRuleTypesParams) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Offset.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "offset",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Limit.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "limit",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AdminGetProductsParams) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.And {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "$and",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Or {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "$or",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Offset.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "offset",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Limit.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "limit",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AdminGetProductsParamsAndItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.And {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "$and",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Or {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "$or",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Offset.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "offset",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Limit.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "limit",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AdminGetProductsParamsAndItemAndItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Offset.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "offset",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Limit.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "limit",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s AdminGetProductsParamsAndItemAndItemID) Validate() error {
	switch s.Type {
	case StringAdminGetProductsParamsAndItemAndItemID:
		return nil // no validation needed
	case StringArrayAdminGetProductsParamsAndItemAndItemID:
		if s.StringArray == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s AdminGetProductsParamsAndItemID) Validate() error {
	switch s.Type {
	case StringAdminGetProductsParamsAndItemID:
		return nil // no validation needed
	case StringArrayAdminGetProductsParamsAndItemID:
		if s.StringArray == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s *AdminGetProductsParamsAndItemOrItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Offset.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "offset",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Limit.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "limit",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s AdminGetProductsParamsAndItemOrItemID) Validate() error {
	switch s.Type {
	case StringAdminGetProductsParamsAndItemOrItemID:
		return nil // no validation needed
	case StringArrayAdminGetProductsParamsAndItemOrItemID:
		if s.StringArray == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s AdminGetProductsParamsID) Validate() error {
	switch s.Type {
	case StringAdminGetProductsParamsID:
		return nil // no validation needed
	case StringArrayAdminGetProductsParamsID:
		if s.StringArray == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s *AdminGetProductsParamsOrItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.And {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "$and",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Or {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "$or",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Offset.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "offset",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Limit.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "limit",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AdminGetProductsParamsOrItemAndItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Offset.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "offset",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Limit.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "limit",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s AdminGetProductsParamsOrItemAndItemID) Validate() error {
	switch s.Type {
	case StringAdminGetProductsParamsOrItemAndItemID:
		return nil // no validation needed
	case StringArrayAdminGetProductsParamsOrItemAndItemID:
		if s.StringArray == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s AdminGetProductsParamsOrItemID) Validate() error {
	switch s.Type {
	case StringAdminGetProductsParamsOrItemID:
		return nil // no validation needed
	case StringArrayAdminGetProductsParamsOrItemID:
		if s.StringArray == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s *AdminGetProductsParamsOrItemOrItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Offset.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "offset",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Limit.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "limit",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s AdminGetProductsParamsOrItemOrItemID) Validate() error {
	switch s.Type {
	case StringAdminGetProductsParamsOrItemOrItemID:
		return nil // no validation needed
	case StringArrayAdminGetProductsParamsOrItemOrItemID:
		if s.StringArray == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s *AdminGetPromotionsParams) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Offset.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "offset",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Limit.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "limit",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AdminPostCampaignsReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Budget.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "budget",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AdminPostCustomerGroupsGroupCustomersBatchReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.CustomerIds == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_ids",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AdminPostFulfillmentShippingOptionsRulesBatchAddReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Rules == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Rules {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rules",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AdminPostFulfillmentShippingOptionsRulesBatchAddReqRulesItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Value.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "value",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s AdminPostFulfillmentShippingOptionsRulesBatchAddReqRulesItemValue) Validate() error {
	switch s.Type {
	case StringAdminPostFulfillmentShippingOptionsRulesBatchAddReqRulesItemValue:
		return nil // no validation needed
	case StringArrayAdminPostFulfillmentShippingOptionsRulesBatchAddReqRulesItemValue:
		if s.StringArray == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s *AdminPostFulfillmentShippingOptionsRulesBatchRemoveReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.RuleIds == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rule_ids",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AdminPostInventoryItemsInventoryItemReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Weight.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "weight",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Height.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "height",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Length.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "length",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Width.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "width",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AdminPostInventoryItemsItemLocationLevelsLevelReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.IncomingQuantity.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "incoming_quantity",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.StockedQuantity.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "stocked_quantity",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AdminPostInventoryItemsItemLocationLevelsReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.StockedQuantity)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "stocked_quantity",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.IncomingQuantity.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "incoming_quantity",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AdminPostInventoryItemsReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Weight.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "weight",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Length.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "length",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Height.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "height",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Width.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "width",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AdminPostPaymentsCapturesReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Amount.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "amount",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AdminPostPaymentsRefundsReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Amount.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "amount",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AdminPostPriceListsPriceListPricesBatchAddReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Prices == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Prices {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "prices",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AdminPostPriceListsPriceListPricesBatchAddReqPricesItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.Amount)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "amount",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MinQuantity.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "min_quantity",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MaxQuantity.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "max_quantity",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AdminPostPriceListsPriceListPricesBatchRemoveReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Ids == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "ids",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AdminPostPriceListsPriceListReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Prices == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Prices {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "prices",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AdminPostPriceListsPriceListReqPricesItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.Amount)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "amount",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MinQuantity.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "min_quantity",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MaxQuantity.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "max_quantity",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AdminPostPriceListsReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Prices == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Prices {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "prices",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AdminPostPriceListsReqPricesItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.Amount)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "amount",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MinQuantity.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "min_quantity",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MaxQuantity.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "max_quantity",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AdminPostPricingRuleTypesReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.DefaultPriority)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "default_priority",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AdminPostPricingRuleTypesRuleTypeReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.DefaultPriority.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "default_priority",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AdminPostPromotionsPromotionReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Campaign.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "campaign",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ApplicationMethod.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "application_method",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Rules {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rules",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AdminPostPromotionsPromotionReqRulesItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Values == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "values",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AdminPostPromotionsPromotionRulesBatchAddReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Rules == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Rules {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rules",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AdminPostPromotionsPromotionRulesBatchAddReqRulesItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Values == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "values",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AdminPostPromotionsPromotionRulesBatchRemoveReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.RuleIds == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rule_ids",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AdminPostPromotionsPromotionRulesBatchUpdateReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Rules == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Rules {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rules",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AdminPostPromotionsPromotionRulesBatchUpdateReqRulesItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Values == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "values",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AdminPostTaxRatesReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Rate.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rate",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AdminPostTaxRatesTaxRateReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Rate.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rate",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AdminPostTaxRegionsReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.DefaultTaxRate.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "default_tax_rate",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ApplicationMethodsMethodPostReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.MaxQuantity.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "max_quantity",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.TargetRules {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "target_rules",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.BuyRules {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "buy_rules",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ApplyToQuantity.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "apply_to_quantity",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BuyRulesMinQuantity.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "buy_rules_min_quantity",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ApplicationMethodsMethodPostReqBuyRulesItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Values == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "values",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ApplicationMethodsMethodPostReqTargetRulesItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Values == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "values",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *CampaignBudget) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Limit.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "limit",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *CreateDefaultTaxRate) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Rate.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rate",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *DeleteApiKeysIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteApiKeysIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteApiKeysIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteApiKeysIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteCampaignsIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteCampaignsIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteCampaignsIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteCampaignsIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteCollectionsIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteCollectionsIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteCollectionsIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteCollectionsIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteCustomerGroupsIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteCustomerGroupsIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteCustomerGroupsIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteCustomerGroupsIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteCustomersIdAddressesAddressIDConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteCustomersIdAddressesAddressIDInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteCustomersIdAddressesAddressIDNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteCustomersIdAddressesAddressIDUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteCustomersIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteCustomersIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteCustomersIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteCustomersIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteInventoryItemsIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteInventoryItemsIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteInventoryItemsIdLocationLevelsLocationIDConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteInventoryItemsIdLocationLevelsLocationIDInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteInventoryItemsIdLocationLevelsLocationIDNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteInventoryItemsIdLocationLevelsLocationIDUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteInventoryItemsIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteInventoryItemsIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteInvitesIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteInvitesIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteInvitesIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteInvitesIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeletePriceListsIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeletePriceListsIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeletePriceListsIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeletePriceListsIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeletePricingRuleTypesIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeletePricingRuleTypesIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeletePricingRuleTypesIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeletePricingRuleTypesIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteProductsIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteProductsIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteProductsIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteProductsIdOptionsOptionIDConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteProductsIdOptionsOptionIDInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteProductsIdOptionsOptionIDNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteProductsIdOptionsOptionIDUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteProductsIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteProductsIdVariantsVariantIDConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteProductsIdVariantsVariantIDInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteProductsIdVariantsVariantIDNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteProductsIdVariantsVariantIDUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeletePromotionsIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeletePromotionsIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeletePromotionsIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeletePromotionsIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteRegionsIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteRegionsIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteRegionsIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteRegionsIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteSalesChannelsIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteSalesChannelsIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteSalesChannelsIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteSalesChannelsIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteStockLocationsIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteStockLocationsIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteStockLocationsIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteStockLocationsIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteTaxRatesIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteTaxRatesIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteTaxRatesIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteTaxRatesIdRulesRuleIDConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteTaxRatesIdRulesRuleIDInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteTaxRatesIdRulesRuleIDNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteTaxRatesIdRulesRuleIDUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteTaxRatesIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteTaxRegionsIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteTaxRegionsIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteTaxRegionsIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteTaxRegionsIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteUsersIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteUsersIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteUsersIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteUsersIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *Error) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Code.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ErrorCode) Validate() error {
	switch s {
	case "invalid_state_error":
		return nil
	case "invalid_request_error":
		return nil
	case "api_error":
		return nil
	case "unknown_error":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ErrorType) Validate() error {
	switch s {
	case "QueryRunnerAlreadyReleasedError":
		return nil
	case "TransactionAlreadyStartedError":
		return nil
	case "TransactionNotStartedError":
		return nil
	case "conflict":
		return nil
	case "unauthorized":
		return nil
	case "payment_authorization_error":
		return nil
	case "duplicate_error":
		return nil
	case "not_allowed":
		return nil
	case "invalid_data":
		return nil
	case "not_found":
		return nil
	case "database_error":
		return nil
	case "unexpected_state":
		return nil
	case "invalid_argument":
		return nil
	case "unknown_error":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GetApiKeysConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetApiKeysIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetApiKeysIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetApiKeysIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetApiKeysIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetApiKeysInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetApiKeysNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetApiKeysUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCampaignsConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCampaignsIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCampaignsIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCampaignsIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCampaignsIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCampaignsInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCampaignsNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCampaignsUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCollectionsConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCollectionsIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCollectionsIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCollectionsIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCollectionsIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCollectionsInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCollectionsNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCollectionsUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCurrenciesCodeConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCurrenciesCodeInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCurrenciesCodeNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCurrenciesCodeUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCurrenciesConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCurrenciesInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCurrenciesNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCurrenciesUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCustomerGroupsConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCustomerGroupsIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCustomerGroupsIdCustomersConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCustomerGroupsIdCustomersInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCustomerGroupsIdCustomersNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCustomerGroupsIdCustomersUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCustomerGroupsIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCustomerGroupsIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCustomerGroupsIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCustomerGroupsInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCustomerGroupsNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCustomerGroupsUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCustomersConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCustomersIdAddressesAddressIDConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCustomersIdAddressesAddressIDInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCustomersIdAddressesAddressIDNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCustomersIdAddressesAddressIDUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCustomersIdAddressesConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCustomersIdAddressesInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCustomersIdAddressesNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCustomersIdAddressesUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCustomersIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCustomersIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCustomersIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCustomersIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCustomersInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCustomersNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetCustomersUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetInventoryItemsConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetInventoryItemsIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetInventoryItemsIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetInventoryItemsIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetInventoryItemsIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetInventoryItemsInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetInventoryItemsNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetInventoryItemsUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetInvitesConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetInvitesIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetInvitesIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetInvitesIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetInvitesIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetInvitesInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetInvitesNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetInvitesUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetPaymentsConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetPaymentsIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetPaymentsIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetPaymentsIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetPaymentsIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetPaymentsInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetPaymentsNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetPaymentsUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetPriceListsConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetPriceListsIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetPriceListsIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetPriceListsIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetPriceListsIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetPriceListsInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetPriceListsNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetPriceListsUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetPricingRuleTypesConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetPricingRuleTypesIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetPricingRuleTypesIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetPricingRuleTypesIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetPricingRuleTypesIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetPricingRuleTypesInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetPricingRuleTypesNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetPricingRuleTypesUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetProductsConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetProductsIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetProductsIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetProductsIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetProductsIdOptionsConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetProductsIdOptionsInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetProductsIdOptionsNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetProductsIdOptionsOptionIDConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetProductsIdOptionsOptionIDInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetProductsIdOptionsOptionIDNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetProductsIdOptionsOptionIDUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetProductsIdOptionsUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetProductsIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetProductsIdVariantsConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetProductsIdVariantsInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetProductsIdVariantsNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetProductsIdVariantsUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetProductsIdVariantsVariantIDConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetProductsIdVariantsVariantIDInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetProductsIdVariantsVariantIDNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetProductsIdVariantsVariantIDUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetProductsInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetProductsNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetProductsUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetPromotionsConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetPromotionsIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetPromotionsIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetPromotionsIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetPromotionsIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetPromotionsInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetPromotionsNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetPromotionsUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetRegionsConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetRegionsIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetRegionsIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetRegionsIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetRegionsIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetRegionsInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetRegionsNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetRegionsUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetSalesChannelsConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetSalesChannelsIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetSalesChannelsIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetSalesChannelsIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetSalesChannelsIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetSalesChannelsInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetSalesChannelsNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetSalesChannelsUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetStockLocationsIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetStockLocationsIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetStockLocationsIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetStockLocationsIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetStoresConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetStoresIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetStoresIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetStoresIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetStoresIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetStoresInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetStoresNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetStoresUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetTaxRatesConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetTaxRatesIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetTaxRatesIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetTaxRatesIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetTaxRatesIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetTaxRatesInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetTaxRatesNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetTaxRatesUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetUsersConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetUsersIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetUsersIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetUsersIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetUsersIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetUsersInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetUsersMeConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetUsersMeInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetUsersMeNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetUsersMeUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetUsersNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetUsersUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetWorkflowsExecutionsConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetWorkflowsExecutionsIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetWorkflowsExecutionsIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetWorkflowsExecutionsIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetWorkflowsExecutionsIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetWorkflowsExecutionsInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetWorkflowsExecutionsNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetWorkflowsExecutionsUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetWorkflowsExecutionsWorkflowIdSubscribeConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetWorkflowsExecutionsWorkflowIdSubscribeInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetWorkflowsExecutionsWorkflowIdSubscribeNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetWorkflowsExecutionsWorkflowIdSubscribeUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetWorkflowsExecutionsWorkflowIdTransactionIDConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetWorkflowsExecutionsWorkflowIdTransactionIDInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetWorkflowsExecutionsWorkflowIdTransactionIDNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetWorkflowsExecutionsWorkflowIdTransactionIDUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetWorkflowsExecutionsWorkflowIdTransactionIdStepIdSubscribeUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *MultipleErrors) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Errors {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "errors",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *PostApiKeysConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostApiKeysIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostApiKeysIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostApiKeysIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostApiKeysIdRevokeConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostApiKeysIdRevokeInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostApiKeysIdRevokeNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostApiKeysIdRevokeUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostApiKeysIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostApiKeysInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostApiKeysNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostApiKeysUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCampaignsConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCampaignsIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCampaignsIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCampaignsIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCampaignsIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCampaignsInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCampaignsNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCampaignsUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCollectionsConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCollectionsIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCollectionsIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCollectionsIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCollectionsIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCollectionsInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCollectionsNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCollectionsUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCustomerGroupsConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCustomerGroupsIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCustomerGroupsIdCustomersBatchConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCustomerGroupsIdCustomersBatchInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCustomerGroupsIdCustomersBatchNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCustomerGroupsIdCustomersBatchUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCustomerGroupsIdCustomersRemoveConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCustomerGroupsIdCustomersRemoveInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCustomerGroupsIdCustomersRemoveNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCustomerGroupsIdCustomersRemoveUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCustomerGroupsIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCustomerGroupsIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCustomerGroupsIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCustomerGroupsInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCustomerGroupsNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCustomerGroupsUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCustomersConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCustomersIdAddressesAddressIDConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCustomersIdAddressesAddressIDInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCustomersIdAddressesAddressIDNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCustomersIdAddressesAddressIDUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCustomersIdAddressesConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCustomersIdAddressesInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCustomersIdAddressesNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCustomersIdAddressesUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCustomersIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCustomersIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCustomersIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCustomersIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCustomersInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCustomersNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostCustomersUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostFulfillmentShippingOptionsIdRulesBatchAddConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostFulfillmentShippingOptionsIdRulesBatchAddInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostFulfillmentShippingOptionsIdRulesBatchAddNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostFulfillmentShippingOptionsIdRulesBatchAddUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostFulfillmentShippingOptionsIdRulesBatchRemoveConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostFulfillmentShippingOptionsIdRulesBatchRemoveInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostFulfillmentShippingOptionsIdRulesBatchRemoveNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostFulfillmentShippingOptionsIdRulesBatchRemoveUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostInventoryItemsConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostInventoryItemsIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostInventoryItemsIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostInventoryItemsIdLocationLevelsConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostInventoryItemsIdLocationLevelsInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostInventoryItemsIdLocationLevelsLocationIDConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostInventoryItemsIdLocationLevelsLocationIDInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostInventoryItemsIdLocationLevelsLocationIDNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostInventoryItemsIdLocationLevelsLocationIDUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostInventoryItemsIdLocationLevelsNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostInventoryItemsIdLocationLevelsUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostInventoryItemsIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostInventoryItemsIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostInventoryItemsInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostInventoryItemsNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostInventoryItemsUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostInvitesAcceptConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostInvitesAcceptInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostInvitesAcceptNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostInvitesAcceptUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostInvitesConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostInvitesIdResendConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostInvitesIdResendInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostInvitesIdResendNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostInvitesIdResendUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostInvitesInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostInvitesNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostInvitesUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPaymentsIdCaptureConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPaymentsIdCaptureInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPaymentsIdCaptureNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPaymentsIdCaptureUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPaymentsIdRefundConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPaymentsIdRefundInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPaymentsIdRefundNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPaymentsIdRefundUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPriceListsConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPriceListsIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPriceListsIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPriceListsIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPriceListsIdPricesBatchAddConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPriceListsIdPricesBatchAddInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPriceListsIdPricesBatchAddNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPriceListsIdPricesBatchAddUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPriceListsIdPricesBatchRemoveConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPriceListsIdPricesBatchRemoveInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPriceListsIdPricesBatchRemoveNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPriceListsIdPricesBatchRemoveUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPriceListsIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPriceListsInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPriceListsNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPriceListsUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPricingRuleTypesConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPricingRuleTypesIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPricingRuleTypesIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPricingRuleTypesIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPricingRuleTypesIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPricingRuleTypesInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPricingRuleTypesNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPricingRuleTypesUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostProductsConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostProductsIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostProductsIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostProductsIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostProductsIdOptionsConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostProductsIdOptionsInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostProductsIdOptionsNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostProductsIdOptionsOptionIDConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostProductsIdOptionsOptionIDInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostProductsIdOptionsOptionIDNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostProductsIdOptionsOptionIDUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostProductsIdOptionsUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostProductsIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostProductsIdVariantsConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostProductsIdVariantsInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostProductsIdVariantsNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostProductsIdVariantsUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostProductsIdVariantsVariantIDConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostProductsIdVariantsVariantIDInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostProductsIdVariantsVariantIDNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostProductsIdVariantsVariantIDUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostProductsInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostProductsNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostProductsUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPromotionsConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPromotionsIdBuyRulesBatchAddConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPromotionsIdBuyRulesBatchAddInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPromotionsIdBuyRulesBatchAddNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPromotionsIdBuyRulesBatchAddUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPromotionsIdBuyRulesBatchRemoveConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPromotionsIdBuyRulesBatchRemoveInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPromotionsIdBuyRulesBatchRemoveNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPromotionsIdBuyRulesBatchRemoveUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPromotionsIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPromotionsIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPromotionsIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPromotionsIdRulesBatchAddConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPromotionsIdRulesBatchAddInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPromotionsIdRulesBatchAddNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPromotionsIdRulesBatchAddUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPromotionsIdRulesBatchRemoveConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPromotionsIdRulesBatchRemoveInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPromotionsIdRulesBatchRemoveNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPromotionsIdRulesBatchRemoveUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPromotionsIdRulesBatchUpdateConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPromotionsIdRulesBatchUpdateInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPromotionsIdRulesBatchUpdateNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPromotionsIdRulesBatchUpdateUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPromotionsIdTargetRulesBatchAddConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPromotionsIdTargetRulesBatchAddInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPromotionsIdTargetRulesBatchAddNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPromotionsIdTargetRulesBatchAddUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPromotionsIdTargetRulesBatchRemoveConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPromotionsIdTargetRulesBatchRemoveInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPromotionsIdTargetRulesBatchRemoveNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPromotionsIdTargetRulesBatchRemoveUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPromotionsIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPromotionsInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPromotionsNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostPromotionsUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostRegionsConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostRegionsIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostRegionsIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostRegionsIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostRegionsIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostRegionsInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostRegionsNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostRegionsUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostSalesChannelsConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostSalesChannelsIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostSalesChannelsIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostSalesChannelsIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostSalesChannelsIdProductsBatchAddConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostSalesChannelsIdProductsBatchAddInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostSalesChannelsIdProductsBatchAddNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostSalesChannelsIdProductsBatchAddUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostSalesChannelsIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostSalesChannelsInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostSalesChannelsNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostSalesChannelsUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostStockLocationsConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostStockLocationsInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostStockLocationsNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostStockLocationsUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostStoresIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostStoresIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostStoresIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostStoresIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostTaxRatesConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostTaxRatesIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostTaxRatesIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostTaxRatesIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostTaxRatesIdRulesConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostTaxRatesIdRulesInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostTaxRatesIdRulesNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostTaxRatesIdRulesUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostTaxRatesIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostTaxRatesInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostTaxRatesNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostTaxRatesUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostTaxRegionsConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostTaxRegionsInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostTaxRegionsNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostTaxRegionsUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostUsersConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostUsersIdConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostUsersIdInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostUsersIdNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostUsersIdUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostUsersInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostUsersNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostUsersUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostWorkflowsExecutionsWorkflowIdRunConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostWorkflowsExecutionsWorkflowIdRunInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostWorkflowsExecutionsWorkflowIdRunNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostWorkflowsExecutionsWorkflowIdRunUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostWorkflowsExecutionsWorkflowIdStepsFailureConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostWorkflowsExecutionsWorkflowIdStepsFailureInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostWorkflowsExecutionsWorkflowIdStepsFailureNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostWorkflowsExecutionsWorkflowIdStepsFailureUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostWorkflowsExecutionsWorkflowIdStepsSuccessConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostWorkflowsExecutionsWorkflowIdStepsSuccessInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostWorkflowsExecutionsWorkflowIdStepsSuccessNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *PostWorkflowsExecutionsWorkflowIdStepsSuccessUnprocessableEntity) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s R400Error) Validate() error {
	switch s.Type {
	case ErrorR400Error:
		if err := s.Error.Validate(); err != nil {
			return err
		}
		return nil
	case MultipleErrorsR400Error:
		if err := s.MultipleErrors.Validate(); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}
